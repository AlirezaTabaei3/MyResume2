%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.0
%%For: Tom
%%CreationDate: 4/24/2021
%%BoundingBox: 0 0 469 331
%%HiResBoundingBox: 0 0 468.4615 330.5211
%%CropBox: 0 0 468.4615 330.5211
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.0.0 x60 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164519, 2020/08/25-17:54:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-04-24T20:01:24+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-04-24T20:01:24+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-04-24T20:01:24+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 25.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>184</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq0zqvXqegHXFVNpSPtME9upw0qmZou/JvmaDDStetD/AL7+/GlbE1ueqU+QGNFV&#xA;RDG3925B8Ov4HAq7my/bG38w6YqvwK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FVKScDYH6f6YQFQzSsa02r1Pc/M5KlWYq7FXYq7FXYqrxXJGz7r498BCqw+Eck3Q9Q&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:86a48a3b-18b1-ce46-b71b-50df759618b7</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:86a48a3b-18b1-ce46-b71b-50df759618b7</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stRef:instanceID>
            <stRef:documentID>xmp.did:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0d7bd0ce-43e5-4e30-9115-e50c86d0098e</stEvt:instanceID>
                  <stEvt:when>2021-03-09T21:20:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:75e9ec93-e308-894f-a1b7-b6c2f91b043a</stEvt:instanceID>
                  <stEvt:when>2021-04-24T19:57:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:86a48a3b-18b1-ce46-b71b-50df759618b7</stEvt:instanceID>
                  <stEvt:when>2021-04-24T20:01:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -330.521 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 330.521 li
468.461 330.521 li
468.461 0 li
cp
clp
247.255 8.24244 mo
177.133 6.76256 172.974 57.0306 112.139 69.8875 cv
51.3035 82.744 2.14924 74.0906 .0755076 155.55 cv
-2.9968 276.255 87.6428 356.841 246.595 322.593 cv
283.648 314.609 319.093 316.899 350.532 319.19 cv
390.67 322.114 424.279 325.038 446.372 306.585 cv
467.729 288.748 462.779 232.841 437.552 185.209 cv
412.325 137.577 443.183 127.019 411.202 95.1903 cv
386.952 71.0555 348.611 86.8328 329.288 66.9979 cv
309.965 47.1629 291.444 9.17512 247.255 8.24244 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.94902 .945098 .968627 rgb
f
249.542 1.71954 mo
212.359 1.71954 194.294 16.5662 175.195 32.2606 cv
159.62 45.0599 143.516 58.2943 116.101 64.0882 cv
105.746 66.2767 95.824 67.8343 86.2283 69.3411 cv
39.1619 76.7318 5.15654 82.0716 3.42949 149.917 cv
1.97051 207.244 21.8699 255.972 59.4632 287.128 cv
104.775 324.679 171.266 335.361 251.745 318.021 cv
290.434 309.685 327.328 312.385 359.88 314.763 cv
398.514 317.589 431.879 320.028 453.453 302.009 cv
474.246 284.641 470.066 228.905 444.323 180.298 cv
432.082 157.187 432.766 142.865 433.369 130.228 cv
434.014 116.732 434.524 106.072 417.823 89.4505 cv
405.183 76.8714 388.747 75.1995 372.853 73.5828 cv
358.259 72.0984 344.476 70.6966 334.956 60.9241 cv
330.679 56.5335 326.461 51.2952 321.995 45.7488 cv
305.665 25.4686 287.157 2.48175 252.576 1.75177 cv
251.551 1.73028 250.539 1.71954 249.542 1.71954 cv
cp
181.348 327.743 mo
166.733 327.743 152.74 326.584 139.431 324.261 cv
107.613 318.708 80.3382 306.66 58.366 288.451 cv
39.3147 272.662 24.7571 252.641 15.0979 228.946 cv
5.47979 205.351 .975879 178.748 1.71074 149.873 cv
2.52227 117.989 10.5037 97.5535 26.8299 85.5613 cv
41.7786 74.5809 62.2537 71.3655 85.9617 67.6429 cv
95.5354 66.1395 105.435 64.5848 115.745 62.4061 cv
142.749 56.699 158.689 43.6004 174.104 30.9324 cv
193.967 14.6092 212.732 -.808778 252.614 .0330184 cv
287.993 .780089 307.589 25.116 323.334 44.6707 cv
327.774 50.1844 331.967 55.3919 336.188 59.7244 cv
345.272 69.0496 358.753 70.4207 373.027 71.8724 cv
389.219 73.5193 405.963 75.223 419.035 88.2322 cv
436.278 105.392 435.726 116.94 435.087 130.31 cv
434.493 142.726 433.822 156.799 445.841 179.494 cv
458.171 202.774 466.274 229.39 468.07 252.517 cv
469.929 276.452 465.129 294.497 454.555 303.329 cv
432.449 321.793 398.761 319.328 359.755 316.478 cv
327.319 314.105 290.554 311.418 252.108 319.702 cv
227.242 325.059 203.577 327.743 181.348 327.743 cv
cp
f
135.707 240.577 mo
93.8816 240.577 li
75.6194 240.577 75.638 212.965 93.8816 212.965 cv
135.707 212.965 li
150.49 212.965 149.513 229.452 149.513 226.771 cv
149.513 234.396 143.332 240.577 135.707 240.577 cv
cp
1 1 1 rgb
f
93.8816 213.531 mo
84.8651 213.531 80.7586 220.396 80.7586 226.776 cv
80.7586 233.15 84.8651 240.011 93.8816 240.011 cv
135.707 240.011 li
143.008 240.011 148.947 234.071 148.947 226.771 cv
148.895 225.617 148.45 220.652 145.076 217.125 cv
142.794 214.74 139.642 213.531 135.707 213.531 cv
93.8816 213.531 li
135.707 241.143 mo
93.8816 241.143 li
84.0867 241.143 79.6253 233.696 79.6253 226.776 cv
79.6253 219.851 84.0867 212.398 93.8816 212.398 cv
135.707 212.398 li
142.796 212.398 146.311 216.136 148.012 219.271 cv
150.07 223.065 150.094 226.945 150.094 226.983 cv
150.075 227.175 li
149.86 234.914 143.497 241.143 135.707 241.143 cv
.933333 .894118 .85098 rgb
f
89.4378 229.338 mo
86.6785 229.338 86.8709 226.204 86.8709 226.771 cv
86.8709 224.012 90.0042 224.204 89.4378 224.204 cv
92.1971 224.204 92.0047 227.338 92.0047 226.771 cv
92.0047 229.53 88.8714 229.338 89.4378 229.338 cv
cp
.839216 .447059 .227451 rgb
f
127.028 229.338 mo
96.9036 229.338 95.242 230.283 95.242 226.771 cv
95.242 225.354 96.3904 224.204 97.8089 224.204 cv
127.028 224.204 li
130.431 224.204 130.397 229.338 127.028 229.338 cv
cp
.8 .533333 .164706 rgb
f
140.151 229.338 mo
134.081 229.338 li
130.677 229.338 130.711 224.204 134.081 224.204 cv
139.32 224.204 142.718 223.547 142.718 226.771 cv
142.718 228.188 141.569 229.338 140.151 229.338 cv
cp
f
332.551 166.048 mo
211.318 166.048 212.783 168.055 212.783 161.138 cv
212.783 73.9144 210.93 73.282 217.692 73.282 cv
338.926 73.282 337.461 71.2747 337.461 78.1917 cv
337.461 165.415 339.313 166.048 332.551 166.048 cv
cp
1 1 1 rgb
f
307.672 73.5784 mo
300.885 73.5784 292.577 73.6185 282.419 73.6678 cv
265.763 73.7484 245.033 73.8484 217.692 73.8484 cv
216.383 73.8484 215.551 73.8782 214.972 74.4598 cv
212.967 76.4764 213.02 85.659 213.197 116.086 cv
213.264 127.815 213.349 142.413 213.349 161.138 cv
213.348 161.384 li
213.346 162.615 213.367 163.281 213.876 163.788 cv
216.005 165.913 226.98 165.859 267.82 165.662 cv
284.477 165.581 305.207 165.481 332.551 165.481 cv
333.862 165.481 334.694 165.451 335.272 164.869 cv
337.277 162.853 337.223 153.67 337.047 123.244 cv
336.98 111.514 336.895 96.9163 336.895 78.1922 cv
336.895 77.9456 li
336.899 76.7147 336.876 76.0486 336.367 75.5408 cv
334.768 73.9451 328.172 73.5784 307.672 73.5784 cv
cp
242.48 166.885 mo
220.647 166.885 214.956 166.467 213.076 164.591 cv
212.209 163.726 212.212 162.639 212.216 161.381 cv
212.216 161.138 li
212.216 142.417 212.131 127.821 212.063 116.092 cv
211.876 83.7068 211.831 76.0115 214.169 73.6609 cv
215.109 72.7151 216.364 72.7151 217.692 72.7151 cv
245.031 72.7151 265.758 72.6151 282.413 72.5345 cv
325.697 72.3245 334.704 72.2811 337.167 74.7391 cv
338.034 75.6033 338.032 76.6902 338.029 77.9485 cv
338.028 78.1922 li
338.028 96.9129 338.113 111.509 338.18 123.238 cv
338.367 155.623 338.412 163.318 336.076 165.668 cv
335.135 166.614 333.88 166.614 332.551 166.614 cv
305.21 166.614 284.481 166.714 267.826 166.795 cv
257.578 166.845 249.252 166.885 242.48 166.885 cv
cp
.933333 .894118 .85098 rgb
f
337.461 77.8924 mo
212.783 77.8924 li
212.783 75.347 214.846 73.282 217.392 73.282 cv
340.212 73.282 337.461 71.5511 337.461 77.8924 cv
cp
.266667 .258824 .266667 rgb
f
213.388 77.3255 mo
336.899 77.3255 li
336.905 76.3997 336.871 75.8812 336.473 75.4803 cv
334.5 73.4954 323.078 73.5403 280.582 73.7054 cv
264.22 73.7689 243.858 73.8484 217.392 73.8484 cv
215.355 73.8484 213.665 75.3631 213.388 77.3255 cv
cp
338.028 78.4588 mo
212.216 78.4588 li
212.216 77.8919 li
212.216 75.0379 214.538 72.7151 217.392 72.7151 cv
243.856 72.7151 264.217 72.636 280.577 72.5726 cv
326.664 72.3924 334.97 72.3607 337.277 74.6815 cv
338.05 75.4593 338.041 76.4456 338.031 77.4901 cv
338.028 78.4588 li
cp
f
332.085 76.8299 mo
333.474 76.8299 334.105 76.9656 334.105 76.3641 cv
334.105 74.9759 334.241 74.3441 333.639 74.3441 cv
332.251 74.3441 331.619 74.2088 331.619 74.8099 cv
331.619 76.1985 331.484 76.8299 332.085 76.8299 cv
cp
.745098 .752941 .760784 rgb
f
332.137 76.595 mo
331.937 76.512 li
331.826 76.4017 331.826 76.2225 331.937 76.1116 cv
333.387 74.6619 li
333.497 74.5511 333.677 74.5511 333.787 74.6619 cv
333.898 74.7723 333.898 74.9515 333.787 75.0623 cv
332.338 76.512 li
332.137 76.595 li
cp
1 1 1 rgb
f
333.587 76.595 mo
333.387 76.512 li
331.937 75.0623 li
331.826 74.9515 331.826 74.7723 331.937 74.6619 cv
332.048 74.5511 332.227 74.5511 332.338 74.6619 cv
333.787 76.1116 li
333.898 76.2225 333.898 76.4017 333.787 76.512 cv
333.587 76.595 li
cp
f
231.567 85.5989 mo
219.278 85.5989 li
219.121 85.5989 218.994 85.4725 218.994 85.3157 cv
218.994 85.1595 219.121 85.0325 219.278 85.0325 cv
231.567 85.0325 li
231.723 85.0325 231.85 85.1595 231.85 85.3157 cv
231.85 85.4725 231.723 85.5989 231.567 85.5989 cv
cp
.933333 .894118 .85098 rgb
f
231.567 154.297 mo
219.278 154.297 li
219.121 154.297 218.994 154.17 218.994 154.014 cv
218.994 153.857 219.121 153.731 219.278 153.731 cv
231.567 153.731 li
231.723 153.731 231.85 153.857 231.85 154.014 cv
231.85 154.17 231.723 154.297 231.567 154.297 cv
cp
f
219.278 154.297 mo
219.121 154.297 218.994 154.17 218.994 154.014 cv
218.994 85.3157 li
218.994 85.1595 219.121 85.0325 219.278 85.0325 cv
219.434 85.0325 219.561 85.1595 219.561 85.3157 cv
219.561 154.014 li
219.561 154.17 219.434 154.297 219.278 154.297 cv
cp
f
236.586 91.889 mo
226.548 91.889 li
226.391 91.889 226.264 91.7625 226.264 91.6058 cv
226.264 91.4495 226.391 91.3226 226.548 91.3226 cv
236.586 91.3226 li
236.743 91.3226 236.869 91.4495 236.869 91.6058 cv
236.869 91.7625 236.743 91.889 236.586 91.889 cv
cp
f
236.586 148.007 mo
226.548 148.007 li
226.391 148.007 226.264 147.88 226.264 147.723 cv
226.264 147.567 226.391 147.44 226.548 147.44 cv
236.586 147.44 li
236.743 147.44 236.869 147.567 236.869 147.723 cv
236.869 147.88 236.743 148.007 236.586 148.007 cv
cp
f
226.548 148.007 mo
226.391 148.007 226.264 147.88 226.264 147.723 cv
226.264 91.6058 li
226.264 91.4495 226.391 91.3226 226.548 91.3226 cv
226.704 91.3226 226.831 91.4495 226.831 91.6058 cv
226.831 147.723 li
226.831 147.88 226.704 148.007 226.548 148.007 cv
cp
f
242.755 100.241 mo
235.704 100.241 li
235.548 100.241 235.421 100.115 235.421 99.9578 cv
235.421 99.8011 235.548 99.6746 235.704 99.6746 cv
242.755 99.6746 li
242.911 99.6746 243.038 99.8011 243.038 99.9578 cv
243.038 100.115 242.911 100.241 242.755 100.241 cv
cp
f
242.755 139.655 mo
235.704 139.655 li
235.548 139.655 235.421 139.529 235.421 139.372 cv
235.421 139.215 235.548 139.089 235.704 139.089 cv
242.755 139.089 li
242.911 139.089 243.038 139.215 243.038 139.372 cv
243.038 139.529 242.911 139.655 242.755 139.655 cv
cp
f
235.704 139.655 mo
235.548 139.655 235.421 139.529 235.421 139.372 cv
235.421 99.9578 li
235.421 99.8011 235.548 99.6746 235.704 99.6746 cv
235.861 99.6746 235.988 99.8011 235.988 99.9578 cv
235.988 139.372 li
235.988 139.529 235.861 139.655 235.704 139.655 cv
cp
f
243.747 139.655 mo
243.591 139.655 243.464 139.529 243.464 139.372 cv
243.464 110.35 li
243.464 110.194 243.591 110.067 243.747 110.067 cv
243.905 110.067 244.031 110.194 244.031 110.35 cv
244.031 139.372 li
244.031 139.529 243.905 139.655 243.747 139.655 cv
cp
f
245.673 87.575 mo
221.295 87.575 221.991 87.8651 221.991 86.8968 cv
221.991 83.845 221.791 83.0565 222.668 83.0565 cv
247.047 83.0565 246.352 82.7664 246.352 83.7347 cv
246.352 86.7859 246.551 87.575 245.673 87.575 cv
cp
.619608 .74902 .847059 rgb
f
255.25 94.0794 mo
230.871 94.0794 231.567 94.369 231.567 93.4012 cv
231.567 90.3494 231.367 89.5604 232.245 89.5604 cv
256.624 89.5604 255.928 89.2708 255.928 90.2386 cv
255.928 93.2903 256.128 94.0794 255.25 94.0794 cv
cp
.8 .533333 .164706 rgb
f
245.673 102.217 mo
239.117 102.217 238.586 102.443 238.586 101.539 cv
238.586 98.4871 238.386 97.6985 239.264 97.6985 cv
245.821 97.6985 246.352 97.4725 246.352 98.3763 cv
246.352 101.428 246.551 102.217 245.673 102.217 cv
cp
.839216 .447059 .227451 rgb
f
268.859 94.0794 mo
262.302 94.0794 261.771 94.3055 261.771 93.4012 cv
261.771 90.3494 261.572 89.5604 262.45 89.5604 cv
269.006 89.5604 269.537 89.3348 269.537 90.2386 cv
269.537 93.2903 269.737 94.0794 268.859 94.0794 cv
cp
f
287.673 121.717 mo
281.117 121.717 280.585 121.943 280.585 121.039 cv
280.585 117.987 280.386 117.198 281.263 117.198 cv
287.82 117.198 288.351 116.972 288.351 117.876 cv
288.351 120.928 288.55 121.717 287.673 121.717 cv
cp
f
298.97 121.717 mo
292.413 121.717 291.882 121.943 291.882 121.039 cv
291.882 117.987 291.683 117.198 292.56 117.198 cv
299.117 117.198 299.648 116.972 299.648 117.876 cv
299.648 121.039 li
299.648 121.413 299.345 121.717 298.97 121.717 cv
cp
f
309.77 121.717 mo
303.213 121.717 302.682 121.943 302.682 121.039 cv
302.682 117.987 302.483 117.198 303.36 117.198 cv
309.916 117.198 310.448 116.972 310.448 117.876 cv
310.448 120.928 310.647 121.717 309.77 121.717 cv
cp
f
264.976 149.983 mo
258.419 149.983 257.888 150.209 257.888 149.305 cv
257.888 146.253 257.689 145.464 258.567 145.464 cv
265.122 145.464 265.654 145.238 265.654 146.142 cv
265.654 149.194 265.854 149.983 264.976 149.983 cv
cp
f
246.952 141.631 mo
240.396 141.631 239.865 141.857 239.865 140.953 cv
239.865 137.901 239.665 137.112 240.543 137.112 cv
247.099 137.112 247.63 136.887 247.63 137.79 cv
247.63 140.842 247.83 141.631 246.952 141.631 cv
cp
f
246.952 131.957 mo
240.396 131.957 239.865 132.183 239.865 131.279 cv
239.865 128.227 239.665 127.438 240.543 127.438 cv
247.099 127.438 247.63 127.213 247.63 128.117 cv
247.63 131.168 247.83 131.957 246.952 131.957 cv
cp
f
246.952 121.717 mo
240.396 121.717 239.865 121.943 239.865 121.039 cv
239.865 117.987 239.665 117.198 240.543 117.198 cv
247.099 117.198 247.63 116.972 247.63 117.876 cv
247.63 120.928 247.83 121.717 246.952 121.717 cv
cp
f
246.952 112.61 mo
240.396 112.61 239.865 112.835 239.865 111.931 cv
239.865 108.88 239.665 108.091 240.543 108.091 cv
247.099 108.091 247.63 107.865 247.63 108.769 cv
247.63 111.821 247.83 112.61 246.952 112.61 cv
cp
f
250.088 149.868 mo
231.186 149.868 231.567 150.157 231.567 149.19 cv
231.567 146.138 231.367 145.349 232.245 145.349 cv
251.148 145.349 250.767 145.06 250.767 146.027 cv
250.767 149.079 250.966 149.868 250.088 149.868 cv
cp
.8 .533333 .164706 rgb
f
235.026 156.273 mo
223.771 156.273 223.524 156.53 223.524 155.595 cv
223.524 152.543 223.324 151.754 224.202 151.754 cv
235.457 151.754 235.704 151.498 235.704 152.432 cv
235.704 155.484 235.904 156.273 235.026 156.273 cv
cp
.619608 .74902 .847059 rgb
f
292.896 87.575 mo
248.229 87.575 250.411 87.8875 250.411 86.8968 cv
250.411 83.845 250.212 83.0565 251.09 83.0565 cv
295.756 83.0565 293.574 82.744 293.574 83.7347 cv
293.574 86.7859 293.773 87.575 292.896 87.575 cv
cp
.8 .533333 .164706 rgb
f
293.25 131.957 mo
248.583 131.957 250.767 132.27 250.767 131.279 cv
250.767 128.227 250.567 127.438 251.445 127.438 cv
296.111 127.438 293.928 127.126 293.928 128.117 cv
293.928 131.168 294.128 131.957 293.25 131.957 cv
cp
.619608 .74902 .847059 rgb
f
275.117 121.717 mo
249.744 121.717 250.767 122.006 250.767 121.039 cv
250.767 117.987 250.567 117.198 251.445 117.198 cv
276.817 117.198 275.795 116.909 275.795 117.876 cv
275.795 120.928 275.994 121.717 275.117 121.717 cv
cp
f
293.25 112.61 mo
248.583 112.61 250.767 112.922 250.767 111.931 cv
250.767 108.88 250.567 108.091 251.445 108.091 cv
296.111 108.091 293.928 107.778 293.928 108.769 cv
293.928 111.821 294.128 112.61 293.25 112.61 cv
cp
f
330.288 87.575 mo
300.48 87.575 301.48 87.8763 301.48 86.8968 cv
301.48 83.845 301.28 83.0565 302.158 83.0565 cv
331.966 83.0565 330.966 82.7552 330.966 83.7347 cv
330.966 86.7859 331.165 87.575 330.288 87.575 cv
cp
.8 .533333 .164706 rgb
f
406.954 205.75 mo
301.144 205.75 303.213 207.368 303.213 201.881 cv
303.213 140.081 301.752 139.024 307.081 139.024 cv
412.892 139.024 410.823 137.406 410.823 142.893 cv
410.823 204.693 412.283 205.75 406.954 205.75 cv
1 1 1 rgb
f
385.843 139.368 mo
380.018 139.368 372.861 139.401 364.084 139.441 cv
349.474 139.508 331.29 139.591 307.081 139.591 cv
305.966 139.591 305.401 139.659 304.998 140.063 cv
303.478 141.594 303.524 148.734 303.659 169.929 cv
303.713 178.263 303.78 188.637 303.78 201.881 cv
303.778 202.195 li
303.772 203.066 303.783 203.538 304.126 203.882 cv
305.774 205.534 315.132 205.491 349.951 205.333 cv
364.561 205.265 382.744 205.183 406.954 205.183 cv
408.07 205.183 408.636 205.115 409.037 204.71 cv
410.558 203.18 410.512 196.04 410.376 174.847 cv
410.323 166.513 410.256 156.139 410.256 142.893 cv
410.258 142.579 li
410.265 141.707 410.252 141.236 409.909 140.892 cv
408.677 139.656 403.129 139.368 385.843 139.368 cv
327.928 206.54 mo
309.16 206.54 304.836 206.198 303.324 204.682 cv
302.631 203.987 302.638 203.112 302.645 202.186 cv
302.646 201.881 li
302.646 188.64 302.579 178.269 302.526 169.936 cv
302.377 146.66 302.342 141.13 304.195 139.265 cv
304.938 138.517 305.901 138.457 307.081 138.457 cv
331.287 138.457 349.47 138.374 364.079 138.308 cv
401.913 138.135 408.73 138.104 410.712 140.092 cv
411.405 140.787 411.398 141.661 411.391 142.587 cv
411.39 142.893 li
411.39 156.135 411.456 166.507 411.51 174.84 cv
411.659 198.114 411.695 203.643 409.841 205.509 cv
409.098 206.257 408.135 206.316 406.954 206.316 cv
382.746 206.316 364.565 206.399 349.955 206.466 cv
340.987 206.507 333.759 206.54 327.928 206.54 cv
.933333 .894118 .85098 rgb
f
410.823 142.34 mo
303.213 142.34 li
303.213 140.508 304.699 139.024 306.529 139.024 cv
414.187 139.024 410.823 137.603 410.823 142.34 cv
cp
.266667 .258824 .266667 rgb
f
303.838 141.774 mo
410.266 141.774 li
410.276 141.21 410.257 140.914 410.04 140.693 cv
408.653 139.28 399.413 139.317 365.036 139.456 cv
350.905 139.513 331.549 139.591 306.529 139.591 cv
305.207 139.591 304.1 140.529 303.838 141.774 cv
cp
411.39 142.907 mo
302.646 142.907 li
302.646 142.341 li
302.646 140.2 304.388 138.457 306.529 138.457 cv
331.547 138.457 350.901 138.38 365.033 138.323 cv
402.392 138.171 409.126 138.145 410.849 139.899 cv
411.428 140.49 411.411 141.225 411.396 141.936 cv
411.393 142.065 411.39 142.2 411.39 142.341 cv
411.39 142.907 li
cp
f
406.148 141.576 mo
407.079 141.576 407.926 141.769 407.926 141.209 cv
407.926 140.534 408.083 139.788 407.559 139.788 cv
406.628 139.788 405.781 139.596 405.781 140.155 cv
405.781 140.83 405.623 141.576 406.148 141.576 cv
cp
.745098 .752941 .760784 rgb
f
406.228 141.487 mo
406.01 141.385 li
405.91 141.265 405.926 141.086 406.046 140.986 cv
407.297 139.943 li
407.418 139.843 407.596 139.859 407.697 139.979 cv
407.797 140.099 407.781 140.278 407.66 140.379 cv
406.409 141.422 li
406.228 141.487 li
cp
1 1 1 rgb
f
407.479 141.487 mo
407.297 141.422 li
406.046 140.379 li
405.926 140.278 405.91 140.099 406.01 139.979 cv
406.111 139.859 406.289 139.843 406.409 139.943 cv
407.66 140.986 li
407.781 141.086 407.797 141.265 407.697 141.385 cv
407.479 141.487 li
cp
f
314.177 150.567 mo
312.338 150.567 311.479 150.752 311.479 149.94 cv
311.479 147.869 li
311.479 147.523 311.76 147.242 312.107 147.242 cv
314.177 147.242 li
314.524 147.242 314.804 147.523 314.804 147.869 cv
314.804 149.94 li
314.804 150.286 314.524 150.567 314.177 150.567 cv
cp
.839216 .447059 .227451 rgb
f
314.177 157.88 mo
312.338 157.88 311.479 158.065 311.479 157.253 cv
311.479 155.414 311.294 154.555 312.107 154.555 cv
314.177 154.555 li
314.524 154.555 314.804 154.836 314.804 155.182 cv
314.804 157.253 li
314.804 157.599 314.524 157.88 314.177 157.88 cv
cp
f
314.177 165.668 mo
312.338 165.668 311.479 165.852 311.479 165.04 cv
311.479 163.201 311.294 162.343 312.107 162.343 cv
314.177 162.343 li
314.524 162.343 314.804 162.623 314.804 162.97 cv
314.804 165.04 li
314.804 165.387 314.524 165.668 314.177 165.668 cv
cp
f
314.177 172.05 mo
312.338 172.05 311.479 172.233 311.479 171.422 cv
311.479 169.583 311.294 168.723 312.107 168.723 cv
314.177 168.723 li
314.524 168.723 314.804 169.005 314.804 169.351 cv
314.804 171.422 li
314.804 171.768 314.524 172.05 314.177 172.05 cv
cp
f
314.177 179.513 mo
312.338 179.513 311.479 179.698 311.479 178.886 cv
311.479 177.047 311.294 176.188 312.107 176.188 cv
314.177 176.188 li
314.524 176.188 314.804 176.469 314.804 176.815 cv
314.804 178.886 li
314.804 179.232 314.524 179.513 314.177 179.513 cv
cp
f
325.438 149.15 mo
316.739 149.15 li
316.603 149.15 316.492 149.04 316.492 148.905 cv
316.492 148.769 316.603 148.659 316.739 148.659 cv
325.438 148.659 li
325.573 148.659 325.683 148.769 325.683 148.905 cv
325.683 149.04 325.573 149.15 325.438 149.15 cv
cp
.933333 .894118 .85098 rgb
f
325.438 197.777 mo
316.739 197.777 li
316.603 197.777 316.492 197.667 316.492 197.532 cv
316.492 197.396 316.603 197.286 316.739 197.286 cv
325.438 197.286 li
325.573 197.286 325.683 197.396 325.683 197.532 cv
325.683 197.667 325.573 197.777 325.438 197.777 cv
cp
f
316.739 197.777 mo
316.603 197.777 316.492 197.667 316.492 197.532 cv
316.492 148.905 li
316.492 148.769 316.603 148.659 316.739 148.659 cv
316.874 148.659 316.984 148.769 316.984 148.905 cv
316.984 197.532 li
316.984 197.667 316.874 197.777 316.739 197.777 cv
cp
f
336.854 150.567 mo
324.166 150.567 li
323.617 150.567 323.171 150.122 323.171 149.572 cv
323.171 148.238 li
323.171 147.688 323.617 147.242 324.166 147.242 cv
336.854 147.242 li
337.404 147.242 337.849 147.688 337.849 148.238 cv
337.849 149.572 li
337.849 150.122 337.404 150.567 336.854 150.567 cv
cp
.619608 .74902 .847059 rgb
f
351.293 150.635 mo
341.112 150.635 341.696 150.463 341.696 149.572 cv
341.696 148.238 li
341.696 147.688 342.141 147.242 342.691 147.242 cv
385.908 147.242 li
386.457 147.242 386.903 147.688 386.903 148.238 cv
386.903 149.572 li
386.903 150.122 386.457 150.567 385.908 150.567 cv
368.281 150.567 357.673 150.635 351.293 150.635 cv
.454902 .411765 .407843 rgb
f
385.908 165.193 mo
342.691 165.193 li
342.141 165.193 341.696 164.748 341.696 164.198 cv
341.696 162.864 li
341.696 162.314 342.141 161.868 342.691 161.868 cv
360.303 161.868 370.91 161.801 377.292 161.801 cv
387.488 161.801 386.903 161.972 386.903 162.864 cv
386.903 163.87 387.107 165.193 385.908 165.193 cv
f
385.908 179.819 mo
342.691 179.819 li
342.141 179.819 341.696 179.374 341.696 178.824 cv
341.696 177.489 li
341.696 176.939 342.141 176.494 342.691 176.494 cv
360.314 176.494 370.922 176.427 377.302 176.427 cv
387.486 176.427 386.903 176.598 386.903 177.489 cv
386.903 178.496 387.107 179.819 385.908 179.819 cv
f
351.294 194.513 mo
349.495 194.513 348.031 194.507 346.841 194.493 cv
346.84 193.386 346.84 192.263 346.839 191.119 cv
362.007 191.109 371.442 191.053 377.304 191.053 cv
387.485 191.053 386.903 191.224 386.903 192.115 cv
386.903 193.122 387.107 194.445 385.908 194.445 cv
368.281 194.445 357.674 194.513 351.294 194.513 cv
f
336.854 157.88 mo
324.166 157.88 li
323.617 157.88 323.171 157.435 323.171 156.885 cv
323.171 155.551 li
323.171 155.001 323.617 154.555 324.166 154.555 cv
336.854 154.555 li
337.404 154.555 337.849 155.001 337.849 155.551 cv
337.849 156.885 li
337.849 157.435 337.404 157.88 336.854 157.88 cv
cp
.619608 .74902 .847059 rgb
f
336.854 165.193 mo
324.166 165.193 li
323.617 165.193 323.171 164.748 323.171 164.198 cv
323.171 162.864 li
323.171 162.314 323.617 161.868 324.166 161.868 cv
337.397 161.868 337.849 161.506 337.849 162.864 cv
337.849 164.198 li
337.849 164.748 337.404 165.193 336.854 165.193 cv
cp
f
336.854 172.507 mo
324.166 172.507 li
323.617 172.507 323.171 172.06 323.171 171.511 cv
323.171 170.177 li
323.171 169.627 323.617 169.18 324.166 169.18 cv
336.854 169.18 li
337.404 169.18 337.849 169.627 337.849 170.177 cv
337.849 171.511 li
337.849 172.06 337.404 172.507 336.854 172.507 cv
cp
f
336.854 179.819 mo
324.166 179.819 li
323.617 179.819 323.171 179.374 323.171 178.824 cv
323.171 177.489 li
323.171 176.939 323.617 176.494 324.166 176.494 cv
336.854 176.494 li
337.404 176.494 337.849 176.939 337.849 177.489 cv
337.849 178.824 li
337.849 179.374 337.404 179.819 336.854 179.819 cv
cp
f
336.854 187.133 mo
324.166 187.133 li
323.617 187.133 323.171 186.686 323.171 186.137 cv
323.171 184.803 li
323.171 184.253 323.617 183.806 324.166 183.806 cv
336.854 183.806 li
337.404 183.806 337.849 184.253 337.849 184.803 cv
337.849 186.137 li
337.849 186.686 337.404 187.133 336.854 187.133 cv
cp
f
336.854 194.445 mo
323.623 194.445 323.171 194.807 323.171 193.45 cv
323.171 192.443 322.966 191.12 324.166 191.12 cv
337.397 191.12 337.849 190.758 337.849 192.115 cv
337.849 193.122 338.054 194.445 336.854 194.445 cv
cp
f
401.562 157.88 mo
388.331 157.88 387.879 158.242 387.879 156.885 cv
387.879 155.878 387.674 154.555 388.874 154.555 cv
402.105 154.555 402.557 154.193 402.557 155.551 cv
402.557 156.557 402.762 157.88 401.562 157.88 cv
cp
f
401.562 172.507 mo
388.331 172.507 387.879 172.868 387.879 171.511 cv
387.879 170.504 387.674 169.18 388.874 169.18 cv
402.105 169.18 402.557 168.819 402.557 170.177 cv
402.557 171.183 402.762 172.507 401.562 172.507 cv
cp
f
401.562 187.133 mo
388.331 187.133 387.879 187.494 387.879 186.137 cv
387.879 185.13 387.674 183.806 388.874 183.806 cv
402.105 183.806 402.557 183.445 402.557 184.803 cv
402.557 185.809 402.762 187.133 401.562 187.133 cv
cp
f
341.781 262.901 mo
218.856 262.901 221.317 264.763 221.317 258.409 cv
221.317 186.739 219.635 185.421 225.809 185.421 cv
341.781 185.421 li
344.261 185.421 346.273 187.431 346.273 189.913 cv
346.273 261.583 347.954 262.901 341.781 262.901 cv
1 1 1 rgb
f
225.809 185.987 mo
224.497 185.987 223.829 186.071 223.338 186.565 cv
221.537 188.378 221.585 196.053 221.746 221.485 cv
221.807 231.126 221.883 243.125 221.883 258.409 cv
221.882 258.78 li
221.873 259.811 221.888 260.369 222.31 260.792 cv
224.248 262.737 235.169 262.688 275.804 262.505 cv
292.728 262.43 313.79 262.335 341.781 262.335 cv
343.092 262.335 343.76 262.251 344.251 261.757 cv
346.052 259.944 346.004 252.268 345.843 226.834 cv
345.782 217.194 345.706 205.196 345.706 189.913 cv
345.706 187.748 343.945 185.987 341.781 185.987 cv
225.809 185.987 li
250.141 263.723 mo
228.273 263.723 223.241 263.332 221.507 261.592 cv
220.732 260.814 220.74 259.822 220.748 258.771 cv
220.75 258.409 li
220.75 243.129 220.675 231.132 220.614 221.492 cv
220.442 194.36 220.401 187.913 222.534 185.766 cv
223.374 184.921 224.467 184.854 225.809 184.854 cv
341.781 184.854 li
344.57 184.854 346.839 187.124 346.839 189.913 cv
346.839 205.192 346.915 217.188 346.976 226.827 cv
347.148 253.962 347.189 260.409 345.055 262.555 cv
344.215 263.4 343.122 263.468 341.781 263.468 cv
313.793 263.468 292.732 263.562 275.809 263.638 cv
265.358 263.685 256.935 263.723 250.141 263.723 cv
.933333 .894118 .85098 rgb
f
346.273 189.271 mo
221.317 189.271 li
221.317 187.146 223.039 185.421 225.167 185.421 cv
350.186 185.421 346.273 183.773 346.273 189.271 cv
cp
.266667 .258824 .266667 rgb
f
221.932 188.704 mo
345.715 188.704 li
345.73 187.984 345.717 187.588 345.429 187.295 cv
343.791 185.627 333.048 185.671 293.082 185.831 cv
276.676 185.897 254.207 185.987 225.167 185.987 cv
223.55 185.987 222.201 187.163 221.932 188.704 cv
cp
346.839 189.838 mo
220.75 189.838 li
220.75 189.271 li
220.75 186.836 222.732 184.854 225.167 184.854 cv
254.205 184.854 276.672 184.763 293.077 184.697 cv
336.451 184.522 344.266 184.491 346.238 186.501 cv
346.883 187.159 346.866 187.955 346.846 188.799 cv
346.843 188.949 346.839 189.107 346.839 189.271 cv
346.839 189.838 li
cp
f
340.844 188.384 mo
342.483 188.384 li
342.718 188.384 342.909 188.193 342.909 187.958 cv
342.909 186.734 li
342.909 186.499 342.718 186.307 342.483 186.307 cv
340.844 186.307 li
340.609 186.307 340.417 186.499 340.417 186.734 cv
340.417 187.958 li
340.417 188.193 340.609 188.384 340.844 188.384 cv
cp
.745098 .752941 .760784 rgb
f
340.937 188.234 mo
340.719 188.133 li
340.618 188.013 340.635 187.834 340.755 187.734 cv
342.208 186.523 li
342.328 186.422 342.507 186.439 342.608 186.558 cv
342.707 186.679 342.691 186.857 342.571 186.958 cv
341.118 188.169 li
340.937 188.234 li
cp
1 1 1 rgb
f
342.389 188.234 mo
342.208 188.169 li
340.755 186.958 li
340.635 186.857 340.618 186.679 340.719 186.558 cv
340.819 186.439 340.997 186.422 341.118 186.523 cv
342.571 187.734 li
342.691 187.834 342.707 188.013 342.608 188.133 cv
342.389 188.234 li
cp
f
270.18 206.503 mo
237.22 206.503 238.198 206.857 238.198 205.717 cv
238.198 203.007 237.966 201.984 238.985 201.984 cv
271.945 201.984 270.966 201.629 270.966 202.77 cv
270.966 205.48 271.198 206.503 270.18 206.503 cv
cp
.619608 .74902 .847059 rgb
f
294.81 246.311 mo
235.692 246.311 238.198 246.797 238.198 245.268 cv
238.198 243.376 237.891 241.793 239.242 241.793 cv
294.81 241.793 li
295.386 241.793 295.854 242.26 295.854 242.837 cv
295.854 245.268 li
295.854 245.845 295.386 246.311 294.81 246.311 cv
cp
f
234.035 206.554 mo
231.51 206.554 230.326 206.808 230.326 205.692 cv
230.326 203.167 230.073 201.984 231.189 201.984 cv
233.714 201.984 234.897 201.73 234.897 202.847 cv
234.897 205.372 235.151 206.554 234.035 206.554 cv
.839216 .447059 .227451 rgb
f
234.034 216.605 mo
231.51 216.605 230.326 216.859 230.326 215.743 cv
230.326 213.218 230.073 212.035 231.189 212.035 cv
233.714 212.035 234.897 211.781 234.897 212.897 cv
234.897 215.423 235.151 216.605 234.034 216.605 cv
cp
f
234.034 227.308 mo
231.51 227.308 230.326 227.562 230.326 226.446 cv
230.326 223.921 230.073 222.738 231.189 222.738 cv
233.714 222.738 234.897 222.484 234.897 223.6 cv
234.897 226.126 235.151 227.308 234.034 227.308 cv
cp
f
234.034 236.079 mo
231.51 236.079 230.326 236.333 230.326 235.217 cv
230.326 232.691 230.073 231.509 231.189 231.509 cv
233.714 231.509 234.897 231.255 234.897 232.371 cv
234.897 234.896 235.151 236.079 234.034 236.079 cv
cp
f
234.034 246.338 mo
231.51 246.338 230.326 246.592 230.326 245.475 cv
230.326 242.95 230.073 241.767 231.189 241.767 cv
233.714 241.767 234.897 241.513 234.897 242.63 cv
234.897 245.155 235.151 246.338 234.034 246.338 cv
cp
f
288.341 206.674 mo
274.44 206.674 275.205 206.436 275.205 205.205 cv
275.205 203.76 274.929 201.959 276.58 201.959 cv
335.888 201.959 li
336.647 201.959 337.263 202.574 337.263 203.334 cv
337.263 205.205 li
337.263 205.964 336.647 206.58 335.888 206.58 cv
311.66 206.58 297.093 206.674 288.341 206.674 cv
.454902 .411765 .407843 rgb
f
270.18 216.554 mo
237.22 216.554 238.198 216.908 238.198 215.767 cv
238.198 213.057 237.966 212.035 238.985 212.035 cv
271.945 212.035 270.966 211.68 270.966 212.821 cv
270.966 215.767 li
270.966 216.202 270.614 216.554 270.18 216.554 cv
cp
.619608 .74902 .847059 rgb
f
287.475 216.712 mo
274.463 216.712 275.205 216.492 275.205 215.327 cv
275.205 213.745 274.922 212.01 276.509 212.01 cv
329.704 212.01 li
330.425 212.01 331.008 212.594 331.008 213.313 cv
331.008 215.327 li
331.008 216.047 330.425 216.631 329.704 216.631 cv
308.377 216.631 295.385 216.712 287.475 216.712 cv
.454902 .411765 .407843 rgb
f
270.18 227.257 mo
237.22 227.257 238.198 227.612 238.198 226.471 cv
238.198 223.762 237.966 222.738 238.985 222.738 cv
271.945 222.738 270.966 222.384 270.966 223.524 cv
270.966 226.234 271.198 227.257 270.18 227.257 cv
cp
.619608 .74902 .847059 rgb
f
285.372 227.405 mo
274.697 227.405 275.205 227.208 275.205 226.158 cv
275.205 224.372 274.901 222.713 276.381 222.713 cv
319.391 222.713 li
320.04 222.713 320.566 223.239 320.566 223.888 cv
320.566 226.158 li
320.566 226.807 320.04 227.334 319.391 227.334 cv
302.292 227.334 291.803 227.405 285.372 227.405 cv
.454902 .411765 .407843 rgb
f
285.372 238.461 mo
274.697 238.461 275.205 238.264 275.205 237.214 cv
275.205 235.427 274.901 233.768 276.381 233.768 cv
319.391 233.768 li
320.04 233.768 320.566 234.295 320.566 234.944 cv
320.566 237.214 li
320.566 237.863 320.04 238.389 319.391 238.389 cv
302.292 238.389 291.803 238.461 285.372 238.461 cv
f
270.18 237.96 mo
237.22 237.96 238.198 238.315 238.198 237.174 cv
238.198 234.465 237.966 233.441 238.985 233.441 cv
271.945 233.441 270.966 233.087 270.966 234.228 cv
270.966 236.937 271.198 237.96 270.18 237.96 cv
cp
.619608 .74902 .847059 rgb
f
306.704 246.429 mo
297.43 246.429 297.886 246.246 297.886 245.267 cv
297.886 243.282 297.604 241.742 298.981 241.742 cv
336.159 241.742 li
336.764 241.742 337.254 242.232 337.254 242.837 cv
337.254 245.267 li
337.254 245.873 336.764 246.363 336.159 246.363 cv
321.359 246.363 312.275 246.429 306.704 246.429 cv
.454902 .411765 .407843 rgb
f
192.509 302.934 mo
99.7644 302.934 99.8977 275.216 192.509 275.216 cv
285.256 275.216 285.116 302.934 192.509 302.934 cv
.835294 .827451 .890196 rgb
f
151.514 288.695 mo
149.58 287.95 149.929 288.971 161.066 250.612 cv
168.093 253.093 li
153.537 287.831 li
152.856 289.458 150.947 288.476 151.514 288.695 cv
cp
.619608 .396078 .231373 rgb
f
231.508 288.013 mo
222.036 251.56 li
214.943 253.841 li
228.506 288.978 li
229.222 290.834 232 289.907 231.508 288.013 cv
cp
f
147.638 255.05 mo
116.756 241.423 118.019 205.777 136.052 201.887 cv
145.813 199.78 153.993 208.635 162.165 214.372 cv
176.979 224.771 197.949 225.535 213.481 216.241 cv
221.442 211.476 243.006 193.848 256.71 206.438 cv
271.857 220.352 250.946 260.31 217.143 258.181 cv
209.15 257.678 200.946 258.315 192.724 258.952 cv
177.335 260.145 161.884 261.337 147.638 255.05 cv
.45098 .564706 .52549 rgb
f
139.009 201.738 mo
138.05 201.738 137.077 201.837 136.088 202.051 cv
129.269 203.521 124.487 209.801 123.607 218.436 cv
122.353 230.738 129.319 246.783 147.706 254.895 cv
161.923 261.171 177.59 259.956 192.742 258.782 cv
200.813 258.157 209.159 257.509 217.153 258.013 cv
237.443 259.29 252.972 245.133 258.811 231.436 cv
263.126 221.312 262.278 211.781 256.597 206.562 cv
244.816 195.739 227.002 207.548 217.432 213.891 cv
215.93 214.887 214.632 215.748 213.567 216.385 cv
198.048 225.672 176.871 224.901 162.069 214.51 cv
160.404 213.341 158.706 212.017 157.064 210.738 cv
151.375 206.303 145.517 201.738 139.009 201.738 cv
174.42 260.065 mo
165.238 260.065 156.15 258.991 147.571 255.203 cv
129.029 247.021 122.007 230.825 123.272 218.403 cv
124.167 209.616 129.051 203.224 136.017 201.722 cv
143.869 200.025 150.682 205.338 157.271 210.472 cv
158.909 211.75 160.604 213.071 162.262 214.234 cv
176.959 224.552 197.986 225.318 213.394 216.096 cv
214.452 215.463 215.747 214.605 217.246 213.611 cv
226.894 207.217 244.851 195.315 256.824 206.314 cv
262.614 211.633 263.493 221.309 259.12 231.568 cv
255.905 239.112 250.336 245.939 243.442 250.791 cv
235.579 256.324 226.482 258.937 217.132 258.348 cv
209.161 257.848 200.827 258.493 192.768 259.117 cv
186.694 259.588 180.535 260.065 174.42 260.065 cv
.270588 .45098 .45098 rgb
f
159.055 244.897 mo
136.031 234.738 136.972 208.162 150.417 205.262 cv
157.694 203.691 163.793 210.293 169.886 214.57 cv
180.93 222.323 196.565 222.892 208.145 215.963 cv
214.08 212.411 230.157 199.268 240.375 208.655 cv
251.667 219.029 236.076 248.82 210.875 247.232 cv
204.916 246.857 198.799 247.332 192.669 247.807 cv
181.196 248.696 169.676 249.586 159.055 244.897 cv
f
142.186 184.176 mo
137.887 174.047 133.504 162.997 136.231 152.338 cv
142.809 126.627 192.148 111.932 231.082 131.966 cv
281.99 158.16 230.381 201.578 220.91 221.989 cv
217.837 228.614 216.575 231.183 206.963 231.562 cv
152.069 233.729 157.876 221.14 142.186 184.176 cv
.45098 .564706 .52549 rgb
f
142.341 184.109 mo
144.826 189.967 146.781 195.234 148.506 199.882 cv
157.76 224.814 160.876 233.22 206.957 231.394 cv
216.536 231.016 217.686 228.539 220.758 221.919 cv
222.841 217.429 226.879 211.935 231.555 205.573 cv
242.579 190.572 256.301 171.903 252.337 155.042 cv
250.216 146.021 243.039 138.307 231.005 132.115 cv
208.919 120.751 180.691 119.683 159.089 129.396 cv
146.836 134.905 138.777 143.067 136.394 152.38 cv
133.565 163.435 138.637 175.385 142.341 184.109 cv
196.13 231.964 mo
179.875 231.964 170.142 230.082 163.693 225.883 cv
155.919 220.82 152.844 212.537 148.191 199.998 cv
146.468 195.354 144.514 190.091 142.031 184.241 cv
138.309 175.471 133.212 163.462 136.068 152.296 cv
138.477 142.883 146.603 134.641 158.951 129.089 cv
180.642 119.336 208.985 120.407 231.16 131.816 cv
243.284 138.055 250.52 145.844 252.664 154.965 cv
256.663 171.976 242.892 190.716 231.825 205.772 cv
227.161 212.119 223.132 217.601 221.063 222.06 cv
218.016 228.627 216.755 231.345 206.97 231.73 cv
203.064 231.885 199.46 231.964 196.13 231.964 cv
.270588 .45098 .45098 rgb
f
152.57 182.788 mo
149.127 174.678 145.617 165.83 147.801 157.294 cv
153.069 136.707 192.576 124.941 223.751 140.982 cv
264.514 161.956 223.19 196.722 215.607 213.066 cv
213.145 218.371 212.135 220.428 204.439 220.731 cv
160.483 222.467 165.133 212.386 152.57 182.788 cv
f
204.223 138.359 mo
205.107 138.826 205.335 139.98 204.728 140.775 cv
198.048 149.522 182.353 146.115 177.266 140.989 cv
174.733 137.879 183.233 138.553 183.199 135.95 cv
183.055 124.809 181.947 124.38 185.125 124.177 cv
187.99 123.994 192.472 124.632 195.19 123.661 cv
195.715 123.473 196.013 122.126 196.269 123.38 cv
197.433 129.094 199.093 135.651 204.223 138.359 cv
cp
.984314 .654902 .537255 rgb
f
185.58 133.195 mo
193.869 129.449 198.245 122.528 199.355 113.806 cv
200.791 102.522 196.47 99.5257 189.461 98.6336 cv
166.674 95.7332 175.278 137.851 185.58 133.195 cv
cp
f
189.545 94.6697 mo
191.354 92.0477 198.749 92.3431 201.767 98.4334 cv
205.302 105.565 196.347 124.991 196.275 123.509 cv
196.103 119.982 195.678 109.873 192.313 102.321 cv
191.555 100.621 188.24 96.5609 189.545 94.6697 cv
cp
.584314 .337255 .227451 rgb
f
197.691 115.913 mo
200.463 107.726 193.838 104.76 195.384 117.939 cv
195.807 121.546 197.276 117.136 197.691 115.913 cv
cp
.984314 .654902 .537255 rgb
f
186.778 117.722 mo
187.607 117.737 188.312 114.596 186.301 114.56 cv
185.227 114.541 185.422 117.698 186.778 117.722 cv
cp
.219608 .156863 .137255 rgb
f
178.915 117.563 mo
179.744 117.578 180.449 114.437 178.438 114.401 cv
177.365 114.382 177.559 117.539 178.915 117.563 cv
cp
f
185.251 112.551 mo
184.92 112.72 184.992 113.219 185.357 113.29 cv
195.508 115.279 191.262 109.476 185.251 112.551 cv
cp
.584314 .337255 .227451 rgb
f
181.173 112.836 mo
181.452 113.08 181.26 113.546 180.889 113.527 cv
170.56 112.977 176.094 108.387 181.173 112.836 cv
cp
f
185.867 106.617 mo
184.807 106.818 183.747 106.31 182.67 106.268 cv
180.441 106.18 176.047 109.373 174.468 106.477 cv
173.744 105.152 174.675 103.57 174.871 102.073 cv
175.377 98.2059 173.544 99.1341 181.317 93.6956 cv
186.484 90.0809 187.189 92.9915 189.001 93.4612 cv
190.824 93.9339 193.173 91.7562 194.055 96.2674 cv
194.273 97.3807 196.028 102.584 195.422 103.399 cv
194.912 104.083 194.305 103.319 193.565 102.923 cv
189.186 100.581 189.499 106.012 185.867 106.617 cv
cp
f
191.783 101.164 mo
191.64 101.125 li
189.338 99.7742 188.26 96.7542 189.186 94.2508 cv
189.241 94.1038 189.404 94.0291 189.55 94.0833 cv
189.697 94.1375 189.772 94.3006 189.718 94.4471 cv
188.897 96.6639 189.888 99.4402 191.927 100.637 cv
192.062 100.716 192.107 100.889 192.028 101.024 cv
191.975 101.114 191.881 101.164 191.783 101.164 cv
cp
.490196 .231373 .101961 rgb
f
198.68 97.2527 mo
198.588 97.2527 198.497 97.2078 198.443 97.1248 cv
196.4 94.0003 192.335 94.5047 190.712 95.451 cv
190.578 95.5301 190.404 95.4842 190.325 95.3489 cv
190.246 95.2137 190.292 95.0403 190.427 94.9612 cv
192.58 93.7064 196.843 93.6434 198.917 96.8143 cv
199.003 96.9456 198.966 97.1209 198.835 97.2068 cv
198.68 97.2527 li
cp
f
195.006 98.2274 mo
194.804 98.1429 li
194.29 97.6209 193.353 97.2718 192.501 97.2801 cv
192.116 97.2864 191.584 97.3729 191.239 97.7464 cv
191.133 97.8616 190.954 97.868 190.839 97.7625 cv
190.724 97.6566 190.717 97.4774 190.823 97.3626 cv
191.203 96.9495 191.78 96.7254 192.492 96.7137 cv
193.492 96.6966 194.582 97.1116 195.207 97.7449 cv
195.317 97.8563 195.316 98.0359 195.204 98.1453 cv
195.006 98.2274 li
cp
f
197.622 105.873 mo
197.488 105.873 197.368 105.777 197.344 105.64 cv
197.039 103.964 195.543 100.908 193.983 100.12 cv
193.527 99.8904 193.112 99.8738 192.714 100.069 cv
192.574 100.138 192.405 100.08 192.335 99.9393 cv
192.266 99.7991 192.324 99.6292 192.465 99.5604 cv
193.024 99.2855 193.621 99.303 194.238 99.6146 cv
196.107 100.557 197.616 103.972 197.901 105.539 cv
197.929 105.693 197.827 105.84 197.673 105.868 cv
197.622 105.873 li
cp
f
199.856 111.879 mo
199.783 111.869 li
199.632 111.829 199.542 111.675 199.582 111.523 cv
200.309 108.777 200.848 105.953 201.182 103.128 cv
201.2 102.973 201.341 102.862 201.496 102.88 cv
201.652 102.898 201.762 103.039 201.744 103.195 cv
201.407 106.046 200.864 108.896 200.13 111.668 cv
200.096 111.795 199.982 111.879 199.856 111.879 cv
cp
f
196.971 121.708 mo
196.824 121.666 li
196.69 121.585 196.648 121.411 196.729 121.277 cv
197.204 120.495 198.093 118.006 198.336 116.908 cv
198.37 116.756 198.522 116.662 198.674 116.693 cv
198.827 116.727 198.923 116.878 198.889 117.031 cv
198.632 118.191 197.721 120.735 197.213 121.572 cv
197.16 121.659 197.066 121.708 196.971 121.708 cv
cp
f
179.833 96.9783 mo
179.693 96.9783 179.571 96.8738 179.553 96.7308 cv
179.533 96.5755 179.643 96.4339 179.798 96.4144 cv
180.544 96.3196 181.199 95.6844 181.893 95.012 cv
183.273 93.6746 184.991 92.0106 188.078 94.5374 cv
188.199 94.6365 188.217 94.8148 188.118 94.9359 cv
188.019 95.0569 187.841 95.0745 187.719 94.9759 cv
185.022 92.7693 183.694 94.056 182.287 95.4183 cv
181.524 96.159 180.803 96.8577 179.869 96.9764 cv
179.833 96.9783 li
cp
f
184.349 99.1678 mo
184.22 99.1678 184.082 99.1556 183.936 99.1287 cv
183.782 99.1004 183.68 98.9529 183.708 98.7991 cv
183.736 98.6453 183.883 98.5418 184.038 98.5716 cv
184.825 98.7156 185.231 98.3172 185.7 97.8553 cv
186.33 97.2361 187.043 96.5355 188.622 97.4271 cv
188.759 97.5042 188.807 97.6771 188.73 97.8133 cv
188.652 97.9495 188.479 97.9964 188.344 97.9207 cv
187.136 97.2381 186.701 97.6668 186.098 98.2586 cv
185.68 98.6697 185.174 99.1678 184.349 99.1678 cv
cp
f
184.64 104.445 mo
184.49 104.445 184.338 104.42 184.183 104.368 cv
184.035 104.318 183.956 104.157 184.006 104.009 cv
184.056 103.861 184.217 103.782 184.366 103.831 cv
185.221 104.122 186.196 102.929 187.059 101.877 cv
187.887 100.867 188.666 99.9153 189.489 100.013 cv
189.644 100.032 189.755 100.173 189.736 100.328 cv
189.717 100.483 189.577 100.593 189.42 100.576 cv
188.912 100.506 188.192 101.388 187.497 102.236 cv
186.641 103.28 185.685 104.445 184.64 104.445 cv
cp
f
177.86 105.671 mo
177.458 105.671 177.044 105.546 176.675 105.305 cv
176.093 104.923 175.732 104.322 175.713 103.697 cv
175.691 103.016 175.979 102.465 176.285 101.881 cv
176.659 101.168 177.082 100.359 177.091 99.0706 cv
177.093 98.9144 177.21 98.7684 177.376 98.7894 cv
177.533 98.7908 177.659 98.9183 177.658 99.0745 cv
177.648 100.5 177.171 101.411 176.787 102.144 cv
176.493 102.704 176.262 103.147 176.279 103.679 cv
176.293 104.119 176.557 104.55 176.986 104.831 cv
177.415 105.112 177.915 105.181 178.324 105.018 cv
178.47 104.959 178.635 105.031 178.692 105.176 cv
178.75 105.322 178.679 105.486 178.534 105.544 cv
178.321 105.629 178.093 105.671 177.86 105.671 cv
cp
f
195.381 110.084 mo
195.252 110.084 195.136 109.996 195.105 109.866 cv
194.867 108.849 195.331 107.701 196.208 107.135 cv
196.34 107.05 196.515 107.087 196.6 107.22 cv
196.685 107.351 196.647 107.526 196.515 107.611 cv
195.832 108.051 195.471 108.945 195.657 109.736 cv
195.693 109.888 195.598 110.041 195.446 110.077 cv
195.381 110.084 li
cp
f
182.52 137.176 mo
181.953 137.512 183.96 140.281 184.606 140.417 cv
185.196 140.541 185.929 139.085 186.173 138.534 cv
187.887 134.669 193.699 131.011 196.02 124.001 cv
192.772 130.054 186.623 132.698 183.144 133.316 cv
183.145 135.606 183.523 136.58 182.52 137.176 cv
cp
.92549 .47451 .360784 rgb
f
179.84 126.54 mo
185.416 126.541 li
186.424 126.541 182.319 131.507 179.651 126.863 cv
179.569 126.72 179.676 126.54 179.84 126.54 cv
cp
1 1 1 rgb
f
183.14 122.86 mo
183.094 122.856 li
182.631 122.783 li
181.903 122.672 181.503 122.61 181.29 122.297 cv
181.059 121.957 181.167 121.489 181.402 120.462 cv
181.581 119.68 181.827 118.608 182.072 117.024 cv
182.096 116.87 182.237 116.766 182.395 116.788 cv
182.55 116.812 182.656 116.956 182.632 117.111 cv
182.384 118.715 182.125 119.843 181.954 120.589 cv
181.787 121.317 181.666 121.843 181.759 121.979 cv
181.833 122.087 182.222 122.147 182.716 122.223 cv
183.185 122.297 li
183.34 122.322 183.445 122.468 183.419 122.622 cv
183.396 122.761 183.276 122.86 183.14 122.86 cv
cp
.92549 .47451 .360784 rgb
f
196.02 116.765 mo
195.862 116.764 195.736 116.637 195.737 116.481 cv
195.739 116.087 195.964 115.66 196.202 115.208 cv
196.656 114.347 197.125 113.456 196.333 112.589 cv
196.228 112.473 196.236 112.294 196.351 112.189 cv
196.467 112.084 196.645 112.091 196.751 112.207 cv
197.812 113.368 197.171 114.585 196.703 115.472 cv
196.498 115.861 196.305 116.228 196.304 116.483 cv
196.303 116.639 196.176 116.765 196.02 116.765 cv
cp
f
169.452 140.424 mo
179.815 137.585 171.578 166.908 169.274 185.876 cv
167.189 185.752 160.84 183.532 159.327 181.878 cv
159.327 181.878 159.286 143.209 169.452 140.424 cv
cp
.745098 .560784 .384314 rgb
f
159.61 181.764 mo
161.096 183.246 166.746 185.299 169.026 185.568 cv
169.586 181.054 170.483 175.892 171.352 170.899 cv
173.628 157.822 175.98 144.299 172.543 141.175 cv
171.802 140.501 170.815 140.344 169.527 140.698 cv
159.951 143.321 159.62 179.45 159.61 181.764 cv
cp
169.523 186.175 mo
169.257 186.158 li
167.24 186.038 160.726 183.828 159.117 182.069 cv
159.043 181.988 li
159.043 181.879 li
159.042 180.291 159.12 142.961 169.377 140.151 cv
170.847 139.747 172.04 139.951 172.924 140.755 cv
176.592 144.09 174.318 157.159 171.91 170.997 cv
171.025 176.084 170.11 181.345 169.555 185.91 cv
169.523 186.175 li
cp
.678431 .454902 .27451 rgb
f
182.52 137.176 mo
187.873 142.997 200.096 140.242 201.726 136.489 cv
206.933 138.842 207.381 139.307 212.495 141.371 cv
215.598 161.552 221.64 187.2 215.258 205.446 cv
197.764 209.841 169.752 206.761 166.362 204.687 cv
164.355 205.95 164.057 158.373 169.452 140.424 cv
169.452 140.424 179.85 137.377 182.52 137.176 cv
cp
.745098 .560784 .384314 rgb
f
166.36 204.353 mo
166.51 204.445 li
169.862 206.496 197.671 209.513 215.041 205.209 cv
220.352 189.834 216.866 169.209 213.789 151.005 cv
213.233 147.717 212.708 144.609 212.24 141.574 cv
209.187 140.338 207.792 139.666 206.033 138.819 cv
204.944 138.294 203.716 137.702 201.858 136.859 cv
200.932 138.508 198.096 139.971 194.644 140.553 cv
189.607 141.4 185.046 140.248 182.408 137.47 cv
179.785 137.733 170.935 140.288 169.679 140.653 cv
164.5 158.139 164.755 201.912 166.312 204.384 cv
166.36 204.353 li
cp
193.222 207.949 mo
180.512 207.949 168.745 206.295 166.326 204.993 cv
166.223 205.007 166.116 204.974 166.023 204.903 cv
163.901 203.288 164.042 157.439 169.181 140.343 cv
169.225 140.196 li
169.373 140.152 li
169.798 140.028 179.829 137.095 182.499 136.893 cv
182.636 136.883 li
182.729 136.984 li
185.222 139.695 189.641 140.821 194.55 139.994 cv
197.999 139.413 200.778 137.959 201.466 136.376 cv
201.581 136.112 li
201.843 136.231 li
203.847 137.137 205.139 137.759 206.279 138.308 cv
208.057 139.165 209.461 139.841 212.601 141.109 cv
212.751 141.169 li
212.775 141.328 li
213.249 144.409 213.783 147.568 214.347 150.91 cv
217.446 169.239 220.957 190.013 215.526 205.54 cv
215.475 205.683 li
215.327 205.721 li
208.835 207.351 200.858 207.949 193.222 207.949 cv
cp
.678431 .454902 .27451 rgb
f
217.476 178.397 mo
205.004 181.861 194.479 187.064 192.062 188.775 cv
194.571 199.387 li
234.31 192.295 233.552 188.706 233.744 183.635 cv
234.047 175.676 221.356 143.714 212.495 141.371 cv
210.328 140.799 216.741 176.411 217.476 178.397 cv
cp
.745098 .560784 .384314 rgb
f
192.382 188.898 mo
194.785 199.061 li
233.172 192.195 233.287 188.737 233.45 183.955 cv
233.462 183.624 li
233.773 175.438 221.001 144.051 212.486 141.663 cv
211.352 143.472 216.618 175.263 217.742 178.299 cv
217.848 178.588 li
217.552 178.67 li
205.256 182.085 194.938 187.182 192.382 188.898 cv
cp
194.357 199.713 mo
191.742 188.654 li
191.898 188.544 li
194.166 186.939 204.612 181.711 217.122 178.202 cv
216.094 174.378 210.424 143.084 212.096 141.242 cv
212.221 141.105 212.394 141.052 212.568 141.098 cv
218.189 142.584 224.403 155.007 226.814 160.279 cv
231.078 169.605 234.179 179.65 234.028 183.644 cv
234.016 183.973 li
233.844 189.033 233.719 192.688 194.621 199.666 cv
194.357 199.713 li
cp
.678431 .454902 .27451 rgb
f
155.154 159.262 mo
148.681 162.33 li
146.057 153.101 146.291 152.867 144.824 152.358 cv
140.666 150.914 126.049 143.402 130.437 142.906 cv
134.124 142.489 137.292 147.021 143.192 147.345 cv
147.55 147.584 149.31 148.888 150.315 150.115 cv
150.779 150.68 150.751 150.75 155.154 159.262 cv
cp
.984314 .654902 .537255 rgb
f
143.9 151.805 mo
143.79 151.782 li
139.481 149.977 136.651 148.04 136.58 146.847 cv
136.563 146.572 136.689 146.344 136.932 146.206 cv
137.957 145.624 140.936 146.766 144.176 148.98 cv
144.305 149.069 144.338 149.244 144.25 149.374 cv
144.162 149.503 143.986 149.536 143.856 149.448 cv
139.919 146.758 137.679 146.434 137.211 146.699 cv
137.145 146.814 li
137.182 147.436 139.078 149.194 144.009 151.26 cv
144.153 151.32 144.221 151.486 144.161 151.631 cv
144.116 151.739 144.01 151.805 143.9 151.805 cv
cp
.937255 .47451 .321569 rgb
f
167.852 189.32 mo
172.31 184.71 166.362 173.491 152.641 152.102 cv
145.717 155.841 li
146.673 160.265 159.559 197.894 167.852 189.32 cv
cp
.745098 .560784 .384314 rgb
f
146.041 155.987 mo
147.102 160.352 156.558 187.965 164.288 190.17 cv
165.526 190.523 166.625 190.18 167.648 189.123 cv
171.93 184.695 166.197 173.771 152.545 152.476 cv
146.041 155.987 li
cp
165.2 190.87 mo
164.852 190.87 164.496 190.818 164.133 190.715 cv
155.89 188.363 146.259 159.692 145.44 155.901 cv
145.395 155.693 li
152.738 151.728 li
152.88 151.949 li
166.797 173.644 172.618 184.8 168.055 189.517 cv
167.852 189.32 li
168.055 189.517 li
167.185 190.417 166.227 190.87 165.2 190.87 cv
cp
.678431 .454902 .27451 rgb
f
177.433 246.65 mo
177.341 243.673 175.89 239.736 174.143 238.004 cv
176.743 237.145 180.551 235.887 182.745 234.342 cv
208.409 216.456 203.348 220.546 210.237 210.308 cv
213.474 205.499 215.24 199.902 215.221 194.045 cv
226.414 199.819 244.699 200.71 252.125 212.438 cv
265.143 233.003 214.296 226.78 177.433 246.65 cv
.317647 .262745 .258824 rgb
f
174.608 238.122 mo
176.168 239.904 177.474 243.354 177.671 246.23 cv
193.094 238.008 211.01 234.267 225.427 231.259 cv
239.838 228.251 251.221 225.874 253.519 220.442 cv
254.427 218.297 253.9 215.724 251.907 212.577 cv
247.002 204.829 237.344 201.871 228.004 199.011 cv
223.451 197.616 219.141 196.297 215.478 194.465 cv
215.414 200.137 213.68 205.655 210.451 210.453 cv
209.44 211.956 208.672 213.172 208.055 214.15 cv
204.772 219.351 204.772 219.351 189.428 230.009 cv
187.504 231.346 185.338 232.849 182.893 234.554 cv
180.776 236.045 177.164 237.276 174.608 238.122 cv
177.188 247.076 mo
177.175 246.659 li
177.083 243.703 175.611 239.824 173.961 238.187 cv
173.662 237.89 li
174.062 237.759 li
176.599 236.921 180.433 235.655 182.596 234.131 cv
185.043 232.426 187.209 230.921 189.134 229.584 cv
204.391 218.987 204.391 218.987 207.618 213.874 cv
208.237 212.893 209.007 211.674 210.023 210.164 cv
213.273 205.335 214.982 199.761 214.963 194.046 cv
214.962 193.62 li
215.34 193.815 li
219.041 195.724 223.469 197.081 228.156 198.516 cv
237.585 201.405 247.336 204.391 252.344 212.301 cv
254.434 215.601 254.974 218.331 253.995 220.644 cv
251.591 226.324 240.091 228.725 225.533 231.765 cv
211.035 234.791 192.993 238.556 177.556 246.878 cv
177.188 247.076 li
.27451 .235294 .227451 rgb
f
177.433 246.65 mo
172.671 249.23 166.179 257.395 159.165 264.105 cv
158.306 262.831 156.626 261.44 155.02 261.114 cv
160.064 253.549 158.177 255.403 160.144 248.488 cv
166.909 248.488 170.751 245.957 170.494 239.211 cv
171.715 238.795 172.945 238.397 174.143 238.004 cv
175.891 239.737 177.341 243.676 177.433 246.65 cv
cp
.996078 .682353 .396078 rgb
f
159.165 264.105 mo
156.429 266.717 154.037 268.643 152.494 268.93 cv
149.369 269.511 152.213 265.326 155.02 261.114 cv
156.626 261.44 158.306 262.831 159.165 264.105 cv
cp
.819608 .415686 .294118 rgb
f
184.909 243.213 mo
182.751 244.116 179.48 245.548 177.433 246.65 cv
177.341 243.673 175.89 239.736 174.143 238.004 cv
177 237.06 179.696 236.126 181.712 234.986 cv
183.465 236.644 184.529 241.219 184.909 243.213 cv
cp
.988235 .741176 .662745 rgb
f
184.909 243.213 mo
182.751 244.116 179.48 245.548 177.433 246.65 cv
177.341 243.673 175.89 239.736 174.143 238.004 cv
177 237.06 179.696 236.126 181.712 234.986 cv
183.465 236.644 184.529 241.219 184.909 243.213 cv
cp
.984314 .654902 .537255 rgb
f
160.149 248.488 mo
161.939 242.138 164.725 241.183 170.494 239.211 cv
170.746 245.834 166.645 248.629 160.149 248.488 cv
cp
.819608 .415686 .294118 rgb
f
210.756 245.939 mo
193.566 237.581 120.263 239.502 127.533 216.914 cv
130.198 208.62 160.313 202.659 166.023 199.386 cv
174.972 205.712 li
157.515 215.242 li
175.629 216.03 208.156 235.439 213.385 236.291 cv
213.702 239.754 212.986 243.301 210.756 245.939 cv
.317647 .262745 .258824 rgb
f
166.007 199.692 mo
164.138 200.707 160.034 201.976 155.302 203.44 cv
144.445 206.799 129.576 211.397 127.779 216.993 cv
126.923 219.652 127.168 221.995 128.529 224.156 cv
134.245 233.233 158.388 236.523 179.69 239.427 cv
192.603 241.185 204.806 242.848 210.685 245.619 cv
212.563 243.304 213.432 240.084 213.144 236.508 cv
211.342 236.117 207.196 234.11 201.537 231.371 cv
188.926 225.265 169.868 216.039 157.504 215.5 cv
156.577 215.46 li
174.485 205.683 li
166.007 199.692 li
210.824 246.26 mo
210.643 246.172 li
204.911 243.385 192.626 241.711 179.62 239.938 cv
158.207 237.02 133.936 233.713 128.092 224.431 cv
126.665 222.165 126.394 219.609 127.287 216.835 cv
129.167 210.983 144.184 206.339 155.149 202.946 cv
159.979 201.453 164.15 200.163 165.894 199.163 cv
166.037 199.081 li
175.46 205.74 li
158.43 215.037 li
170.905 215.967 189.415 224.928 201.762 230.905 cv
207.381 233.626 211.819 235.774 213.426 236.036 cv
213.624 236.068 li
213.642 236.267 li
213.998 240.139 213.043 243.634 210.953 246.106 cv
210.824 246.26 li
.27451 .235294 .227451 rgb
f
156.455 216.57 mo
156.174 216.57 155.834 216.47 155.425 216.251 cv
150.726 213.733 142.312 212.953 142.312 212.953 cv
142.314 212.953 142.316 212.953 142.318 212.953 cv
143.38 212.953 151.922 210.531 155.79 205.546 cv
155.79 205.546 157.849 211.827 157.59 214.906 cv
156.577 215.46 li
157.501 215.5 li
157.348 216.16 157.023 216.57 156.455 216.57 cv
.301961 .25098 .247059 rgb
f
157.501 215.5 mo
156.577 215.46 li
157.59 214.906 li
157.572 215.121 157.543 215.319 157.501 215.5 cv
.27451 .235294 .227451 rgb
f
230.262 257.103 mo
228.507 257.348 225.904 258.174 225.904 259.938 cv
219.157 252.29 219.645 250.264 210.756 245.939 cv
212.987 243.301 213.702 239.754 213.385 236.291 cv
214.556 236.488 215.41 236.497 216.765 236.421 cv
219.204 243.912 222.398 244.096 226.516 243.766 cv
227.93 250.016 226.611 248.913 230.262 257.103 cv
cp
.996078 .682353 .396078 rgb
f
226.516 243.766 mo
222.412 244.095 219.209 243.928 216.765 236.421 cv
221.134 236.169 224.463 234.621 226.516 243.766 cv
cp
.819608 .415686 .294118 rgb
f
210.756 245.939 mo
208.168 244.681 205.362 243.628 204.273 243.329 cv
206.433 241.274 207.606 236.821 207.809 234.14 cv
211.535 235.954 211.756 236.025 213.385 236.291 cv
213.702 239.754 212.986 243.301 210.756 245.939 cv
cp
.984314 .654902 .537255 rgb
f
232.122 264.937 mo
230.379 264.937 227.075 261.247 225.93 259.938 cv
225.93 258.176 228.526 257.348 230.289 257.103 cv
232.154 261.266 233.915 264.937 232.122 264.937 cv
cp
.819608 .415686 .294118 rgb
f
219.987 211.397 mo
218.93 199.639 li
223.154 204.32 236.054 207.744 236.054 207.744 cv
225.93 208.887 225.013 209.283 219.987 211.397 cv
.301961 .25098 .247059 rgb
f
220.474 224.753 mo
151.814 224.753 154.472 225.559 154.472 222.872 cv
154.472 179.514 153.732 179.853 156.353 179.853 cv
225.013 179.853 222.355 179.047 222.355 181.734 cv
222.355 222.872 li
222.355 223.911 221.513 224.753 220.474 224.753 cv
cp
.611765 .623529 .627451 rgb
f
188.414 206.337 mo
182.782 206.337 182.777 197.813 188.414 197.813 cv
194.045 197.813 194.051 206.337 188.414 206.337 cv
cp
.447059 .470588 .478431 rgb
f
191.054 153.74 mo
193.514 152.557 195.396 149.674 199.197 154.244 cv
212.027 169.673 200.847 168.272 198.777 169.257 cv
195.145 170.983 196.964 180.837 181.775 174.729 cv
176.361 172.552 180.458 170.003 180.734 167.714 cv
181.23 163.594 174.006 162.222 177.478 157.567 cv
180.837 153.062 186.76 155.804 191.054 153.74 cv
cp
.678431 .454902 .27451 rgb
f
306.848 300.988 mo
259.914 300.988 259.982 286.961 306.848 286.961 cv
353.783 286.961 353.712 300.988 306.848 300.988 cv
.835294 .827451 .890196 rgb
f
291.372 246.724 mo
291.826 244.003 319.77 243.792 322.204 246.501 cv
325.138 249.702 289.333 249.77 291.372 246.724 cv
cp
.996078 .682353 .396078 rgb
f
306.828 269.286 mo
295.093 269.286 287.176 257.424 291.372 246.724 cv
291.822 244.033 319.768 243.79 322.204 246.501 cv
322.252 246.604 322.292 246.717 322.331 246.828 cv
326.446 257.653 318.424 269.286 306.828 269.286 cv
cp
f
307.325 248.751 mo
293.342 248.751 293.192 245.434 307.325 245.434 cv
321.306 245.434 321.456 248.751 307.325 248.751 cv
cp
.619608 .396078 .231373 rgb
f
308.395 238.979 mo
303.197 233.374 300.343 228.532 299.884 216.404 cv
299.459 205.173 309.878 197.957 313.44 212.838 cv
317.011 227.763 308.472 239.693 308.395 238.979 cv
cp
.462745 .65098 .6 rgb
f
317.465 226.647 mo
317.872 222.315 320.828 212.379 325.516 206.722 cv
330.204 201.066 344.473 198.62 335.963 211.513 cv
327.452 224.405 317.465 226.647 317.465 226.647 cv
cp
f
314.713 238.367 mo
323.893 219.162 348.163 222.842 342.486 231.539 cv
338.459 237.705 314.713 238.367 314.713 238.367 cv
cp
f
301.821 240.015 mo
298.296 214.661 273.954 209.332 280.078 224.388 cv
285.276 237.163 304.77 240.691 301.821 240.015 cv
cp
f
307.781 247.221 mo
307.781 247.221 309.94 238.728 306.724 217.587 cv
306.644 217.059 307.439 216.945 307.518 217.466 cv
307.553 217.696 310.992 240.585 308.306 247.007 cv
308.222 247.209 307.989 247.309 307.781 247.221 cv
cp
.345098 .521569 .478431 rgb
f
307.845 247.202 mo
305.117 246.172 319.793 219.796 328.692 210.522 cv
329.057 210.138 329.639 210.693 329.271 211.077 cv
328.123 212.274 312.505 232.048 308.888 244.746 cv
317.207 232.961 326.691 230.524 326.882 231.892 cv
326.912 232.112 326.759 232.314 326.539 232.345 cv
316.506 233.728 308.41 246.901 308.33 247.034 cv
308.233 247.195 308.034 247.271 307.845 247.202 cv
cp
f
304.829 246.978 mo
304.104 244.196 297.601 231.698 286.201 225.281 cv
286.008 225.172 285.94 224.928 286.048 224.734 cv
287.1 222.864 303.072 237.055 305.606 246.776 cv
305.662 246.991 305.534 247.209 305.32 247.265 cv
305.099 247.322 304.884 247.188 304.829 246.978 cv
cp
f
323.872 263.162 mo
326.561 261.987 324.807 259.254 323.003 260.064 cv
313.007 264.579 301.54 264.579 291.543 260.064 cv
290.739 259.703 289.793 260.059 289.431 260.863 cv
288.68 262.527 290.571 263.118 291.164 263.368 cv
278.288 293.907 277.739 293.663 279.764 294.516 cv
281.791 295.373 281.234 295.141 294.151 264.506 cv
297.989 265.788 301.969 266.483 305.965 266.61 cv
305.965 296.239 li
305.965 298.348 309.159 298.35 309.159 296.239 cv
309.159 266.595 li
313.136 266.413 317.089 265.653 320.898 264.326 cv
334.218 295.919 333.239 294.642 334.741 294.642 cv
334.947 294.642 335.158 294.602 335.361 294.516 cv
337.387 293.662 336.84 293.917 323.872 263.162 cv
cp
.619608 .396078 .231373 rgb
f
303.13 247.355 mo
302.632 247.255 302.12 247.38 302.02 247.455 cv
301.843 247.584 301.589 247.555 301.457 247.382 cv
300.847 246.591 303.18 246.104 304.155 246.978 cv
304.868 246.54 306.654 245.705 308.598 246.839 cv
310.428 245.824 312.188 247.102 311.702 247.653 cv
311.555 247.82 311.302 247.834 311.135 247.688 cv
310.087 246.763 308.883 247.6 308.831 247.638 cv
308.698 247.733 308.518 247.738 308.378 247.645 cv
306.271 246.263 304.355 247.809 304.336 247.824 cv
303.946 248.149 303.683 247.469 303.13 247.355 cv
cp
.498039 .313726 .188235 rgb
f
293.423 247.586 mo
292.958 247.33 293.344 246.625 293.81 246.883 cv
299.007 249.74 315.428 249.709 320.844 246.829 cv
321.039 246.725 321.283 246.8 321.386 246.995 cv
321.491 247.191 321.416 247.433 321.22 247.538 cv
315.657 250.496 298.768 250.527 293.423 247.586 cv
cp
.819608 .415686 .294118 rgb
f
52.3533 84.7537 mo
134.465 84.7537 li
144.327 84.7537 152.323 92.7488 152.323 102.612 cv
152.323 112.316 li
152.323 121.331 145.015 128.639 136 128.639 cv
135.274 128.639 134.789 129.379 135.075 130.045 cv
136.385 133.09 137.653 136.189 139.114 139.034 cv
141.39 143.466 128.695 136.717 124.303 134.193 cv
112.132 127.198 107.895 128.639 52.3528 128.639 cv
44.5486 128.639 38.2225 122.312 38.2225 114.508 cv
38.2225 98.8846 li
38.2225 91.0804 44.5491 84.7537 52.3533 84.7537 cv
cp
1 1 1 rgb
f
89.1687 127.95 mo
110.864 127.95 115.841 128.677 124.585 133.701 cv
131.435 137.638 137.949 140.464 138.835 139.895 cv
138.821 139.887 138.825 139.712 138.61 139.292 cv
137.394 136.925 136.297 134.352 135.237 131.863 cv
134.555 130.269 li
134.345 129.78 134.394 129.223 134.686 128.779 cv
134.977 128.336 135.469 128.072 136 128.072 cv
144.688 128.072 151.756 121.004 151.756 112.316 cv
151.756 102.612 li
151.756 93.0775 143.999 85.3206 134.465 85.3206 cv
52.3533 85.3206 li
44.8743 85.3206 38.7894 91.4056 38.7894 98.8846 cv
38.7894 114.508 li
38.7894 121.987 44.8738 128.072 52.3528 128.072 cv
61.6507 128.072 69.386 128.033 76.2107 127.997 cv
81.1077 127.972 85.3924 127.95 89.1687 127.95 cv
cp
138.56 141.028 mo
135.434 141.028 127.596 136.739 124.02 134.684 cv
114.02 128.936 109.715 128.958 76.2166 129.13 cv
69.3904 129.165 61.6531 129.205 52.3528 129.205 cv
44.2493 129.205 37.6561 122.612 37.6561 114.508 cv
37.6561 98.8846 li
37.6561 90.7806 44.2493 84.1873 52.3533 84.1873 cv
134.465 84.1873 li
144.624 84.1873 152.889 92.4525 152.889 102.612 cv
152.889 112.316 li
152.889 121.629 145.313 129.205 136 129.205 cv
135.785 129.205 135.671 129.343 135.632 129.403 cv
135.593 129.462 135.511 129.623 135.596 129.822 cv
136.279 131.419 li
137.332 133.889 138.421 136.444 139.617 138.775 cv
140.062 139.639 140.063 140.292 139.62 140.714 cv
139.394 140.93 139.03 141.028 138.56 141.028 cv
cp
.933333 .894118 .85098 rgb
f
139.535 96.137 mo
140.975 96.137 141.649 96.2816 141.649 95.6453 cv
141.649 94.2054 141.794 93.5306 141.158 93.5306 cv
139.718 93.5306 139.043 93.386 139.043 94.0228 cv
139.043 95.4627 138.898 96.137 139.535 96.137 cv
cp
.266667 .258824 .266667 rgb
f
120.324 96.137 mo
131.359 96.137 li
133.094 96.137 133.073 93.5306 131.359 93.5306 cv
120.324 93.5306 li
118.812 93.5306 119.02 95.4007 119.02 94.8338 cv
119.02 95.5535 119.604 96.137 120.324 96.137 cv
cp
.8 .533333 .164706 rgb
f
79.9466 96.137 mo
111.471 96.137 li
113.205 96.137 113.183 93.5306 111.471 93.5306 cv
79.9466 93.5306 li
78.4344 93.5306 78.6434 95.4007 78.6434 94.8338 cv
78.6434 95.5535 79.2269 96.137 79.9466 96.137 cv
cp
.619608 .74902 .847059 rgb
f
69.7737 96.137 mo
71.2215 96.137 72.0618 96.3387 72.0618 95.8192 cv
72.0618 94.3714 72.2635 93.5306 71.7439 93.5306 cv
70.2962 93.5306 69.4559 93.3289 69.4559 93.8489 cv
69.4559 95.2967 69.2542 96.137 69.7737 96.137 cv
cp
.266667 .258824 .266667 rgb
f
52.3973 96.137 mo
62.6473 96.137 li
64.3816 96.137 64.3602 93.5306 62.6473 93.5306 cv
52.3973 93.5306 li
50.8855 93.5306 51.094 95.4007 51.094 94.8338 cv
51.094 95.5535 51.6775 96.137 52.3973 96.137 cv
cp
.839216 .447059 .227451 rgb
f
138.872 102.46 mo
140.312 102.46 140.986 102.605 140.986 101.969 cv
140.986 100.528 141.131 99.8538 140.494 99.8538 cv
139.054 99.8538 138.38 99.7093 138.38 100.346 cv
138.38 101.786 138.235 102.46 138.872 102.46 cv
cp
.266667 .258824 .266667 rgb
f
119.66 102.46 mo
130.696 102.46 li
132.43 102.46 132.409 99.8538 130.696 99.8538 cv
119.66 99.8538 li
118.148 99.8538 118.357 101.724 118.357 101.157 cv
118.357 101.877 118.94 102.46 119.66 102.46 cv
cp
.8 .533333 .164706 rgb
f
79.283 102.46 mo
110.807 102.46 li
112.541 102.46 112.52 99.8538 110.807 99.8538 cv
79.283 99.8538 li
77.7713 99.8538 77.9798 101.724 77.9798 101.157 cv
77.9798 101.877 78.5633 102.46 79.283 102.46 cv
cp
.619608 .74902 .847059 rgb
f
69.1106 102.46 mo
70.5579 102.46 71.3987 102.662 71.3987 102.142 cv
71.3987 100.695 71.6004 99.8538 71.0804 99.8538 cv
69.6326 99.8538 68.7923 99.6522 68.7923 100.172 cv
68.7923 101.62 68.5906 102.46 69.1106 102.46 cv
cp
.266667 .258824 .266667 rgb
f
51.7337 102.46 mo
61.9837 102.46 li
63.7181 102.46 63.6971 99.8538 61.9837 99.8538 cv
51.7337 99.8538 li
50.222 99.8538 50.4305 101.724 50.4305 101.157 cv
50.4305 101.877 51.014 102.46 51.7337 102.46 cv
cp
.839216 .447059 .227451 rgb
f
138.208 108.784 mo
139.648 108.784 140.323 108.928 140.323 108.292 cv
140.323 106.851 140.467 106.177 139.831 106.177 cv
138.39 106.177 137.716 106.033 137.716 106.669 cv
137.716 108.109 137.572 108.784 138.208 108.784 cv
cp
.266667 .258824 .266667 rgb
f
118.997 108.784 mo
130.033 108.784 li
131.767 108.784 131.745 106.177 130.033 106.177 cv
118.997 106.177 li
117.485 106.177 117.694 108.047 117.694 107.48 cv
117.694 108.2 118.277 108.784 118.997 108.784 cv
cp
.8 .533333 .164706 rgb
f
78.6194 108.784 mo
110.143 108.784 li
111.878 108.784 111.857 106.177 110.143 106.177 cv
78.6194 106.177 li
77.1077 106.177 77.3162 108.047 77.3162 107.48 cv
77.3162 108.2 77.8997 108.784 78.6194 108.784 cv
cp
.619608 .74902 .847059 rgb
f
68.4471 108.784 mo
69.8943 108.784 70.7352 108.985 70.7352 108.465 cv
70.7352 107.018 70.9368 106.177 70.4173 106.177 cv
68.9695 106.177 68.1287 105.975 68.1287 106.495 cv
68.1287 107.943 67.927 108.784 68.4471 108.784 cv
cp
.266667 .258824 .266667 rgb
f
51.0701 108.784 mo
61.3201 108.784 li
63.055 108.784 63.0335 106.177 61.3201 106.177 cv
51.0701 106.177 li
49.5584 106.177 49.7674 108.047 49.7674 107.48 cv
49.7674 108.2 50.3509 108.784 51.0701 108.784 cv
cp
.839216 .447059 .227451 rgb
f
137.545 115.107 mo
138.985 115.107 139.659 115.251 139.659 114.615 cv
139.659 113.175 139.804 112.5 139.167 112.5 cv
137.727 112.5 137.053 112.356 137.053 112.992 cv
137.053 114.432 136.908 115.107 137.545 115.107 cv
cp
.266667 .258824 .266667 rgb
f
118.333 115.107 mo
129.369 115.107 li
131.104 115.107 131.082 112.5 129.369 112.5 cv
118.333 112.5 li
116.822 112.5 117.03 114.37 117.03 113.804 cv
117.03 114.523 117.614 115.107 118.333 115.107 cv
cp
.8 .533333 .164706 rgb
f
77.9559 115.107 mo
109.48 115.107 li
111.215 115.107 111.193 112.5 109.48 112.5 cv
77.9559 112.5 li
76.4441 112.5 76.6531 114.37 76.6531 113.804 cv
76.6531 114.523 77.2361 115.107 77.9559 115.107 cv
cp
.619608 .74902 .847059 rgb
f
67.7835 115.107 mo
69.2312 115.107 70.0716 115.308 70.0716 114.788 cv
70.0716 113.341 70.2732 112.5 69.7537 112.5 cv
68.306 112.5 67.4656 112.299 67.4656 112.819 cv
67.4656 114.266 67.264 115.107 67.7835 115.107 cv
cp
.266667 .258824 .266667 rgb
f
50.407 115.107 mo
60.657 115.107 li
62.3914 115.107 62.3699 112.5 60.657 112.5 cv
50.407 112.5 li
48.8953 112.5 49.1038 114.37 49.1038 113.804 cv
49.1038 114.523 49.6873 115.107 50.407 115.107 cv
cp
.839216 .447059 .227451 rgb
f
136.881 121.43 mo
138.322 121.43 138.996 121.575 138.996 120.938 cv
138.996 119.498 139.14 118.824 138.504 118.824 cv
137.064 118.824 136.389 118.679 136.389 119.315 cv
136.389 120.756 136.245 121.43 136.881 121.43 cv
cp
.266667 .258824 .266667 rgb
f
117.67 121.43 mo
128.706 121.43 li
130.44 121.43 130.419 118.824 128.706 118.824 cv
117.67 118.824 li
116.158 118.824 116.367 120.693 116.367 120.127 cv
116.367 120.846 116.95 121.43 117.67 121.43 cv
cp
.8 .533333 .164706 rgb
f
77.2928 121.43 mo
108.817 121.43 li
110.551 121.43 110.53 118.824 108.817 118.824 cv
77.2928 118.824 li
75.7811 118.824 75.9895 120.693 75.9895 120.127 cv
75.9895 120.846 76.573 121.43 77.2928 121.43 cv
cp
.619608 .74902 .847059 rgb
f
67.1199 121.43 mo
68.5677 121.43 69.4085 121.632 69.4085 121.112 cv
69.4085 119.664 69.6102 118.824 69.0901 118.824 cv
67.6429 118.824 66.802 118.622 66.802 119.142 cv
66.802 120.589 66.6004 121.43 67.1199 121.43 cv
cp
.266667 .258824 .266667 rgb
f
49.7435 121.43 mo
59.9935 121.43 li
61.7278 121.43 61.7063 118.824 59.9935 118.824 cv
49.7435 118.824 li
48.2317 118.824 48.4402 120.693 48.4402 120.127 cv
48.4402 120.846 49.0237 121.43 49.7435 121.43 cv
cp
.839216 .447059 .227451 rgb
f
51.4217 224.753 mo
43.4212 224.753 39.9344 225.49 39.9344 222.105 cv
39.9344 214.104 39.1976 210.618 42.5828 210.618 cv
50.5828 210.618 54.0696 209.881 54.0696 213.266 cv
54.0696 221.266 54.8069 224.753 51.4217 224.753 cv
cp
.823529 .909804 .937255 rgb
f
48.6346 211.117 mo
47.9061 211.117 47.1014 211.131 46.2239 211.145 cv
45.1331 211.164 43.9207 211.184 42.5828 211.184 cv
41.7327 211.184 41.387 211.436 41.201 211.625 cv
40.3606 212.48 40.4012 214.859 40.4622 218.463 cv
40.4808 219.554 40.5013 220.766 40.5013 222.104 cv
40.5013 222.955 40.7527 223.301 40.9417 223.487 cv
41.7967 224.327 44.1766 224.285 47.7801 224.225 cv
48.8714 224.207 50.0833 224.186 51.4217 224.186 cv
52.2718 224.186 52.617 223.934 52.803 223.746 cv
53.6438 222.89 53.6033 220.511 53.5423 216.908 cv
53.5237 215.817 53.5032 214.604 53.5032 213.266 cv
53.5032 212.416 53.2518 212.07 53.0623 211.884 cv
52.4158 211.249 50.8958 211.117 48.6346 211.117 cv
cp
45.3885 225.388 mo
42.7703 225.388 41.0809 225.213 40.1473 224.295 cv
39.6229 223.779 39.368 223.062 39.368 222.104 cv
39.368 220.773 39.3475 219.567 39.3289 218.482 cv
39.2605 214.455 39.2195 212.024 40.3929 210.831 cv
40.9085 210.306 41.6248 210.052 42.5828 210.052 cv
43.9139 210.052 45.1194 210.031 46.2049 210.013 cv
50.2332 209.944 52.6629 209.902 53.8567 211.076 cv
54.3812 211.592 54.636 212.308 54.636 213.266 cv
54.636 214.597 54.6565 215.803 54.6751 216.888 cv
54.7435 220.916 54.785 223.346 53.6111 224.54 cv
53.0955 225.064 52.3792 225.32 51.4217 225.32 cv
50.0901 225.32 48.8846 225.341 47.7996 225.358 cv
46.9212 225.374 46.1185 225.388 45.3885 225.388 cv
cp
.619608 .74902 .847059 rgb
f
51.1243 222.306 mo
50.9969 222.306 50.8689 222.258 50.7718 222.161 cv
42.5271 213.916 li
42.3323 213.721 42.3323 213.405 42.5271 213.21 cv
42.722 213.015 43.0379 213.015 43.2327 213.21 cv
51.4769 221.455 li
51.6717 221.65 51.6717 221.966 51.4769 222.161 cv
51.3797 222.258 51.2518 222.306 51.1243 222.306 cv
cp
.996078 1 1 rgb
f
42.8797 222.306 mo
42.7522 222.306 42.6243 222.258 42.5271 222.161 cv
42.3323 221.966 42.3323 221.65 42.5271 221.455 cv
50.7718 213.21 li
50.9671 213.015 51.283 213.016 51.4769 213.21 cv
51.6717 213.405 51.6717 213.721 51.4769 213.916 cv
43.2327 222.161 li
43.1351 222.258 43.0071 222.306 42.8797 222.306 cv
cp
f
43.49 219.088 mo
35.4896 219.088 32.0027 219.825 32.0027 216.439 cv
32.0027 208.439 31.2659 204.952 34.6512 204.952 cv
42.6512 204.952 46.138 204.216 46.138 207.6 cv
46.138 215.6 46.8753 219.088 43.49 219.088 cv
cp
.619608 .74902 .847059 rgb
f
40.7029 205.451 mo
39.9744 205.451 39.1697 205.465 38.2923 205.479 cv
37.2015 205.498 35.9891 205.518 34.6512 205.518 cv
33.8011 205.518 33.4554 205.77 33.2693 205.959 cv
32.429 206.814 32.469 209.194 32.5306 212.797 cv
32.5491 213.888 32.5696 215.1 32.5696 216.439 cv
32.5696 217.29 32.8211 217.635 33.0101 217.821 cv
33.865 218.662 36.2449 218.618 39.8484 218.56 cv
40.9397 218.542 42.1517 218.521 43.49 218.521 cv
44.3401 218.521 44.6854 218.269 44.8714 218.081 cv
45.7122 217.225 45.6717 214.846 45.6106 211.242 cv
45.5921 210.151 45.5716 208.939 45.5716 207.6 cv
45.5716 206.751 45.3201 206.405 45.1307 206.219 cv
44.4842 205.583 42.9642 205.451 40.7029 205.451 cv
cp
37.4568 219.721 mo
34.8387 219.721 33.1492 219.547 32.2156 218.629 cv
31.6912 218.113 31.4363 217.397 31.4363 216.439 cv
31.4363 215.108 31.4158 213.902 31.3973 212.816 cv
31.3289 208.789 31.2879 206.358 32.4612 205.165 cv
32.9769 204.64 33.6932 204.386 34.6512 204.386 cv
35.9817 204.386 37.1878 204.365 38.2732 204.346 cv
42.3016 204.279 44.7313 204.237 45.9256 205.411 cv
46.4495 205.927 46.7044 206.643 46.7044 207.6 cv
46.7044 208.931 46.7249 210.138 46.7435 211.222 cv
46.8118 215.25 46.8533 217.681 45.6795 218.875 cv
45.1639 219.399 44.4476 219.654 43.49 219.654 cv
42.1585 219.654 40.9529 219.675 39.868 219.693 cv
38.9896 219.708 38.1868 219.721 37.4568 219.721 cv
cp
.823529 .909804 .937255 rgb
f
39.1839 214.624 mo
39.0911 214.577 36.7103 215.916 36.8016 215.866 cv
36.4119 216.079 37.077 212.82 37.0203 213.185 cv
37.0359 213.083 35.0271 211.232 35.1028 211.304 cv
34.7801 210.999 38.0843 210.624 37.72 210.683 cv
37.8226 210.667 38.9617 208.184 38.9173 208.278 cv
39.1072 207.877 40.4847 210.904 40.3157 210.575 cv
40.3636 210.668 43.0765 210.984 42.9734 210.971 cv
43.4134 211.027 40.9603 213.273 41.2205 213.011 cv
41.1473 213.085 41.6849 215.763 41.6658 215.66 cv
41.7479 216.096 38.8543 214.458 39.1839 214.624 cv
cp
.996078 1 1 rgb
f
373.745 245.805 mo
381.745 245.805 385.233 246.541 385.233 243.156 cv
385.233 235.156 385.969 231.669 382.584 231.669 cv
374.584 231.669 371.097 230.931 371.097 234.317 cv
371.097 242.317 370.36 245.805 373.745 245.805 cv
cp
.823529 .909804 .937255 rgb
f
376.533 232.168 mo
374.271 232.168 372.751 232.3 372.104 232.935 cv
371.915 233.121 371.663 233.468 371.663 234.317 cv
371.663 235.655 371.643 236.867 371.624 237.958 cv
371.564 241.561 371.523 243.942 372.364 244.797 cv
372.549 244.986 372.896 245.238 373.745 245.238 cv
375.083 245.238 376.296 245.259 377.387 245.277 cv
380.988 245.336 383.37 245.379 384.225 244.538 cv
384.414 244.351 384.666 244.007 384.666 243.156 cv
384.666 241.817 384.687 240.605 384.704 239.514 cv
384.766 235.912 384.806 233.531 383.966 232.676 cv
383.78 232.487 383.434 232.235 382.584 232.235 cv
381.245 232.235 380.034 232.215 378.943 232.196 cv
378.065 232.181 377.26 232.168 376.533 232.168 cv
cp
379.779 246.438 mo
379.048 246.438 378.246 246.425 377.367 246.41 cv
376.283 246.391 375.076 246.371 373.745 246.371 cv
372.787 246.371 372.072 246.116 371.556 245.592 cv
370.382 244.398 370.423 241.967 370.492 237.939 cv
370.51 236.853 370.531 235.648 370.531 234.317 cv
370.531 233.359 370.785 232.643 371.31 232.128 cv
372.503 230.954 374.934 230.995 378.961 231.063 cv
380.047 231.082 381.253 231.102 382.584 231.102 cv
383.542 231.102 384.258 231.357 384.774 231.882 cv
385.948 233.075 385.907 235.507 385.838 239.534 cv
385.82 240.619 385.799 241.825 385.799 243.156 cv
385.799 244.114 385.544 244.83 385.02 245.346 cv
384.086 246.263 382.396 246.438 379.779 246.438 cv
cp
.619608 .74902 .847059 rgb
f
374.042 243.358 mo
373.914 243.358 373.787 243.309 373.69 243.212 cv
373.494 243.016 373.494 242.701 373.69 242.506 cv
381.934 234.262 li
382.129 234.066 382.445 234.066 382.64 234.262 cv
382.834 234.456 382.834 234.771 382.64 234.967 cv
374.395 243.212 li
374.297 243.309 374.17 243.358 374.042 243.358 cv
cp
.996078 1 1 rgb
f
382.287 243.358 mo
382.159 243.358 382.032 243.309 381.934 243.212 cv
373.69 234.967 li
373.494 234.771 373.494 234.456 373.69 234.262 cv
373.884 234.066 374.201 234.066 374.395 234.262 cv
382.64 242.506 li
382.834 242.701 382.834 243.016 382.64 243.212 cv
382.542 243.309 382.414 243.358 382.287 243.358 cv
cp
f
381.677 240.138 mo
389.677 240.138 393.164 240.876 393.164 237.49 cv
393.164 229.49 393.901 226.004 390.516 226.004 cv
382.516 226.004 379.029 225.266 379.029 228.651 cv
379.029 236.652 378.291 240.138 381.677 240.138 cv
cp
.619608 .74902 .847059 rgb
f
384.463 226.503 mo
382.202 226.503 380.683 226.635 380.035 227.27 cv
379.847 227.456 379.595 227.802 379.595 228.651 cv
379.595 229.989 379.575 231.201 379.556 232.293 cv
379.495 235.896 379.454 238.276 380.295 239.132 cv
380.481 239.321 380.827 239.572 381.677 239.572 cv
383.015 239.572 384.228 239.593 385.318 239.612 cv
388.92 239.671 391.302 239.713 392.157 238.873 cv
392.346 238.686 392.598 238.341 392.598 237.49 cv
392.598 236.152 392.618 234.94 392.637 233.848 cv
392.698 230.246 392.738 227.866 391.898 227.011 cv
391.711 226.822 391.366 226.57 390.516 226.57 cv
389.178 226.57 387.965 226.55 386.874 226.531 cv
385.996 226.516 385.192 226.503 384.463 226.503 cv
cp
387.71 240.773 mo
386.98 240.773 386.178 240.76 385.299 240.744 cv
384.214 240.726 383.008 240.706 381.677 240.706 cv
380.719 240.706 380.003 240.45 379.488 239.926 cv
378.314 238.732 378.355 236.301 378.423 232.274 cv
378.442 231.188 378.462 229.982 378.462 228.651 cv
378.462 227.694 378.717 226.978 379.242 226.462 cv
380.435 225.288 382.866 225.33 386.893 225.398 cv
387.979 225.417 389.185 225.437 390.516 225.437 cv
391.474 225.437 392.19 225.692 392.705 226.217 cv
393.879 227.41 393.838 229.841 393.77 233.868 cv
393.751 234.954 393.731 236.159 393.731 237.49 cv
393.731 238.448 393.476 239.165 392.951 239.68 cv
392.018 240.598 390.327 240.773 387.71 240.773 cv
cp
.823529 .909804 .937255 rgb
f
385.983 235.675 mo
386.076 235.628 388.456 236.967 388.366 236.917 cv
388.755 237.13 388.09 233.872 388.147 234.236 cv
388.13 234.134 390.14 232.283 390.064 232.354 cv
390.387 232.05 387.082 231.676 387.447 231.734 cv
387.344 231.718 386.205 229.235 386.249 229.329 cv
386.06 228.929 384.682 231.955 384.851 231.627 cv
384.803 231.719 382.09 232.035 382.194 232.022 cv
381.753 232.079 384.206 234.324 383.947 234.062 cv
384.02 234.136 383.482 236.813 383.501 236.712 cv
383.419 237.147 386.313 235.509 385.983 235.675 cv
cp
.996078 1 1 rgb
f
117.345 200.48 mo
45.0535 200.48 48.075 201.287 48.075 198.597 cv
48.075 139.344 47.2728 141.08 49.9578 141.08 cv
122.249 141.08 119.227 140.273 119.227 142.963 cv
119.227 202.217 120.03 200.48 117.345 200.48 cv
cp
1 1 1 rgb
f
49.5501 141.641 mo
49.3484 141.641 49.2449 141.655 49.1937 141.705 cv
48.4666 142.421 48.4896 147.992 48.5657 166.454 cv
48.5975 174.225 48.6414 184.869 48.6414 198.597 cv
48.6414 198.717 48.6365 198.829 48.6312 198.935 cv
48.6204 199.161 48.616 199.311 48.6561 199.352 cv
49.3606 200.09 56.0174 200.067 78.0745 199.99 cv
87.5354 199.959 100.492 199.914 117.345 199.914 cv
117.578 199.917 li
117.896 199.924 118.044 199.919 118.109 199.855 cv
118.836 199.138 118.813 193.566 118.737 175.1 cv
118.704 167.329 118.661 156.687 118.661 142.963 cv
118.661 142.844 118.666 142.732 118.671 142.625 cv
118.682 142.4 118.686 142.249 118.646 142.208 cv
117.942 141.471 111.286 141.495 89.2278 141.57 cv
79.7669 141.602 66.8094 141.647 49.9578 141.647 cv
49.7239 141.643 li
49.5501 141.641 li
cp
63.6204 201.16 mo
50.8006 201.16 48.6399 200.975 47.8372 200.136 cv
47.4583 199.739 47.4813 199.263 47.4993 198.881 cv
47.5037 198.792 47.5086 198.697 47.5086 198.597 cv
47.5086 184.871 47.4646 174.229 47.4324 166.458 cv
47.345 145.214 47.3318 141.949 48.3982 140.898 cv
48.8094 140.493 49.305 140.503 49.7459 140.511 cv
49.9578 140.513 li
66.8074 140.513 79.764 140.469 89.2239 140.436 cv
115.099 140.348 118.424 140.336 119.465 141.425 cv
119.844 141.821 119.821 142.297 119.803 142.679 cv
119.799 142.769 119.794 142.863 119.794 142.963 cv
119.794 156.685 119.838 167.326 119.87 175.096 cv
119.957 196.346 119.971 199.611 118.904 200.662 cv
118.492 201.067 117.995 201.055 117.556 201.05 cv
117.345 201.047 li
100.495 201.047 87.5384 201.091 78.0784 201.124 cv
72.1604 201.144 67.4217 201.16 63.6204 201.16 cv
cp
.933333 .894118 .85098 rgb
f
56.637 153.717 mo
53.8772 153.717 54.0696 150.583 54.0696 151.15 cv
54.0696 148.39 57.2034 148.583 56.637 148.583 cv
59.3963 148.583 59.2039 151.717 59.2039 151.15 cv
59.2039 153.909 56.0701 153.717 56.637 153.717 cv
cp
.619608 .74902 .847059 rgb
f
94.2264 153.717 mo
65.0076 153.717 li
61.6038 153.717 61.638 148.583 65.0076 148.583 cv
94.2264 148.583 li
96.9856 148.583 96.7937 151.717 96.7937 151.15 cv
96.7937 152.568 95.6443 153.717 94.2264 153.717 cv
cp
.266667 .258824 .266667 rgb
f
107.35 153.717 mo
101.28 153.717 li
97.8763 153.717 97.9104 148.583 101.28 148.583 cv
107.35 148.583 li
110.11 148.583 109.917 151.717 109.917 151.15 cv
109.917 152.568 108.768 153.717 107.35 153.717 cv
cp
f
107.35 161.849 mo
110.11 161.849 109.917 158.716 109.917 159.282 cv
109.917 156.523 106.783 156.715 107.35 156.715 cv
104.591 156.715 104.783 159.849 104.783 159.282 cv
104.783 162.041 107.917 161.849 107.35 161.849 cv
cp
.619608 .74902 .847059 rgb
f
69.7605 161.849 mo
98.9793 161.849 li
102.383 161.849 102.349 156.715 98.9793 156.715 cv
69.7605 156.715 li
67.0013 156.715 67.1936 159.849 67.1936 159.282 cv
67.1936 160.7 68.3426 161.849 69.7605 161.849 cv
cp
.266667 .258824 .266667 rgb
f
56.637 161.849 mo
62.7068 161.849 li
66.1106 161.849 66.0765 156.715 62.7068 156.715 cv
56.637 156.715 li
53.8772 156.715 54.0696 159.849 54.0696 159.282 cv
54.0696 160.7 55.219 161.849 56.637 161.849 cv
cp
f
56.637 169.281 mo
53.8772 169.281 54.0696 166.148 54.0696 166.714 cv
54.0696 163.955 57.2034 164.147 56.637 164.147 cv
59.3963 164.147 59.2039 167.281 59.2039 166.714 cv
59.2039 169.473 56.0701 169.281 56.637 169.281 cv
cp
.619608 .74902 .847059 rgb
f
94.2264 169.281 mo
65.0076 169.281 li
61.6038 169.281 61.638 164.147 65.0076 164.147 cv
94.2264 164.147 li
96.9856 164.147 96.7937 167.281 96.7937 166.714 cv
96.7937 168.132 95.6443 169.281 94.2264 169.281 cv
cp
.266667 .258824 .266667 rgb
f
107.35 169.281 mo
101.28 169.281 li
97.8763 169.281 97.9104 164.147 101.28 164.147 cv
107.35 164.147 li
110.11 164.147 109.917 167.281 109.917 166.714 cv
109.917 168.132 108.768 169.281 107.35 169.281 cv
cp
f
107.35 177.413 mo
110.11 177.413 109.917 174.28 109.917 174.846 cv
109.917 172.087 106.783 172.279 107.35 172.279 cv
104.591 172.279 104.783 175.413 104.783 174.846 cv
104.783 177.605 107.917 177.413 107.35 177.413 cv
cp
.619608 .74902 .847059 rgb
f
69.7605 177.413 mo
98.9793 177.413 li
102.383 177.413 102.349 172.279 98.9793 172.279 cv
69.7605 172.279 li
67.0013 172.279 67.1936 175.413 67.1936 174.846 cv
67.1936 176.263 68.3426 177.413 69.7605 177.413 cv
cp
.266667 .258824 .266667 rgb
f
56.637 177.413 mo
62.7068 177.413 li
66.1106 177.413 66.0765 172.279 62.7068 172.279 cv
56.637 172.279 li
53.8772 172.279 54.0696 175.413 54.0696 174.846 cv
54.0696 176.263 55.219 177.413 56.637 177.413 cv
cp
f
56.637 184.846 mo
53.8772 184.846 54.0696 181.712 54.0696 182.278 cv
54.0696 179.518 57.2034 179.711 56.637 179.711 cv
59.3963 179.711 59.2039 182.845 59.2039 182.278 cv
59.2039 185.038 56.0701 184.846 56.637 184.846 cv
cp
.619608 .74902 .847059 rgb
f
94.2264 184.846 mo
65.0076 184.846 li
61.6038 184.846 61.638 179.711 65.0076 179.711 cv
94.2264 179.711 li
96.9856 179.711 96.7937 182.845 96.7937 182.278 cv
96.7937 183.696 95.6443 184.846 94.2264 184.846 cv
cp
.266667 .258824 .266667 rgb
f
107.35 184.846 mo
102.111 184.846 98.7132 185.503 98.7132 182.278 cv
98.7132 180.861 99.8616 179.711 101.28 179.711 cv
107.35 179.711 li
110.754 179.711 110.72 184.846 107.35 184.846 cv
cp
f
107.35 192.977 mo
110.11 192.977 109.917 189.844 109.917 190.41 cv
109.917 187.651 106.783 187.844 107.35 187.844 cv
104.591 187.844 104.783 190.976 104.783 190.41 cv
104.783 193.17 107.917 192.977 107.35 192.977 cv
cp
.619608 .74902 .847059 rgb
f
69.7605 192.977 mo
98.9793 192.977 li
102.383 192.977 102.349 187.844 98.9793 187.844 cv
68.8553 187.844 67.1936 186.897 67.1936 190.41 cv
67.1936 191.828 68.3426 192.977 69.7605 192.977 cv
cp
.266667 .258824 .266667 rgb
f
56.637 192.977 mo
62.7068 192.977 li
66.1106 192.977 66.0765 187.844 62.7068 187.844 cv
56.637 187.844 li
53.8772 187.844 54.0696 190.976 54.0696 190.41 cv
54.0696 191.828 55.219 192.977 56.637 192.977 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.0.0
%%For: (Tom) ()
%%Title: (Set of programmers_02-03.eps)
%%CreationDate: 4/24/2021 8:01 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!)n'e+`b8^97&l3)D#f'"l@FFG$f^2CrG,:/,1?-!R^_Vrtth\%a^Dfp7hPP9suGolH`%*;C[MRaGe\,`P8L1MaCA[90G8
%Y1<MW<chq&MiPspgOL@sB)_D:R@0D<"2EMl/8I%Ca0J`HB;u+WQs&6AD>G_t)_QQM?7WB5I^QT@W"o5B1KQ*Y)U2h>pX?/m45M:]
%`DbXhj`9aDZ<$Z+fC7&M[WT#].f5^C7`B-l/?9CsSC,Bt:&#&F^n1qBcaG>(*VulRoFC0+i\LgDCN>VhdQ_dp%fFLJZdnPKV-<Q@
%4;M5YB"[Cr^[CVV5\8,r#62o`+-h!K_J>KB]M0\%"[BHX's(k1frH@GUotUlUsVE,pkSmH3?\t3Z`)j_8&`&h_Okti:e]`krr+se
%U%8=Z<D3f"XG[UrXp,H*UJ<!<O8MV`m'V3Z6VCFc0ZLPPs,hd;$H!]W5o7O?;cOV@3"GT6[%]n7q"il@rf:XPV=,/tL)@q\7dI;N
%T20;QVQ(!uTO%71a44&qpn\Ydne'NR(&]o7(Oa##p1R,Go'"u*`0&Z]oNNH/[;m2k?s.Kd<d*5_]_BlFERR<#HZd)L<'-e6C9F+M
%9EPL7d`nke)7H8P/PFJBdoA6T0L<dZ4kigj4_U9R<A]66@9l/L2@e+uaPpO$FBPUrCTaWf16W#!h.i13Od+S2ip_FpeQGE=T,[](
%F;pUoCAHD1%S]12m7?fNAp4`il&BF4=0(7m2"B0TORt"rJo^6Vr&+>)rWZB0l[flRc?=!m6)f_Vs7=!2r\s"V^YFQ.DDc1rqKDP+
%p<Wd$<f=A,?TIWaX]bhH\#AYaIt_7lPrY:kb#-&,5TT?@==3@!lLP;s!hBd-iI?Q"l.=k.rHo+h'm)oE!Co)Khu.St/lg-=oi'm7
%$u?qT.")Ui=/\qtq(2cG5P<P@NcChoC_TOXYo?lY[ERS?Y>r*TQd2(K[9*(%?DF9H4ON,=#XmIbJq!$&5BZ,$Ek-;FnEO)OK!Ns@
%2m8I@>-/cFhrF061\0Ge:\a&=N<22E/kT-j2p,R@eFKAXC6^iK/*69CX!8UL4A;ECfkS"o_p//?/`^U$.tC`fb")SIW,`2[-o=QZ
%K+.!N'q=[2O'k(3=93`/J(#ber^:P\=1qdh5Mi5;%L^4C?>[X\'Xf7E$#G;OX6`oGc*2NnCK)t4EfThCn"5m:>.N.a7,=,iIBV$J
%(!?O7cXt?rd&Ge;.,.bMMl=E02'pjl[V?Nsbg9VM>%2jYm(;P]B<0duH1imIcZDn3<EJuU#>/:Dj`L8lq,+.IoAb3_F8^3Qch5ab
%&NG!enga=j\'CCZSUhB<NTB).UA<;<rl;p?/^P^oFH)U'T9X!_mHmYt(]5?NH*u&hIbp$d.!,Dhb#Q4n$Wj0FZ/NT>5)'^9V#n4m
%?=WbkV.(Qq^]<:iP7#Smr$M3To?,K)i76#L+TAG,<IA,SeS^o7;!>MmDY$c;ZEt'A-MH'BcT;(NoH@o6nbC2ac1O@2\?"/s9h"q,
%.K"Hr"J'm6J$\*`CI<;q-;p^Q<GQ9:3gq$5ERf5DYL)jSj6m;=ksLX\2`=-oR]R3ICq.ha-E:62Us_WZ(2NR4Xo5m$O-7FGlsN`#
%[+i2M/=4C77&B0CdPPEe7h(GTf$Nt8cuE0'2[]O"pVB?bcrfO`'j\]Z(Enp@)[Yu*Pc1^[q*HTm-ET_V4^J'Z`$csQIWbO([9UK;
%cEuPaWAmpelGHfN$r+WamGjI=]"CXYc89YHPQYi_OdpoNa,'XT<YBl>)WLK"LhLO^`*CZ@Kf3c]8ZL0UTQFQq1juX['6GoC*OGTJ
%>5'\7Q#nI!Vj;?>%1dj_nntSZ]SDEUiGIpLY3!lL/XNX%d^<>kQ:ohMPHgDm?6Q4^\TBEiY3"*>>e66uX_YK=Er.1a:=NIMDs)lA
%dA4B4buSi?s'DFM_;DKLM)Ud^iG<f,B!^Puf5;@`qn=E@F7Rg5/t.7T(-^Q^.5VZS0]ooE9QhD1T/"=T3Y',>GB<sEr(N^JHR-FW
%C6hZVh#B$IBGP_*rbq#jq<nhIGVFMl"D!I8d??]G(TgP2nSdu'frp[@XaE?KYWKVln'h8E4PjEAVK/[+)i*JKZ^cE?;+;_J8AkR8
%F89fuo6/Y,:*_\[:?'ue$a8J1(;)hE*'QtHhV:*TJn`XcH]=#7la<a"m:Qf>GiH<gr!`ekC=Qq>l\E9<d2+[.UqRAY(O7_qrmIW;
%5K=e>>tL+OeDm_h<MQ984i']I^mG:A]X.Xlp^OY9)u9(DXB]Mf*P?`n_X>oNo^tqj1"'L\n7$!iQ\OR(5D#jik37=n%nAYjg12$h
%Y>K%?<W(DRVT0]4NY?._J*0s"WK0E8*PZUY,H60p'D))0k(J`7#`eb,G:08gIl;mmc2[3u&$NWTmDjXbPHq.ERn+mt^-j`9A5"<o
%Q>%%#'#cW&;*O$lE$O#P)m;m"F8\0_*L!l"]b=gH%BilK-V"8Rg#;DN#>Iq0_Q-eUFD/F/dBunge?:P6=/'iPYMOZ4)B6NkMht8?
%GN.ai+)3?,?E*KfPuk`CCZ<s2rG&Op$(24p22^^IA#5l[&CJJ3+\))69^^jKaFm7T&QlolR+ro_\)X%8Bki53\6Tc9RUGp#`&'?&
%0Kai5C4`(g/$E.LbD1P7&t^MCAdlHEhppd)7I]2#krT`2'E*.'f2&3m.(k=T-^Nu6#J)>old#;k_\8405^aQD^>f'G+-1"Ni.%f8
%=YDYuAZt%P;[GNlr@^#grQOqk:\I'p8bQnn#>p_g+19a^6PCI3BEAn'n=qoc$>otnB*&io'bC:+I/](lO)q(Vj6u6ff&GR)hrb^]
%m7R8ANH9@o<#pEB0"3c/!VD8g'#$2d86!JSdl0Bp@>!U9.enFYqO_kn+Z\)m!;+7"*[?g*ZP;ofX$36tX1gN?b\>S`(l>hs2ffUU
%]mTjpiC/m<2-tXaneuqpXd"<[5AtR3"u<d&\M97hmU,ZrGh(c0&Ij^ue/Ga;Dn,8ORi/+7;>UeaNnDDiBdb=k&Xp%\(Fj1^Fq;Zp
%Q7@;"q7e*Bq0[FlR?/GYi<bp6"jI>(eJ"1UC]nt[e$N[2TD"!9&rA@F67-6s:\q0]-PFBi,>fdrEo33SPS"H^)3]C]l?34e.IVI+
%b'e^.E!0mNdT@2lHI>o[1_qB4h`Zoe)28+[k@7?rpE^Sd"GERWcmWC$L0s&<Yp^iglh<:Q7JdI%;+<6c';FF5=HpE7MfK'pgO2)Y
%)$(lo1=aiPR_+#@1RZCY&()>I1?`5(daW<PjmYAQM2=hl0e!2Z4P/$JIWBVH>ch%5)bil^T24i5MX5+mC;8/np9TK$A0Nf+C$@.E
%kprSDB]8DZUA-p9:5rXk5>=02HW!W;km>e)PI""/E&P"SY>h^%HL4f+)GBa,Wn0_Df7k*B<3N-E/bR]u21D<Dj%`XTep`6TgV<h\
%]sUh?V;>CUeaAi+97=3>d:rd&!=U(#0Ze;7G@LQm/3+YP>[ogSIciPndqLX9dqJOH8>jjkHr@`IH`cs);Lt(47K9)]^%i,c5sbdn
%7`X_eVV/lTD>#YI[h!?bi4ma?_jY^A*]>id^En#)T@YJJ79e/>7C1q0WWN3)JY1o9/+<f*0&2u\.n*XZYLIH[QYD>aEKYF);P`uL
%Q:i.t-'OR[CEd&ZI^4*UjB_;4\-Xo';C:EVa;oTL1L7sp\.7`_HN'kh+NAb,^YarX[7\-`KZ2eSqkh5S9eD;n=cZW+oR3f],JE+s
%;oo3[OD9@(A9>hl"0QQ'iu[:c6u6D>o[nR`9fQ&,4D':jIFF%0Zmm#$eBII2O?ED10O;[\j_sGC8B4#c%--P/9!,.Oh\q&-G))%;
%KUU3DXJ40jULW`WGd!4b]VdD/V,nCIG\&2/2bnGNfAYqBl!M3<?hSr?9me#GoVPuArgTMZp7a$"ruHioo_^WjmOgXCe`Z`]=_p2$
%f%$&5=RYn+GMqkOoZ[%GM+Q$@8+&;FbKKP%2a-c7NGn]BXOO%Y^'Qi.+uMa!:eDNrGAj0S``-44pVd32ohAL\G@IuPdk@&'5?9BU
%^0b.H)sshZ8h"&s<kao8A\YY$n;Ag)L0)'.;`J&PV9>fZ)0NhPlCL.Q4-@gO?NqGFno*4N><u.sj0ZGuPq)0M&iMeg;\Z[*jK5VP
%5X/4Pq0nKRhY@8j@d2mHh=Pcr.M;Uu@PYMu*2@oSjf*D!#X_PCg$75a,S']td:ZF@>)2(K5(@Oh84_,kfeXN]23Y:^F;JD<S*e3!
%/5Q/43Q#LFO#NDAJOgdO6B@pH7d649\n.+D)5UP,^N[jlC_6+g,I)_d4%JP$;7^>'DAf9T7d65dn)#nc@r5>^A`mZ7<efkif:SWS
%")\U"[D.&M6]"c"l[Al#!0-V?o#0r[BOf\D(`QmMS2UAK_[<fDrT"P%f@B#%+L(kToAS5DGFM0Mr(qe2Vg"7%Y_Ko2=3U\JSN]Z'
%dUX#j-KmH4,<Jg"o8+e`E9hlq&l"T`XaRBpUQrN.C@"\YXRMQ%R2>r6Iltik#SL^E8L@?qq"m1X5AhV49.$OO5i.hY9Hu@gWGtTf
%0TBlg;WF-V@/=G7Q=aJrZS*Up(uF<>9/i9,M)gGfZS1.@lq?S+rJ>Ze#J-ft]]Q_Np[mpojJcEi2#S3\WSnX`,C#D,Q0q!25k-1r
%'9P$IPD\#63,(p28Tke)r(N^RHR-_tib#E/15>Th@B5p13\k2*A"&WJ8XH$D?)/KIH,\Ku1d>lh6CU@j1L6^Q$1Do-'cK_HBG3FP
%dM:JHYL&edYX090%I"3O?(p(%m@:?+dM:IQ<bN.rL6cX,(,]l>BI\IkQ&$s*T8SbOR\:3e8^Q$*a[pYB7PZ=NF[LVBMZ)=n2+K>G
%U8`5Vj3I"$9V`&XAgkNjBni@oQ(dEsC\jM0s'+6](2bniBnE):Pb9GLeMG]-e_"s9>Vp2\jM9gBn9<W46Xupf<U59tiSVhoB#[A1
%57*,5=h^TO?bI4%IaQm<F6CFS1)X<ZKos?KO%gWl;[Hu>1qZ/u/+;%],Ijirr]IX%DLFKFUGWr1/WPt%C:gbV6h.jN#knql6'5@j
%,>l]dWE$Gh.[Bn(W`hK[dN^^UPo<A!S,5_C`d,0)U\jfRZJVk(0)b#%&QmL=o>tA-P2UsYb8\D(_DL1Dmc_T-PlC2)dCpUf(>-%,
%i+i#JV7)PGoH!X&eU-SW%Nj&\qP^BSqUbSB,LPDJQ^W6"B9DmI].'/o`;$?\(sJCp')83XQb\q"cnQ,@0;BAG2!cMoc)%JO^\Z/_
%poDsZ\XXV1XE6Ih0'C[E>e6FuQZJp*c4.O0QnIRMj]oBe9:'_aEpgE9nBp%%SqpdgH^@^kN]\[D:g/_7(N*qjM:$*ig2.Yrn!Y:g
%o4(I;IZ-+9+ji"6q(X4'D;FoulWqtCUS6d..&pnFB-0p=?Bf65,(C#Fq7Q&/Y#c;Ie`pJ7eG?^<MQLU?Q)&-$M%0KeZ`&r0c*8OY
%)=nn^Z>sVVIZ<,G;A&ZSYo/ZF:\UXaJ:<tYXll%%ZMr8l%Y&aqC@'8]4F2X/iics?s-5)$I^Vq0i=?X>[Z[N8HAUM9cM+ZWIcjLM
%`,iHe5BK*e@]-QO1!3R#]SsRLRoP<$qf+KN,V>RHNnmht/9lSfiM1]]:pfq/e_A/OELmGKDH,+ZL'Mo=[\fM\`e@L`qjTU`gR`Y2
%aTdR>+YWIYlHQ0^gb$7]`$i7IRJYHsj6pr2P';7Bpkj3/;X]K7*?/9NRPt/If;a9a9;LMU:Nr;CJ\^0Q#4-4_8WOsN0E/=WF9f8D
%mo"Q(?`VRE8Q!(PSSEcHmZNN3$XDS2qcA[R*L[7MjNhVIi4\o4U;lV#E8pOb;$J6[1NU2c,gZ<!cnOVHIZjjo8f&-[R09;K2+k!O
%MEcu7>cD]_V/[KW#PQ1Ij9T?kC*6#b+@emrC)]ZO)b2STrjZeb_)S7!0o_>7=I#_$%8Q30N7u?Hb'4?@]\iG,i'`GtT.X2SerRH*
%FPWX7\GuE47/&U_D#+i4R[7\u6UV(L+`iMjros)SL^ZFk6$N>+G/4qNfXrNki3&KN&_c59YZqnRr]GQdOB;jV>?5q/>%?a((@Sl(
%k]>2-_eWb+aQ6'9ADE)7[!,kq@#e`Pk7=GW=M,/)-5MAD,c+'Z7W<$#L.OTQ+a1@INcZ;tOaPH&.'h7&%FPNo^JH$M_Siu<:WSPq
%),-2TXc;8te[t!@:ZV._H08c=Uq_=0>oA)I2:gWVhA;m2r2+=nc$$L6n<`G06%ge)/#nbife?mDQ&8_MQt`NT)c"Q,-78:k!aO'\
%(Ofl#e@70p+!Y.!,qj9-K&okIX#;WNSje$)oiM1F$:f<j@q'UE3+;Pp%ZOF>Ug"r*MJY&p)rZ1US+2;a=Jl`u<m0T%C9ut5\G+eI
%mgZ)A>-3&&n4'(QrqHRdMqYji!m/#,:EYX-9IAa2UeqOlq?Tth8&q]aK1D#8<jssZCnk/B+%%6r6Ki6p<o&Nh-mdB;^t8M-;H<_>
%5QBK?e))/E\,C=drk1fA6q(:\SbpQ5UYWR\G.ai!kr4j?7M,o"qP1q-Re+\`dNr8$Ln[DI>'UGRh(Dt*q")qHOqeu=,3%Dr")0^d
%%k5#fL[u_(;`>Fc<U##.O3WA=8)J`]s)#0k3lKPE9pdiBX0j$Lq@0@IghO5t<D;/`mAsS)0q):H0XJLj@A+ufV-utaO(QYuY/!4N
%]Z?t3>9mZLP^2']Zbr)1\/tRSITftIR\`?PWCH:/^\oCJIOX_C7,^nS!^*Hi%fAX&7'fF6jTPg'Ur_?#5QCPOWk<qU^&n!1L/uu)
%5($7ni]lqQ"8jDA[ts_;r)6uEcUi85P7nkTfr6OiH];'%]%5#Q[@"afgM*<!i[!adO<A[/WoE04hbHYD<\:aQXd_k;Ilnp;^p+r8
%F&6rfB"0U?h"3P>qpiBSnF*U@LnT/l1930)24+G0=9`h'quQ/\Bjlp&f5t#`rbJL9K0M&Fl*g06_aXil.BQOG_OfP0M7Po._)E>5
%qLphNLAruQW3DVoB"F,il;Ui_\p@nu)YC5l>.0'@R$jrd-u#$I2IVV`=9b$7,h:>BQ;5lVY%sq=3n;ZXQ6)SeXdOoXJ83AERVb(G
%>+7DuDGo&Gm?iVt5F<5cf@=\LVB5EKl=t/[FS,mS]lpsZ8QODtV+SE@.I4c@;#!air.do[b"L=:FbcYE10\r3F;I2#R=XdXmHQ1C
%X't<0rLdpAF6NqQFHs>9"3IDUa<p!TM31524WDqG[*b)MA$k]irDq,)[-aJ10eQ-O%;1ahi.;ZBdTjtgV5eC$N\1)gpYc*eBXSfn
%5l58e)"[GcA8(lOs86fMd#30jVj+Ysr-9\;H6etf"@[0K\Ym5'ptn1.hs72/Wes%-Y=2\&Bch-n/J"YrUo'XS]Z;bof4c`7j5J>,
%H**$*rBGS*[KF4B"juT->+o6lX0$NJ"[&56>7(?ECA]rtJI[4;rslet47L#R0/r:kpZUtggZUG+F5OZ#$00\Op\SUKP'5;ec>MH6
%a,W8'),]GW%0!*6r&pH$F0jEZ)=XoAP'@$`F*?je8D#/%GBD&$VR'&J$ghQ,<Z*'OnR$2GdH.6\<X'r7Tq?]f2*+=".!Yq%"6t)e
%b/D+W0@?b(EpAR37S7Ro2[O'+<k.i:,7pLj/0L/:DYbM3BX&(n'Ir].q<I0,'u`I<`eYAiJ-.V?Ao7GJdO^^lW<r$&bB^2njsoh,
%[.YE7bN*n3,+gNoIpGa[)uWJl1GQg^k%rFbXfTfUQ*>AgHUEqko=*,t?e!QKR:3m78;B(Ud'QBL:VT>h-I\hJ.r-qB+.fojIiDO=
%77POlREWdA9H/OR7e'@SW(S2@9CYZ)X%PI/*H,9^ps!Cj>+EZR\[Bm$^Z?2=TlTmR5$\kL*i%r1Rj\J=Es/JYr*LuOIdmCQn;1+Q
%p[%)Hk1$J@11n/BYq8tiF*Ja+1Io&fU.D@^,BWpYN3;E*X"rLgQapr-+`i3feUpkGcTEmWi#d=%eb7fXqmhpGqYI58>c*q*n'W$&
%C99r%IEh086Z(nkR@7n0L?0=Ml6b4A``12$.rFV@6J=c6^/_>,HfY@EhC^a>9ELt7h9p,_G-k#M3egXU23X*eQq0G%1jTN$;6>;Z
%360SHTjN95[FT*sQplI6HbE"#%R.V#Cq`s>b.(-+Q'P&_iN``YNqu;qFELg:cOT9K(=+F3/,DDc=<lEuVB\3fJf:"s;$OGf=8dm5
%<Egcg/!mn\Us$W,[W:$'f,K1FWR0M1ZM30ne/K]:(PIKBWRb7b<A%:"V+G<dc#+`d_@<[TXBYVj(L"5$!j^udQ:W\:\s6:%Z4(!A
%DJuu,j^@!?`,D<5_I!C*G!]6r_r'`CSPjA`9#WU7<?(tH,$f@b@9aVeb2,O%Tj4TJKc4iVrMqdQ9,+NM]TbWHQMQU0^/>@6ft9o3
%5UaK4Dtqco^:`-lMp8<I-7kWnq`jrtMjFB]5`-EhKWAq[K#l\*D%MBO:F5IZpWHhX"KL":E4[-Vm-T,g0sn6I,dilm*\0)DE'GK@
%#eH^G'MC\Y$!Z_]NNQ=Q?M1Vk?2D]mXkp2ceMG)t_N0:%EaJFNf/tV_f6^i^TUtd0grKc)d5nIVNM7'!(E?qbX44gD:tdI#g>sa)
%8rk\_=O:a;.i(3^Wd)eS:(6n=8:V^?B#T'FgG*$]ZUQ<dS"L08"h1V8[TbWNJEBhL#"pmtk=/nq>rhAU.PrHUr^s.m"1!>'l-kr0
%LEDA\[d^_Gh.pE0CZQ1@&MPa%!jaGq]"&3;,&?plfWaFC]2`dY6CN`)b(1*%BhQ?_6as8"[DFfF!N<^J$;Y,<,&<EF<8q.,QZ"-h
%a)>91&XZ[I6eW;]P#&&=A@1Y:48J?]6s5E&d3[lFrqbb[0X\C5jYiZmef$N_5t#a"S^6k)QOW.Yd3d4ilCX]5r#^?O54C4L]Z,(r
%EE3TUQsRam)Pme,5F&\deD%\Cgk!2_U3>drj$?J0o=+;A`3Q&fW9W,ql<*\_j].3]%_)0T_(t3i];=\X"9C<Ra7\aMJl+k4#\cGZ
%Q5$ee6%2Nu)j(Tp75rg.(ar@H-AukZ)jNJ.Z'bL#NO.r"';V%.jaO=:.WjCG?Jc_[]Qu_Tg`hX-CHnisnEb:sRP9Db[pT`UWu&0-
%)W7o(WWlKOBnVU3kjnhc;J0l_U!kT`41YKY!"''DlcN:d4L.3Q#6D5!;u(Fp=-]ZW*QQ[1.]>>hq+^um+3F`mJDrHVO8N;sZkBD2
%XE**lMW*Ger`uVbT=)+*#:ECM-0fP?7,?dd?=H0%WQMtS,b=U1JVM&LWk^Co$n5.Tn<FWR^T-9BAWM?8'+G9W0F.b^ekNdr"WcI&
%K!:IlX&3H@A^MQtO#HXAFqJkqe5Y/PCQ.2ncJL8<:ii=-W_5[-gR)g9'F/u5FOdOa=1qKl5m&Jd$>pTHT&PYe_/B8=Y^I#PYZ\$8
%%ZlDCQj;K_,K\'kCO0u7?>[(G;CBn'Q^la`VE.6mBfaUEO^"&d/Ihuj6[V>S(Bl!dl">&2,Q4t22>S>/8Nhk56Q[e"^JR@4hl[`&
%^3/^<FrU*:ZgDA"<e1k\;/9F[I(QLPDAR7p?>YP]OX%,sD(F:3hR5NeXQParE'q\C>Z[BFD$.@JX4F!O\Qo5/Z$Hm1c(Je:#&3DL
%$e9-340B"'5#/K_]krgMX!U,Y$Wk,Us-ArUnfbH"+>]jPOrpd6k!&-^-#$F+G'pl(>Kb_-rm$kMnWiX(;Cf7RrQb-p@a`s@%:/P]
%f<BDm+MGd3!'-*fk1auLY@3X7>h<n]Rm#i6>K-o0Za^Vm;<pA,qHJ]CI?E;hc>TVk@upm=3`r/Z()jT%YEej2qOtbJCiEm=W"1c:
%HRj('KB.;,;S[<+$&A1jfe7GLj:u59qT%c"/hGA[44:[?G?FP'SRi?o]tu'c_2DOe?pEVsqsNo<#>;l+<O(iWg>`RAfr:ZTHNm-%
%X.J'l4dO^5jsE(Sj^p#IW3r\2%3A4G0CrA`OBJF#%WNl8r0GVl=KPo!?6)+EFXU6b,-:$9i[;ug5&"%siI:#u^C6[Dn-cAD)K4Qt
%C:S`Uj$<HHRqA_U\pA/JL1WoeR[Pjojf2.>erraBV-kQL%s-L[NjT@l;5?JQR7ns6d<>7kXds%[4aUeB0C?Gp=#Ra[`m_?5Mk0+F
%Z*Kk@1euTFXSMGF`U_lDQ<W(uq=pSgpTAqP3P1Q[s7bE#REYSqoh=Mq_l6=AmaW"NlWEtB^&Oi,K4Zn8MoM6'%=WQK^gE.'m8''[
%pgN:or+jI.>'o4HnK,q]@0,]5aes(KnAE/!o]sM`_Y,MXFbP9M1Rs`nq!/tSI.Y.WN5$.lf2_!n;267UVQfV=X3U^r$i"H8.K4Vr
%c"oPeY!.SI*au%IK<:R->m#P%]SiD#j@[[l-2a%>C9;+Z(7Xg2U.0Xgbk[6:q!0[6]"%:lfsa!>_1R6Jes_&1hOn492(nN\=d>r$
%B("[-e,S'I<km?J5>nC;T<,M'ZUXri,@bS)EI[ZF>B=CtA*oBgr1<emEW0AA_tq?iQS[s2gW!mc)Y):,l=gA:<i7`TqYIY*UTZoW
%YcN:6d160QDmoY<nUe#IV+Z!=q!Pi0O]bpn\uIks#f[!2a8aLOit*8=L`q.frLSYi?QV+T44@-Ll\.+rnT2KQ!N?T:Ig5h^'GR-B
%`Za%tK>24E6li^-B\)#[5'MsH]3/udmG7YleUulQfsQg9Bp3j"QbE=jH"$[)p!\oRg=o,%CEM5r[Hlr6itpV0Q.@4;MQ5K"H,H's
%()1Db^TCOOQgN$FS(i:K]e5i98l&eH05U"9[27_l([Qj8r8oUf*jc=TrO6nIl?-^t=fYs=/lc71Y9#lV;9b@YMg,uPY'bV_Kr*4=
%HfP(Dk1YaTh65F'Y:gYb]CJ6Lmc`!Bb'*C<hT!,&\@qb8h=Ll0kLYEq7JG&^p$Lc46`=n)r1\#/Q*$HqgKnW$(orY5[^L/BI_pps
%p#[!rSZf.:[PLtmCE*,heuI;'>^2BXGeWGoAuF35(-``'CHFW(3X8]Ek^Ol%s(/(j[DgA^;PB8A._bhLafM,'+M<\=-M..8$[Xo\
%#&O:dVl@o<mb;ZJ8'C<F&p?IM:diOa\PN"To]BE';?(.(MrfX/c1t!;s0RSKSsdhsc$ijA9Kuk@brj>hc8.77bi7<RHPXnYLWes`
%B'ss?6Y:f-Ya0S,H6o%`GVcanH$o2Y,d[8cj(fug^,V`f\h$"hW0R<?)6IWM).U8N+Chd>=iQnYng_Nu:Og[Bg0#Z\]\"qom\]e8
%Z[A;=S67:;L6^!3fi(!(m+JGQbk%$rQ^JXiD'?6or+J6Wq_3GafpHV=aDC9oH]`S6;u`6<hQ'Fb?8&`g1O3p$/@55$@6V"^bI03F
%c<!Z,_sJI#F0*)=cCD8V:1`;5*cGTGT09m)Aj3pl[POQ5PWrco**J=Yk9gLiRGuutK?QdS=[$n,o3.RJ=nQ@'ZMa,pVRDiIb'Y_0
%I`o)>lS#.kgKo5A]"YU/27kb04#M6Tp3:<qpKX7mCsIEr;Kod=.7;jh5Vl?ifB$(4cL/T\WKlT1a/N\^]dH`3)XkC7jfT('V`$cS
%2Q*uJD3q0k+(+G1m1jihWIsc2lI9h>jCmhL$5Ito/Pf*3*G3Toc7@96`QGVQ<B>jA.b"&d;tYQO)k1P)4D*&@LQ)PfZf^k[l1rd'
%l1EsYHTA2Gn!n*-el\;_.UI2mad89NknaS3hbUHE^=o'*H)PUUk>/:R:@E[[@nn+oIC_E:DL2<@oI%+32=9dXNG8F`YVQ/WJ,L+N
%RB@UlY,7\pX-X?op7>VRGka7Bq-`1Qf$skFjn741<p$p__#8NOmD6-\our'D](YX094N,7_9Tosp#+bJoBCnVm./_[O%Ukt&%q#g
%%hC:9?=,k*rmGUIW404@1RXO%;eTcTp?caHAtf1mj,CG4<G,ELF^aFSmd.9J2>,sJB'\a,e]c>)Vt2^"G4ro!];aB9REt!\D_oA9
%,rYAfm*#B%rM!,VbnN<^p>L/ac"qR3;P,i6WKl/uII4r=Mpgl11c)b_:0u97]Y1Jn*mHlt3rAp$f(lDFQH\#Thtf$2>sHTZ[MS+&
%+3lc?(EY:+95bo@-_I[T=5L$+I(8m]Aj5#,4"NSNs7ksV_pd%=rScr5e]u&?p28ht-,4m%Y]]p(3GQHec^nb2Z5;r`3TdX/\Yif*
%f%e:-b1jHId#iB>e\g(NNuu'P>k(fW5?D/ifj&=[p!ioW28:i[PZue4\+BE.o?TW[Zh%DYesl:.g$@YqgK1r7q(K/"lhSu8,A^uk
%>M68&c)cD!Ga+ct0`?fU>6"<[q+L>Ud7`MNs6.^Dc$T)ck'qi%?M6QH\h8F-n>K>Kqlhb=J,*eEGA:au.kdgG(Y6@"(CRj9f?4Q"
%4)Z&GhGeQ.iTlMf?"cqQf[.k&\[1P.a84rlmc,[Q[1A<WR[^.oH\LVSj*.-hNQ6`+`l@&]q=X"3<;#I$EH1-o_P4`V\@T2]qsALq
%Fnqc?G[c(X(;G5Zh-%D9*aC;*0Aih`Ks_FQ=Z1V5cG$fg@l)fi-Zc3=PPgUL=mu%RbA?uS[Ce?hb':5!G]7W9j:nMoV-NoZkG>lR
%QEg)]psnOR&4^O#g]$AWF`)*iM/"#+?`VL)Dc;)7g7MDA0%WnLo/DE#<hWr=ApZ-@c"Pi!r0$dGE;iJap=(,M\7Y'\\X':1eX-.\
%qTQFsWieR7\=c'eD3X_F\^0a:[u[h!HI4saol'ZjLW98g@F\cJr"gSjI5s4ZmBp$8-hkFbj(nYB0rIe@<+s9VC?65TVbcY^o@:I,
%.J)r%#;+DSpRl4YN<`0niVHEpE_l'OCFba@Z&Y1Ek,lM[V.tF*r5`K2*j%S<NqVQ\gK[rDA4Hl[BC*8n=(^@FGI."<O!_3hq;N`)
%\?4)\hqBI(oP;(kW'.GU75QnaH`,/QQS7[MleIrn]RRAql]b_jq!(WC^!L'@J%b<Rc(<G@2]Ggogb8X/R/,$ka30N9n(oTKDbak/
%I6HIkIck(gQV0hEf:eUt#Hu=Y'f3>,\[&sKYdne]r[GT[4FQmAV<+\S:XlphlcG(?f@#l]X2=QDchTR#jP.ZN02ECV^WScgp8BtN
%FP",S4?YcOnG6ktQ"<()]_/l+m-4BBVe<WF+)O5(HbY1Wn>orrcTY]@b[!G_[bLTLI'9.!J*q/;?@Uh1HgZfg]re+IX1%Qf`SoTG
%k!cOq?!kj(rcGhgGTTPY)o[#fX/D;^(TUmbH<4kmT3QkOF5O>TCTm&=A*rmAf(<.Z;-8?\EnT8=7W)5P5Kb(U>-Dr_k?B>"&)OaQ
%lh91QF8aWq2S8tQoP/N^rak83@qkX>Bk,D51r"&.0seGgH;o1!q=+#lF)tpWb2(kGYE(WgpKGhDbjt\\/Sic0]X9o;Mp6'dRORT>
%I9W(W]N!_=\X2XZNU)pLY;VucX?7t>DEg=2rG6h'IfA[,nV9GKql@?ZGW"C0G@*N)V\`Y[*aO2?F`l\.HTek4U&"QLqp-Xn@K#MD
%ngq3>F&(b$rooi2pF>ci%p'k7Y>.9/h3lkM-TfXHCUp"2j-%.JF_rG2]3nuPmB3aS&%eajo^6VYaiF(fm*=b9hYLkbhto+XI_>Dl
%j8.`KIcX;mDa49ShEPe(DS=/>\nJiu2JZ60p>!1rB]dRY!h2EA>M<-hSf;&(K+hn^q*ATdpsn>d5C7df[<-A:pj$elI[$8s\8^LK
%4b%LZ^HAuLFP45b5CQQkR6FsSn9Xp*rS`Yna,QjZlP&UU;se,YlIjJ)`U(Ure+pC=':Lpe]t?<gIIGBRSMi*lD7jF55CIsl[kP;^
%p@<O-n8@4."8gpNVrRAmT0DJaqi"UfGe\WkJ,]H2nT+#FARdq(6+^eoqXE4Kr;<8`q>Apdq58qja4sAQrPsu^ok0mPT<bfMbbp`^
%jmu9gD[uB2C.Dk4Zg"aZc[2)S(S=@oUZ8]InaXWPp7,`e(#E7KI$lq&gL"u$mJ>#h&$:HX@/Kksp\`"PWV?D2rh7s#hLBU\Ej3<.
%ISr;]5ArYF5:AM'XV5BFE7iZ('Pah\]cqfNq6g!pTJh[mP7R9!q+A'mrMT,9r,Q]:i50a7X`1OhqR1flIIY1a1j!7)Epmu@m.._j
%b?Pp'W[h0J99k^Ano^^)1-a'fPhmB5Ije<@oB;QjAc%2KYD429.UVM.gJ>$/flHWZA:<"BDLS^7jX2!cSFX;#k#\G:<h<;t4?9KB
%53n]AWXn:JLXhB>g;dr:8UXchChHt[="fQ^g=?#*-Zr_NS$)3%SpdTi(,E(dR;^B;B@aQ@D/ZG:0sZ8g7J>2%j6VoAeXW8BE<#B0
%[.s*pZ<a@Vf)C^"SR-Y+om.ie_VHL$A?\.igV*;+$B8N'egNiM?9IeQX5qmdH+$76@:%qGCpR-endCBKHFO]56_/>CGV3IAH!#`:
%hbI,ql(Ea/qX-;b?9NY#5SLQo2:"ptMH@QhCn]Y*(2+YrKb6Aj6j<YUQ!2QgpPdtr.a1]>X1+_j?m!5kZZE]QIe0ug<\"YpUJ^5T
%C]1PZSb9$#Jp(A'OBEj)#mE=N)dR(c$0#.&4l?C^oqG]k?e$(pM.2LFh-T3R]Y3!62\mp?*:,EUmibY4k>b5=>hPb=I8?s68$'R0
%We\<4:6S/>b>qTP].8kMUR;S"Galr^VX2(jCf?"KrkJffg21ncW_Jd1W"T]?l$PPGY3eXmPRQ[sm69E*Zr"jK;43-\cg0>].OnS:
%?29JUWC#!8kL'*?c[sCmN%/jIib)%9TIS:X6l70mB`^Q-L$52g[dAOD[Xpe:=DaePN;"O%)E.h.;0e6V4:.*&s7DU\.Lg-d<GIe;
%f7fa2A3(tfdg(TggQ,h(oX10;&;N-YfYfU<+6>SOhRcPm.20fTAM:'cCp@5`>h!6[oY'RlKAJ+ITgX<J01K.6P=:jbQX0I#pGji?
%D0-N[UDL%:Pt<h,V=:pbo,73N7BQhu'pL2hBi-njWN8$NhdboO40:u($&0="oe/HjJdEuiWS_6;Y5E`:T[:36mRX:>NJTJ*Ds2RO
%.o<J*mAH_X^95,ChmbPf'.mLr:bU]E5=[12S;(c[!-bmoH?lR#L>G_&`s%<;,OHjHP[GYC*;f!MpY3cAWjodSc+_c>FcG.-hBUhb
%o1%Q[oTgJae133c#?m#\f6WK5+$ZsqLMZEn8?#R^g'mFP\@kU'LB.$YHkSV0>g+Il\n:iPH.r=>FXRP`,)*iMp7D'CZ6i7mmNT'>
%Ku#!)5]\5N%OGl_@QUPW1U2tWD=OC"6,@o^/Q<(7_ul`[q1.BWTgpPcLGf[Oes,Q]*7J04(A4bPPP^6?QFq[V_/kf0[Wb.s)R4R3
%90!M9M05>u;h1LG)O0T2nD<oaPotfGmkn=cg%Y2d#DH.3`r9Cgjf1+#O#@)@\%<$h#P,N\#f/KX)+*RK(u?1IOO)Ie9-#[=S`s/>
%=0<$$/*V*-lNjH!BoUcX0%FAB>J4kc/(^7e?,O\o/&+Oa1aGe=FHO@+\@c+iY[g"Y>l(<Mi9JO%q)q16<UCdD]/p-i]&5o\d64_f
%9nRp4MnbC+!5mO!)I=#bFqh,`'VU%_$h>7K&?fF2'7t\oYnW!UeP;IH\n\^V%ajF4<_Ff&oPuO41[oRA)KtVY.r+Tlo'unVPCI[Y
%8%X&4_oU,nM!R6[h\``3(cUBWco8GA+Q$k5etO[N(u\eWhO!Plajf*_4C79G&u=lS*=;[V0I7jAc@;XsJeY?,F%'gf[3Yb+Fqm_q
%'[!)I=GZ+cs7tOlPub\rjK#)J?n?XNCcL9X#Be!YT0[0TrR<VOIN3*4m-#>LHDIX.Dh%]V^NT,HUNmKGY?[ceAn4ot[$=)'f!DNS
%\OttUs-Y53XQg^u>1QS/7kkH#CW!oO7Aaj'gP3]WgP/Ud!K^`%REceKnB_+Cc-E=IoOO)PG1LaD9@4Uke9F8,$ie1>-B;fOb+c#U
%]&%Gs6_3I<YKiA$a2DfR-;t>raI8P-+1fgtjZoT,VIp?M!ou=aehD1d^U7=4KrUei%WetF`L+Mm*o#0rpf98Y\cLf$_mc)6@4<>B
%cqXAf2P:Wu6#=fN'jGmfQAOG*>oR!*'O*Gf]S[^f?/R_?b%rH+\qUNa$D#Tr#Kf&0f?s\//o\pa;.DN-]!d?T"eY'4s45W'_h]43
%f#AVrAnDM,Fg3&#CBJ/+hnn=+`&O^@YY?=mL+`rT1T"kG:6o?lG#m3'*%qCr%BSkMYjgnr5Q<h56ZV.`mI`9a3P.S#k8#ec0Jk2)
%=)2TP"dj66[Fb\t&9Cp@RoeI<P1/8djCZ\l&NU?KqaId-]K3e[GdmtRFjU;>s/X!qF#K!PiSDsi(I1)"q.1/.3U91ZEX;lK7jinW
%,/;ufZ3[K(;7eW^YR0<ABmjD\>TJP%84/AMkTH$JU`g)?$';24KL6+?_GmY=Y,WmANgj$KPt'F,L):D[]`Wn'g)s`LbA+'%KK-Io
%5e<B6%*R_+TRl1N[nn;?4+:sq=Q?4(>tf7WY[*?9W*!,C8'O*=7[Z!:%)+*;$8q.HK48>Cl#9Xm&Kn-Ami*O/`(d.$@cGeS+p^c+
%BtD[1:0)R1C)iHO#JL@-dVT)TAM@J5(T%jb_W'RLB#3AEH&$7$?O\=$7BqOq$R2_<3YjQ6ChV_1:mu@O0OV!@nB#2pi.YnYMODRl
%R-d.kC19DLX:;$K&=g.)]E!PG1;QArV^=sKV)aKM$;_To5/:"DEj3IN8&G<JS'WJ%2GhAC@)Fgt:LRS^"s_6D2GC%P6j+59e7LEH
%Aj]!qG-ISARA_aJ.YaY&dHgpL5mLXn61Hlb#J+`&$ofpm'`<MU3V:5n]qPk'AH8WIC'!@#*QH``):*ZHFNiYOr+@KQ0?i;^&<Oe'
%NN<@Y3n72LqLSXM6.cnLZ\:^E1nQZ#:-l!p]9^_;%c=eOnj$uN@r\WL>O\VOK>GS5<!7ii@#gXtd+)5d4TYD3R#H>\2&XhN;u]+d
%62sUp<@W5A^ekmZ(ci&DPG.P$\\^X3B?5?;"N4iDXI/=*pu#\f;9'UM/^OYr%mhTm:6K*kLES?K<c!jt:b&=D]nMnp0L0Vh6"V\P
%'rb]QHrB/D9Em9>0Zp1s9b!s6prG?#QKumKF.ic7TID#"!rWRK$Bu3j>i:TR@l]<1kFaC2j)2\\7*(%52NXTLTVF+E8E8gN^o@mD
%H8%E-W^[1e?jeZD1f/oL9f<8$Y9&GKe;.!95Ldc=JAcsbeeF=A82=<eoh\IFZL"$cNXhT`[Xa8g"8R^5:jkW*^nEV3e7@cOK$j]\
%`G#Q%@\W[.39hoKTY<tL^lX-.dl^]a?GR/F'51Q9QXOdZZug,i-SX?sS[/C\0D*?Jp&j)O-jZ"V3+VNX&$s5$D;`"6a_eWSW&E6Q
%+K,M/+;d8j"s3"OFtR+l#)Hh2%94Jg>o1JJoG<s'dU+tt>SIb5Ja5RB3`p6\D]AotENmJ1-mhdBBZNIV1fC!rAPfS-C%=PD2%WCo
%<3L%=3neY:HXI5A+4,^Q5Wpl&-j.hX.aB9ZL-a?u<fe^@AMDgl!esE)_mmenFTXOUPQ;,Xma/F>US4H%_&+lSh^B^-C+EKj^?a9W
%dc:n1+==6"aF/'=4[?Q%a?5YP0L<9e%;c)c'+=k;@gb!r3OCW&cTr@ZW.L1N&[=;oJM`?uWb,X7(eclTff&jGU]IP0TDBo"#b'kr
%@akoB4J9I)idnIF+j`;Ye[YUqEO9[Si6['f;XglU7]HuA&-rGS-d^s5f2F@q]YgE)<#A61di;=*TJ41,=i-@W%Ff&@k/b#&OTN"c
%BWt#]:#Se2@+8S/^lfRKr0YL0oTG=?@U_.!3)Hf8MNV4^1b.S/JG%GmB\#MhM!>YN'PJIle%(GlK;jXM`_XuQPCH+OF4$;(5#<8$
%RZ0J-/YCORNX'RW%:-Tf@HqsQ#H?5:[o0qheWeTF\lJ(0Sh`"I@K;0L>ZIR;AfW9J(c@\nRKSoW"Q;$Sd\Ho$&/dYNjqB_oW'&"b
%+]=C@#uRYI"MX2f,CaP3hdPA%_NLRKO<N+[HudE/b8iIiJtNN_8pV&h='aV-,dtKD`<!^^?Xs.<Ls[.Ni-?.X?e67lJ+t^UCMFcR
%EbL"WZ-M:8K/9K"XOAFOO1[jCK1R1V2gCcr.6':_=:?BB:&77E61L%n%VnGOBngIR;6(k)PC".@H/Y8J9*/O=KmFd`FBrbEVM:\$
%`Z$3S.(J],k-8?$Jk*[kG\F"-q@)Lil[\JEN:>R-Fhp`bKH;!sNWiUP+Bi4u"ERTk3WNaT<mYM9bM]-)rj0hr*oeDH@[TUA9\@-M
%)D)]JOD.97/d<lVpcp+7DI=Su-oNak$J]T**/:+I?k0:5<)&M:5sVujlj-RLN,>>:)58IF;4BBsMMVG9PSbZX"Ruca/Mj@bi'O-\
%LQINk0Mu;h)F>pV\VW;QZ.sol&j^;70S1WrWO-h(2)7u/@q99d:p)0Qo=q"L*A^!^"V53"8\;r@)h2H+XH>qiZ%1H0dtH7oHCP/)
%Mu8]"n4Rm5&THQ*$f>F@F]sOYUc'c/1SQsd)G!;pOMjQ-d^FfQ6lO=h>sFG'#bXKB+qe:DK>WQ2&Q\0TY!!?5b`I_3@K=fB2OJZV
%V,9P*P.!qfKDCCF,"$CO&IK-N?3M$"nSpfE7R.cd>WML@@S(_K7`3e_Rog-K;+"Brkk3j^W/R#N0HBjo:7u2VAtfFU8-"d\bNt7O
%JCQ9Yp"2ehoOWjhMm$qC7,gfAU@3dEKt>&)NXZ1D0J0!mUqqku&tinK?$%c#)+@(@XVCH2Ru@C$X=(4iVlHeu7L,\nZk9;eTq]l1
%aimil)/_IQ,VAjnidsak+#.r4i\2BW'SJ?".mjs@AJ?.B#?NLeDs,44f7T4eH'RH/%AJr%h!>rrGI-,AI(/#:U=3tc>]dhSp'c?;
%b3$l>=;^Rf-NVZ@M1pC0Y0hg"1'52"_q,A188c-Fg'eZYXOV$QC#FFP=99/Fb:kGk"Q9sn//<4X).fh!IQZYk!cZ6i)8^f5K<ML(
%'K`C!?oT#1)6QC0)S/K\Tatde>`)fI=:rGkLA9uJN6lO/++Q%0^l^??0jV1HCE:-7LO3Ha=InK$\4o/hN]GT@gqC"5[h\(m%MI*C
%"X11g3[bE->>gLP)JNm+F-KLg0H/Veg2s734mr.)VB8._nBgG2/K>iO6lGY0*!;`*)AQd4*seO]6D)'5-(aMn&N!MH@?W([;&bfd
%cs%17_OB,F$6bQ=-:,#[6F@k#(,-1[-(@80MdTMX6^knOaDBYRFSV@:>R\V/NiF3P[!4EE6WBuCF)"B;&[M5l'ZRrtAB@[XP7qPq
%\uTe+p>p7aJt)-5fk?O>%N0/!k4lE9C8#a<aE\'qe%p!S9Jnl<$HE$G4<Zu22:4@:g0j98)pAZ6Ykc\$6$mj43.0^G\;O.PM%4D-
%OC4QfMPVuR89,Eq>NkBVkk(=R[4O[$.4be"FYUUPkA#$'$R9do;4VEPlN,!@Q4^X(7L0@K>QjVJCGlhS3qBcfL'_]co:UHAaEq2N
%DPtqn&T/1o2CTqW5VpTj-.K56@4k<,^eYWl&5"'>E=s0W$U=qbOlT-b"_?TUaT<k5&mhs3_/=rT#TV7I5f[TKm(lg6CEG0"Rd1lC
%1'A+^CilAK8;KW#N*GVNfTLEG(!JV-ms;l>;@UMNk,%=jg]F%A#I@Km6,>D(nS^;?h%D3R0_sd"e7:mi=Jj2)2jhrG.U#Ju(i?h1
%EKqU7!70j;Q\uZ90?eP178-cR*6=5ZKu%ca5R96])3.U)17b29ICX/KnZ@i=b!IL!R`!JkK:I\sV)cbA;,D=60)V_@VeD_eRHaut
%=>aeY#io/AbrD)P0't6+-lT6_&54?JbW%^hUi2AR3c`$8M1Ua!UN/2@/K"lWH&dBrBV1RU"A@pa+&T0iE8ofq)a\pf$[!i,ZiopH
%5Y-)u1RQ(G@I$82*7T0bWeoBhkV6FnBp4C5B&s.6`\c%2[hq)MBJ1s19Vih=FbYGW[,M:!;5H6[E?bU'C#$]a6Y!r=\*tsN1`o4f
%FBT*AND']o7He`A*HjJ,%LWa2N=La3P)\\j9Wl9MOL77nnMu.2`Q`6"k2RRaAp'c>5&?b18;!W,X`MTN!Y'=.KiCA%F\==m\cJhk
%=qU]9pnMCU<0Vsi7-B7N(bA,c6_G>'%c:\Pgq[g%ho=hWY_?lXd0t(Q=3.Fs)Lt2^l\`_<./o_mY*]e^m_%V,nLG\1Io8oTR<\K0
%/2r7pLe6YuBJ?i14K"kgEHdg_QH"9jn/ND[S^*I5@VI#]K?gT(0kGI^!X:pn.iQVhgdO]0d=qeW%1Fp5o7l$0e3DS?9AsAgRiU'*
%(bF@/5VM@q.Op8O,Y$-j%?I61E8Xfp1H;?YREdJoCg).;K#Wulg*_[7UR_r:>sU;r,$N(mp6^Le(&]Sq`5'7r;k+1spsN#nCNmor
%*MEa!iGdL#*ONm!X9#H=1'eRA$lEXj>S[-$OG`3;=NXV=M5Yq3I),p):5]k*o6*V4(5>N(LmnSF.h2PH'Mm6*dm]'7845jf;*3.Q
%'3qsb@j;D@2$!g+DeMPCki5%a^%=\\T*_^P^_;`c(bHuj32(GCc%R#YQ#k/M6e;P8YMbJ\&#O?Nd.*;24G2/CT;qgN.`Y%YUB<d2
%1$Ca\Ko")&#bj@t=OWY+QJ2FCZje%))`SAP(*[5H+aG&:GU="%f"j&!*#B2=nFh^K]T=(@BHedRPMF9Z%[Q5]N6ZIo`8.X=e+SO:
%\WK(.+54bi(lrqO-e<8R?ViIfl@KTSR#p>Q/-[cc=$AP1&S#BCY[@Af)CH(Tc&Rc2nB_X2NIZT]$,.)t,K;>IUjR"6,Dh>O5V/[+
%Ab!`\>>:1M^uVDV18?li3qrt.D8^RVn0!uDm9C*#q&$QG^rcG\XfT4p%c'sL)`3Yd(;n3;g9JKH(7N#>M@LPZc!XdoKUR"+Dht6[
%NjZnNe`)?G&rMH]0(.F]eX>XiTt;+!/!+#;LB>\@&6<.uoI\&rBPso&#a0NI6[>#ng-WZfq(f1))sinkfI-q<_^SQ;FUVr>`We7f
%UN+0DTo6=u+knb5"r'oBGN@lN^f.TT\Q&]Onbs+9)pR<YE/^O6@o1g9(s9H@<>H.rc',sKo>Yb.E=QUTYZ6Dp[TmVi#'2!gbHnOj
%H`3tZmj&VUIMXjJ+D<IL5=7!g>!@rQ$A,i83kH4apdj+K1_!LC&LsR'h\HDde!WG,(bEEA^.I8J4?OiTo,OURaTt<@3,EU@beDg4
%)7Vn0i87#&L1)V&l;XWr9"\G]Eh.V(1s]$WK$Zk!+_J5^)_iW%9+7U[a6OqlH8&r=8MQE(Qc:cCUQ/h`]oBXYYn7GmfSG8q1f+I?
%DN$qZaGl6/U5"P07^;58gLX!i?%R*fI3^X-U*1Eb<S0bL$2P8:WR(+GLpA(\)14jPL_fG#]?1[pQg:0$1b\DebY]MmVJR.j"^+?$
%9PRGsK1T@la.SLo??(qJ%XngMOCM;MIJ`c6;W;rF5Z*pX_q.mDo+o:M;-\O"juI2'8hg;Xd9Jes6HI!ljuC:aDQDfrL$(e-g2QLC
%hPeP?o],m+q/II-N4+_`:E<OFgNKZE)2e86US>Y(AV-p7Sd[.qf"aU-d_W:j'-drhHn[oe*m>1S`X!_.Y8kJ(:#fmb12:?*3WkCW
%1U7k!,r`u/>eGP+PQs#@1`.I:q?W8]+etdL@:^T^>s'!P0`T(+WlM>DIXTjhSTBm)7/g8#VN:l!6bK7)[`+bsWZm8Q'KtDgfY;e]
%)A9pALlpH.QGLTtBtn.+%A'rkmuC@<E,X(jPS#ii0\),%%I`?pnYm^"OcT\oZUKgT5*"XY&OVE/5fDXLQ0:ks"K,a7FQ@J&8eNLO
%(*K>Kd1q\]V*md?8m#=D](n+cOK`^3M4N]9\iifA85r:=[OCiL@jZp8?i["E<!nO`l+d\Q?<sGV@?A"BmdT^JOr+Yj%mT`lckeIV
%\fP@'pqfLn#h]niM%IS:JhhumPDSe'&2iuONHS[qXMoTPe)j`n9F!rFD-MT?]SHUhR"QZZl/GVL].G2973gfM64g?Mimf?d8'EXC
%"uPrpG-I_a,B9K'W5)M.a$<Zd"LTp/gu/Li/e\i2+Y)peinXlD5=^g!`J<&t?)[h#WC5i)K2f&YErg`60TaThI]!iZ?k0q37M'a$
%n^&bDXpjM7&BHMKV^)reoj!7Z3clhloXtKlK+3F_`ukd..kV,8@sBY+-rNlEr#@pd&Mbb&P1_t_9g\=jY9T!9#TD&"Z`0=(d;]Z6
%6[q50_uN@R\G/]nJTo)ma4k%=:tG/g0HK7CL]OO'lBi1mA!cT8PR%TZVKBW$85`_/V%7P;\56BHiachE_8%#7Wjk>*$HA)lO\j4L
%(MZ>HME)"h(2oJd8TQ<0#2U[:&^.ER/c_5PN2_k*ThJ*m+O^<nG`PegHT.(>Z&p>LnDFah(as2$K30_>FN9IKa.]X=.$'Oa#n7Ge
%E&UFAn<SYn$Z-d#]B>-.V._-PNeZ`]+O2<?aeWU0!%RK`=H4nu_cqn$ZnONMDqN/C0#9,'GS5m8#&Su")O_TiU79lQph;*-SEY4-
%iHFe@U>XRH=)>MR'B>tn8c4h"J=dU3!9l4%@:Yq`a\PBp7?\*7]V]2Z(b.fa6R>]RVAr*G9Qg=pGYKpH\sY5pS!,au0nG%tYI)Gg
%Ae$AfFYhS`0]kL--Y0Od8Sj^>JBaHMJbtlJqcpe;DKP@cH38</$=Z[Ph=?U$/3so@,r?0<S&39!R>c$0#NTQ]FgDJ`n"DNR'//<a
%Nac#s$AAd`N;I0%h9<[Q#FI"c%Y9MfJcOa0`Om`=%LeG5;:$fLqSb-1Cr%5=(.&2])i"K^_f?TRXOB'HGhk!,.S12kq)[M[?U>3*
%ekeZ0o+SH\MJdG>A8'Bm%'?8+o@3kT6p'&m6DJ64&rHm^)72C4&@f5^%)N\a,$TbS@e^nEI.>?9>t;ikE(`QF&+u*:%\^ZAAkoEM
%YfECU)[J0hI,G:Y_;BBh`K*h,6f^$iQKuQ3kb`PhPFlNh_A4!bXtIJ8*-!f',=Wj;lDUOgOK+.ai=`0Nof6+5-pj@s/&-V0+V`sM
%<%qhsk3i>315>";"]pU<'Q\(ugmuC1Ll-(j#;lF:`[Y^hetNaD6hM,_.Fb(),\^*^%CBfecql_l%$e56`6b_r`2HLj8s#i;,rEuC
%&P#2D]'15sUPX.CC;EBsd;_6-)P@_<!!4b:`#rHn/T*F:W.A`%:$/A`/An#/M5((ck@dsO@['UQm?ii!$^SrA;TL9HGD7B'L1GDT
%4!7&6HRI=;)rl+'?:<mV*HC?0>,6fR<0!We\,`DH+9PP\K`N%l8f+(d[.^=I*=aZjKB7"W&Po*+g4or2KY[,e\QQ7E@WMfh(gtOW
%i7e7NphPgY#08\R9d6>;]`TbCjRF(5D[9k!?%2YRfBbO_d<@8EQXW,['Hu;_>n6*9@Oje_[:G0.Tb,3060Mu,,dOIbR*<J+&4N@L
%LtH(cFZu;sQ1fY]iIkWT0uuh8$pGCKVPD%>7'r/:l./0>H4W0rhGE2DrGWDQ((Q:k9\R+YnB(.i.hg;W(S6ei@Zu`7a;##=2X2PE
%fVh0:K\?i'hLC.m-=?)\)g.*_fhArLKc-,N`.3.BP.'X"1u,.<:o7p:(R!0?mssG\(i;M8"MoKn*l'0#3LJYVmcK0PJPj-/N(TEZ
%aj#sp^s0\82EY&DjLn@o5e"YUJK]"Q2-(8E34Q?;MJ5&sYfW!fk=B:Ek?&QX7E_6`N,EY@Zlr!GB,1[]4%rrs<k*"N1fK;m#U,r_
%9!u]KOQ>RqB]/&A*0&a?OJB+R@tJL`Yh8N;Xq6t0q9EYJ,sd]d,GB[\K6J_Q[.PPc5_^U+.n`5V]/cR<7d`R`-G2g,GJRi]no?!4
%n8]_%7a=ZJ:YEpJ,W%%h$(d,b2E$IZP*[DeJX7$ABLkTO\H=TD0e-fq-'!&;<n]8ScKN9QHn7R_Y5"PXMhK656';kAcqoQ$Umh3"
%7%g#(6`WtOrj!071l-,tmZOJW#pi>ZB+cI=nH]Sh3'(i0,u`2cmXR>\l-O:/1Ua*indD/^R[Rp_J#QIi^p'H&R3X1BY"ikq:"&;2
%_WGTt+>Q4$DB-5gn;4$r\d[OLn)+7dK]5i7mc'sO=h<bdkR<s>m4Fj`(?LYeTE7pK%!omS:n#KYY7@o4JjtnH9I$M-C_@?&n9,jZ
%]#UVZ(0s$4aQPp.@>+G%0YsC).*F,Q[H#K,'C,q@X40hN6l3XJ0\V>YS2@nI\e]-l;R-KGI^8WS!u-#Vkr0X,H:SSb4ra`-[s6O6
%TsPEPa+agb7Asd*H=9:8)l>-kd":#g[o@M<jl2+#\3E8t1qHPAM*YQ)ktjZ?;oMe#_gk@T"I=T_+@B.SC1SY.e=.!L*A?qj&jOB@
%&aY-o;WAsPLep=/*OH)_R/;kU+[ZD$s6?9;H'W'Rod[6r!eZjR#``Da-qboLGI@Zc$Ln0"/YYZRKC:jq@F/gc"XXt<rXqWnO`3\3
%`/LjPW'Un%=OGJQ=[Xju4X$?k(olUWe)V8/\g>cTkU%Wb7EFW#n\Nhbq#s5U9qB@8a<<pKJgR6P$lhHd+:GN`$<[W(jd@YSJ:cGU
%F`AR`#1KE]^*o)C"lh.0$3B+pBIe<KPd$fHb;>5mL1AYFfK<,jB*T1gF[>P%<\P&G2S,g*W<hWPf4;ul(Q-=^BmL?YU[i46bd9&-
%N$b6?`SLkF5"s0ZJF[(c!>O>38%C>`nZ?]_r4\Y8nZ>WO-ZP9&cj]NW=Ho'%dUEB2".3:cKSqf:9l-:&Z"8qFJqY(KRH5SakQ;_#
%g]:Hc@eC8_dNlo`Bh'!&*"uNbLiOB1a_>Efclu]>V_B"V&.7QGNdki4`*Uq$G[!0MTNnC&%R2:TV!ShcpU3$tEEp]G&.?u"VN3V1
%kc:)W"`IbCA"s2=k2Rb=i*#4sdBtQj1C4Q9'gu'OiZqhUFJpuLV5PYp!CS\:ab9=h6(#_=le#.K[jrYV>bOGX2m`mGD@:2bc)(6=
%e($mV_.]MH6qB+j>+B^FA&5&mDUn@CM73p#d]"?`@MJhJ$>+W[HqRPa8Mac*qn,0'6O3aiiSk$O]n7Vr9u[W`@FJW4?D1s9o9eF.
%jjJm)&Ve;FjU'@FcK'H5$G*;:9%<Yr1.oLO]Sa2M.rkSUT_UR)o,Jttd(hHlm-m&XQfhk@]abj2)WZKiYJW%USITBmf9oJ[Y53-g
%.l!M4T_V>^`C0_HW(DhiOU-qb!D6r:BJ@$AUqr6]L1V(M@tBba8Td+0i***R,W^*&iISheF>^@=\7'+U2A4#d88"A9oI23Da@9&I
%%rki%k6g6R1a1,.^56[%.8IcG[^GU'V?rJ"M9<IuD<2[.S=RTmDYkp9)($M9Qq\p3dNEH4R15U15q`KQjs*[\L#'_e&>,"7R!]b9
%NUtOp8Y=C"4jWdgo24+n6%IK2I#BB8U#1e-*G;nt6qb+CGT)qlnkcf;DMJWmJ/#=W_'mKM.*TOA(.8VQgd(?X[]u;.^SV5?Nb08,
%.LJk+mtO>p\9Cj0$Q$j*F:"eg"ueN$[4pN5L2`(l40U+F8sYEpN2;H;U:dW7)3h!]KF5@t_mT/>5qn6u(iaAZSWJL"HOH@*!4=N(
%KM;UZmKu?mFHS`<H<C&MW@4^?/m#7cpYAP-0\Ceo)Zpcta.O.XSt0j_N9R<HnZ<")&24A8=H&oQP2=/s5tamC-[6iOdJ1@@n'g:l
%Bl$aa9UJA*@<QpVC/-`n%QP%RY076m("WNnn\fJSfci20[[%a<<jJ*#LEJB44BF7s(k&Hs@]c<nA/$F<R]tdr>,_#92i)L@+'F5q
%;@l`[#*udL_:F/>OgPduUHem'e'U43)&[5TZ&Sp^a,#Y.6uX<i#<<\dNG##B&$oY[,Rbjn,H6gG$"#c5=_p?SX]D)Y`NVj",32*^
%9f./A91!Bf@2;0G#t$,0OjqH-Cg`tm2^[mi8R/TS<ujsTI#uC:1dXjh>oG1;`>CMO^rlRY@f2?6NlK[c>je8#'FW%c=Da0%,m5gS
%%`TM3HBpgNE4a((>:'r^;hhr*-`Bs=7LV9'C&\AZIr[r2Nm/*$"]U<P:nUpcK*IdQaMQ7(Z>=t'5A2;HM0+/$./I50UD@2Ua_c]I
%k[N.O7P6Fm[+'\&G<7kj,QK-V!p&:)"W9X,XEP-[^'B>g$OE_j+!fm(hMh&45TRKRBF"!YcR&#<%Zo3I"eCLcTSmgH@s#HD`-<A$
%gr5Z^H(Pq%(q%.XRp'gg#GB"58k>r%=HE7qGi*&]`oi+^RIrV<4k=2i$RF#B!QOpVHn-o]>]IDq'LQ]eAY!WRh2AT[o3:3lU!uIu
%C_p"SA:&>6D:AX)"I6'@m/iO*NpkBSY#5\V`.>)pReZ*)-F4`Mb%!o"mf=,8I"93s++>gs%i4%>D(7n"^6Ri&n6U4Ag^.0ZLn!0h
%88oAT#%W-kls8+m8W,VgcM@O*=:1.H&-'_4JUs:[#Oh1N(b_+E]Z2:#\fK6X!>O^FJAujVINEJ>1MWma-Y2cAggj6'Z.t2I2I8,#
%g'B.qillqH\OjNP!%pUt.hc2IjbH#26GE"-0nV\'Jo]i.qh7/89;$Qj;V'J36pt\!J8!1ILKG+X*CFQ&)lq4KT/b[W6+P8^&t8!^
%@FG-Epc0\a[UMtP8D"XpjB[er`<kjBbJ;u<o1-*W6lfnWMBL]eLpI+#)p\MKL'b%t@EQDGUt[*.?4>A'ko?`u`H=ec<E1T&j#pA\
%JjpZ2nFLUl_Bre=m"u5B0$!8:KQXV4nF?Di\P@I0>ijR-0%W)sBi=#AI=;N#@/SYL/r9C8*OS<I2(L^4d%H<m:,Jb81a5lR_3r,p
%FIZK0S>8-L:m[78/i;Z>k)"P_FWLa^)KZB%TOj-%[,DQKHg'Q*<J2h`psrak14h=t&utP9"j3C78PtsS)r^?>l:\M\PI_bdr\11T
%B'XJ7KUCn(;A4$uHK$&67DI$:-kRjd,1t8e_cpDu6i_F4@&:5Pi-T$Hc7:J"+8CPU=1p0^bKDR;dcFJ%Lk_\X-D)?m$g7G&bAY$$
%9&h^m3pnr_<r/pH9oEC]9_9ra=t6t`6qR'+19:2B@'=bH]NHbo>J@IGgJRmAeufeI%nAkMn=("h%a..7ml0mKeu8G)"0YgA2j]l]
%TWR$RUZ.PWDM`k_gX-4Dk8->0`@$DGZs@Nk(#H*Z=s^BMVX5*;?FBI,4O\b5!W'".p.Oa1IcVgI=1]<r#4l?,<pMJ2j]^X>8#b_`
%5,&'$/%f-$o\DaEo!$MiYMiKM6'l)HFS&f6kbV?4QMnh+=7L4-=MWaY_bJq?bZZ@,Ko6<Y)im8Sm+TH\I.0r(#)S6%DO=".f9f%a
%M@Qo=9W1(h1OR96cK=rESRa\C/Hah5A%E7>HVC\#Ai"bW+G(dN+et0VLnd:dA*AQf@Tjg[-_bE1ZAjtB-lE=!hZ.'T"s\hkg6s6F
%&q`Lq+eb']LnWTp8<!b2kiUN*$V*-iJKV@NcN>#q(mC%?!@mjoQl)J/X*"j"&ZcHb#=JAL7nUhbQ_GBCPTjS42Aj3s,Bnlr2h3UT
%!08$)b=*u$pLEF_'+#;R`^^/XaQPo)$cD"l9Q1Nf%)dKe:#+]oRP<!fAaq_',^KPLcMR[-\7]9F+!\dQ'@1EP:?L#8(/?7K:&\&%
%gkLQ?M[Z$L!>K$m=>&U4)8m4\OD$MsHkYBbZ!tof8aGN_JBUeO(m:?'e1_^N*nNj^.e*gTlRCghJhR]:5H^)F8ohcVlAWAU$h(@2
%0ocH7N2'glLf"/?'MKZ9GhL1)j<ukNi(HlZ7mec;aW6V@am!>j?!-$IX(3kM(Kir8Lg9fWN@cs'*WB`CT];`D)-^_:oQ40t1'92C
%iOeY$b7#2uWlC>BiCQJFb_Q`i,gSY8kE&aF!gV@DU'V,5q@[.I"T=?61BIWS7KPJioC2K+1[m".L+T=HN-(JM/i3LPAO_j-ORuK4
%I`a]8E^(ij00iZ_$h%#K,4AH",O[FKUA$)o+e208/!BL\MO"La6saW(Nq&F(A],_5qijq)_[^N)3ms-K&)HVJD@O)q8;\7?)Sd^l
%0d&SB*!$rsNW>==BjaK4Wc^T!$>4`G$kk`uX)g8iW"jBV784Ws<FiWj!fC.9!/t.;!0rp&>)4EQPP>[m]e4N'7%W1g?pZdW7pp:S
%Re@a+f4A+.0iEXn)Vij#riHA`.:,0c:XYP]UfO<DLIh@JTVS<7*=!I>FrY$Lg2W3O^>g=n+Z9toY"0KA;6L-?fC7127B!!!4cK`0
%Fs/,1oK'/6UCEKeNH!XKPCpVe8YopsGF.-,"b1$C;[&dCpqL.O-QW"QlH-mn!EuCQ&($\q%mW]R>F9Mq`=T]Oan/@,NgFIf0)b3G
%7'<WK*P@4JfC&culZWAQk]_U#)Oe,X,GHQ*r>tSlY29D*;A0'=](u*te@UGY7.*3>n#?>YWqTK+hk]+m_Smen'V/EiRcQ9E!@mDP
%8qIW/T92mNA5o(&+_:2gN594mCd=dpX(WS+3o5a9/7.bL@k(YG[Z]"qfSWujU(G!$n?%o0!I)2>+t><9MIEISR7W)Sa(]:-HGiTW
%/;*+?,KP#s:7DAT#>-b/a'EqLO0Z+tpK..SO+fl%Z$S8N@>eVo,+GeZAiJ+_$io]3!]))m4slFhYToNX%O'"lj_HJ3kT0:80I_NW
%C-pWCPZSjlPsq2uE.cZ#6d^X^N)Bin;eBaR]bdqQhAhJV)A\8k"d"F^,\9O##aA.J(Y3(I%E[h2G>OSPY1fWt,d0sPC$<5uSAK4X
%9XQ$2OU!8--Jb8SYr)*^,*pC.>/\jn@)OMCiKn"b8FjtKe5CS7(5\k2);Xopb0hP"H&sjmg3?Mi%J#n6NQK@CI,b;^r]5;FJ8&l=
%Hc'qq,spjq,'l;ddIFbl8gt]FGV.bYh^.81H-*M4hs`L';n19pV@,.b/Sj%"+[H:B2^+'-2s(<&<;CU4kulQt5mqp`NU]dW"MM9d
%OX_P?*?>gHT\@@h'fm]#$&RuaKu+*oRUNX+$kn6H0mH(HpN?";!8W`5b0d8h!`ElsBp7=oAr?R,r8&iX4[+L6+_kHJ+lk@E/q%MI
%/^,b;&>jcLnZap"GFYG2'on`-(d(2d1oIcLT:71HZFCZF,+Tjo_,j6F#;ZDP<*tIH)P:l6KFKtnOCkO[O"cKJK:/bY@MJ'\W<1CF
%XRWN?R,n`doh61n+Rs[tO>PQsZEsa2/g`.NRci+.nDn0^b36hsV4g.s^^Me!`MH"rQm^"+JL$%Yd`6k@*KpWR)lAku!;j`g7`:r_
%%<(Mnpr'S?no%gt2]jBj?&>+n.+]7BRN<`^^]ti!e)B>inPB]h9r'KRl)Gbf;3$HZC)5W_#XHVsCT46A&M[8/&<GGiCg0kWf]%dX
%Tk-*?465t1@ie2ql*e`]-Ub7qm,k$I1%AC_lT?mT%3T/HKMjR@2dB2>doJ<r4N.X9MP6J.TKW'+5a\$6_`JM7iH(5Ghit/\r1Pp<
%rr?V+2abi"fp!fl"dW:0'dW#W@VrV1'ZbcaJ'0Cn%d"*oM*rbg:o6f!<bT*S86(F0Z)1FA3LYn]-D&Oa0a@e&B[`h;"&M]O6E+Fq
%P8G1n&`R2UO<PN.(heJ8R'3+$flDf%W#/VUf3,,p(J8_c[!4l1)oj<gK11c7Or141.^Yr7$G3CUjNobM/T];6CR?[T]<#F-AXap'
%5LW;YDj\A=(-NF#Z\8&#n\m$514m&IBegBlF:kP5fsOO[[QuK9&em86"Qaq:@/a6uo]X'\eEAm_FiB<,Wi=B%J\n2i1uE"\l#eHi
%77Rf72.:/qlBlBcM<>Y(ijG[UV6k9SV=`tGXtsKf9TN?oZs8`q8VlLj;)356W5]p.5Vg-fBe]u,OqBr=;t)i_D9@#&P=_5jjo.P:
%`Pd<%<1#*G;^<nmnMH$,klIa3nr_]9;]$##:q>NbW>?V]DK;RH2"O+*aEUc'$%oPtIR:G;OCeefAr0UO33%%];)VF2JZsMZ)=+M$
%`2?j9:?NotN3>OAZDVG&OmkdQ:+^@r!]2Q,QZB'-Qn?\G'2s]"5$_gml)X>BT,'UGcEF+./n';]7R7eB^;FOjOYbBa&AS#sTP3S,
%Oa)cg`Y)48)0j,mL+dEm@cC"An.H/SeRB<5L2R/1hc4gh:1g"$\R/5=PEN9\o=\j[b7JM6mVI^SDV``OZn.rcH'5$)7>TXh[M4ZC
%XSg<QLga2"@5@tL??"8D)C&3?kV+i.7)LR\\g$l<5_XI/"^:%:GTV+qF*npX`>ap_lA__s5Xj#BSZ!YcC*[=X(E\FePDAr6So10I
%ncgLVl_^fUc:rR#?Ye3hgQ^;EpIu`6ns$EGVF05QmE=NuaD]^sn$e_$^IU<Fs6->mg@qIl^B6MWHh.#O9.#HDUXd/;]=>aZ&\;('
%*=50U1//uiRk@d\i-+?)Ee9h!W(\6%.Juu+;hIjpG6ug>o2h^eN[k193-Xc:F^cPO2jau<B0<RUq(qElA'/=/$>MJQaP\h=$($aZ
%bmH61$RtVJM:kkIAJjs>jbck0X%AVsm6lu`iAc!G0]jn.$e-j6bq<V=-PkDVXQna.TQg0jj<qVFa<V&`Bbk&Hb@Bnc<LHt0*S`J-
%A&Lf',.Jb?'+CMkR,C[mc2hQF=U;P[ac&>U(e3f/a-5Jg?$:&6UCe*tOlLNdUF/GY+5U[hb?Q;#Tk$VZ,>0`Y(TVOQ#D"[9Vh8+m
%>TGe&K:[>&l.7^K(i5.r]6`A<?jr4rYj_LCSTt?nIP&^81pnMh^M\pa>;84Gj1#^/Mo2X>Clt:GEp6l9#_JXMiW5AOA['*,ETr'h
%Y5*VqA%8)R?R3*4K1QVkZb[G]%(-Lie&C7,JViZ'#e.8;QQ_*OiAE_e`FNJ+,)&F,;`io78#"qYJe)3d^^VOu?STnac;7=>Gk!a[
%,<d7R4`b*ENh:P`.me7<Bq1fSk.$'?"+=R'Vd2Y!(.*^WB*&c7LR<f,C>8=B/9p1j+kO]'8J6\\L!^iT!Y)_CmR/W30*"J$KG8X:
%Al.nC)2Io6EbiO45O57;+?5`(]u$CZe9O70!6(9I<W6k:]iAI\+fO5D`3YLJMXLW)QE?"UY'di0&9[uV,i;FZjokCtF:9r`H%7fm
%`1/OO4AgiLHrN?nW#DCtf3KW+;u+829L]i3K8rUQ-@jU!K@ubgVh:fH.WNTs2<2UuPs8%VB;ob._1=5Fe4.d&1h;mV:n4?_.WYqk
%]GcRpXTdj1Ygbt@X32KBW9>FL:lZkCr(Bbo\FJ4n:]X1)!lRoX/I'$2FY'kOT+4&BUma&'*ScsYa%A^J##Lh^!@kD^hjoTsXWorp
%3'U[`cQQa+%B8P:G#3?/h,'/9E)\r@EV)4T6T!ed"$0_qFZm`@I+c>F*=RX*9S3i@6AE'rDp>_%L'CJET`HY7$&k6e`$$'A7P["B
%MHB!n6Xlu^7MiajZ8BZ8P+"XYDqc9P'qiKAI-8Vu@L1\.ZU7"**\k^#"dBF`b%)M268<qDBZ)6NFEI=i#d^hJ*BM\InX1:o(=7kn
%:0Il3Tbq(d8Z8`Z@#&`4T#"KEXh[f0NG*Ea%#fQASmrrY+.@:g;j\RA+$l&449dU\CL.X2LOJ@f!lXjG.6^%N%p.\T\\ZV)!iQ[r
%9n8Q*JVL-Yq/_LM;[r9DR@tM$N8U+8YdGC$U4["pUj'jmaV?]FOP>C@K?h!FF12`/Kok)$LE$Du@rW'QP0ZoWOP4R\_?^AFb)s>I
%^t0Us"k%((&/jMIE?JD$BlO\"Pe;HaK^`ACL28u$EBBHk6#Xo:-lsf[6I2,mZun05cuD^-^N8JBciVa2ne^E7"(<fX&8\lO!1<s^
%F,S><j7C^8k<iD8,dd)L"2eGZ&o*^L&:Dh/-fP)Dmp1)f>E1PRGm"!T3?c0E$,9i%;Q9m+83e(!RMH6#6qIAS[8=!j7_cY7qosL?
%hm"CDB4o45ej/;H8W2\W/U'-4\*It3O-B4Z_oHRCX$:<"OQSWo#+f*A03Y2an9bb0\guX.5)m.gnZQl1SM%In9<K^.0?pO:qB=/F
%mro<jnE\rqkrsomHCQY<]c%t$GG1lp`;+C8PloL\K6V0Of0MOK^#L5A%j!*4W?R^]-YY-'/T:#uJsU4@GMDB61nNn-iYLXj"6Nc-
%p!7XDhV8ori`]Df[nT"\d_nNIGR@<"Vs+`T6(Di+ETF]YIOoodFC.Njed'VVa1#m=?]?t\Hl,P;R_%m0Knr`QHBW$^k>$i&]"da<
%O47k!s,NFN'7RPGY9(06FJJed6&Id!%3HAbU>G2BaY`%1KFX1*j2.Q2`s,&j$U6X)oR"1dIZr'2hmCFX^BPc12ufttM[)inNba,A
%Y7LQs,F(ZPP`Kt%kPKF*?9LXt]&J2u0rJ`fF8mZN0'_[6>H1aVjae,JRIHu=>Dp'lp2Pu#8bOuUk:PgSku#Z1%j'0"s-_ZfP;7A_
%H'E>s9Z-UR9=]BbcdR;bLH^G!qd&jkRC39SBl.,\PBH$%WO8iq7N.p[3'3K&6'Cuhq[Qt4i\3@S+Q[L?Lh`<8MipdAnK@f$n26^#
%qL-WChCBOY32Gn9cY:pb2bD,Q(Z(*LpG`*E/[_RqiVep&j`f;<eK+V0;=RQ4qeq4jId'p`LBRS254Thf&Wf6n1rU.'1m\3*\=j4V
%<I-Zr;TUashdcY0)LpWG-TNiH8iW(M^d7_WDM_ceA(]FR:a%][/m0fuo]6q%8P2L4Ga\.hXX*F?_Xd]:GM`5?M]oIudGDluR6H>;
%rpUHe:]:n)n2&Pn_a"(C!rV"!rqX$Eb_JCF\Gl3Js7r;%bh:n5pST;DLP4YXlXRJpQ?]_51M,Yg[oT(MQ6OR;![./`D3`cRXA75s
%9Y,%;joU@?qOA(:YX"A%eBj`X?q6h>M5Y`#8>Mu`/$`B"[N[kG&u,bpqAH3)dcq'Q%l.Qd6q="Z_Os/.p:=S:/t]'lM"R2Nf2__G
%KeJ:Zr;E(`5Q6K@Jn8?_hjTj>*l+@`*kg;+5s""%PPVOJ56L\VFP!oVA:RQ(:ktt>cE_maO(oOa"9iqrr,,@^EGqAtlN2"I"'92:
%94-P$q26cn?/bOuN(UeWie@;p>qJu@\3a(>g.b)VV:9Yq!Cmf#_Q0""\?<Y#rMl_u9Sk5UoiCC3!OsG`VFWE[.\u>gA#/N9O%_JV
%&(jp-U]dO!DbjJUh_c4YEY[0%X8IFVY?OL'RLAhc8JHJ\A`Zd2R4%-o/_#,L9P76nZc4o3am;tFGnZNI,?.!fhdu/#KG9]k9Zq70
%!pe8=HC%)pS]8IGPfRs6*c[+O?X_u,F`'k671$+X"3#&)6CHn+;f\VlO+d8Y*5co:GB"gVEm:IXok63N,XB7(cg,ol4HX'A4#/'7
%'h`+4V0*@_3'#^DV=7)OhRcmmHDe%WMmYIjl3N.-Yigi)ERP8#f>QGNm8]dCQ'T66c'"=)S(APAC>t0Jd>9epdX:-gR8po+.$Hc9
%D%J-r(/E&Q3AuY(=Ym&C_=_U0f;H/IQOTP*/_s<s'mR(kmUB.Jl4ppQqCj.H9%?SaQ(8oUKTfA"f.1'BS<ehod+s>p66Hq_\*.(p
%r+3R.$El#%hELEIN/Q67B!oS>MUguMU]ZUX@C=an1Rm+8raM$:WI+g5\cetBMO]N>r1#3$-u4NgQ-QK*k3<+]bDu8*+=7t4-L$2l
%<4nM6_;_a]Z[73i[83sT'Nn-IXl?T]CEfU(Q\bl<Cb!%\e;88k$nY8b;YStQ>I9%5L!=,SA]kmO$ba9:`O-)MAn,o1&$f=VlUM#)
%d$R5$<r8$hX]QqrCf2)c'3^0#EJBan,Ym<%Q:>f`k#F\rRl4+-/ge`>Sr$3K&pR43j%L%\.86\aK=.<]^f`IIA_+>_^T=9]nR2@I
%^Nrfdc,5I>j7tZ,La:]Snsp)W&*mK7Pf1O5_qk.qs):FW<SQU]mbgs&6gji1F=Y,LA)Q)3_c/#se$"bi.1MQ.FcmNrp-eF0-&s-"
%gPfIp2X/gsau[Gj=/#`7UfEA#""Nu1X<J;raX,P:,hCJt'>)U-.1oY/k+u%:e@2&,TE4C/V3"6+U#<*;-,d-C6pnZ=#gR@(\omW0
%n;)$.?"6H:c=,s]Pe;k!ZSeR*X:_O[\69flYQI`.pq^p_lbq1d>d[u*j2+"1/I0#r8?<bZXY_P8TNFNLbK9hK3n-/KpX@/ge(3Fb
%V;/7+/a-7^=bWkD6n=EHW)R4+/tmF6RN,er-?RfYLE8!_jN\BgP6r6o]p<22l#nc.Y$riO)%r8/p4Wl2N@RB63:r&mJ#)"s]\J27
%/@5,n]8?[tnq'uAd8!<3ELen,YS>5+3Jra2Z>K5EK=MKOfQekgpuS!NM[.5oaM09?QY<\?+VS-gpMm7apF?L+Y<q#>&spbDQ;BC$
%6)qe9l4/qK93%B745Y.5]EHqtq_J,!M3WC(6L)Z\7BrqkMUH$L^F24n6]mL-^)f\/C;_-\^)@Ik\ms,fZn-Z'diV/8knWmT)V"s>
%Krl"EW%@(j.MuGAZkSPojde8X;+(<'0`9Nuco=UW[64O/.N1&L@_#JZaun#alB73lIeV\jQ,`Q;a'o%V!hnc)1J!h3=*6J@h;6ks
%>=t_X!nL7Z3P4BU=K,7EckG3o0'e;YE86ER:)+:S?S,nE_N]]1QsKp-Zj&1^?=+\r(PjcbBV8.imCSa;;Q7XT4e(6ip2[DhdnJqm
%6Bl'?8]>Dp]FJj2HKmRBong7i;am8?POr7=c:`/.qq=?t$r("0*Mj7ZLQbbBFA8_\6]=:VC_l?4<1[;$"#FQ8ZVkp/2r$0Gh)nf/
%C@"[dk1j5&#?7<^qM%F;.im.PW`0bgp9Pebq">N(JlS71`lA]0H0W`43$`LI8C6"k%-qHI87ZPBS"I?T7)a4@mQFf!@d.+5N`B-e
%A"*JUN3T3MU"'*<D=@_:l=sU3$Rapt#@Kq[--;O\dA,29BZ*dp>S).$?$</Van.LIJ&FMpP&6uAF>)F8)3YNQ=N5ZQZ-un//LWSm
%(oqeZ`_trfCWr!lCqGp$ooa&ggU_Vg(mr-cHZX.tgVgu,1LG9*4^sP5=?OnX%*kc<II!KDUSEa\\bNa5)ii:nQ56)DW3P%BR3*Mm
%3P*])#Sq/KLS\"V;Pn"V*eDqNIC08L=INNc,b%";bI-Dg\?mMk=%^2bCkl&K-XBFu%hmZP2eGjcA>T4^=75c1D5>fU?)s_?,ur\H
%WB5osl3]7S1$dW#IO-VlO`&Xj:,?^lNn=07idMmQ]1:tIZ9N2e1E-ZK"N,]0Hoc`Ja?$`R1;iuu;M706s+Le%P?;Ff&0AbO>s/(b
%A&X=*7kJSYnEX%tj68=Ol/Cqp)TMRVZlRsb]V$ho&[V-6/h3[!IZt`W0-%K*oHcQBTFM)?,.gZY2k&Ea*'SETJCMqSkr!X`A&Sqh
%oX8trieR0#Q]qD5;(l*7QEuP&FW&`jFknmDR[S#`A-5Q*Km?3YdX\u)ZfGm4hHD2cm$A+C:%b;mNgF@t6.Y/G:h>Eu6mT0e%Z?++
%o1>7l<EjKC,X`OP6?idL72,MGfk\GWeX+ZpU9s6D.W4sA:0pJo[F,gZ'Ce5-($A=:Q0qCtUb"P;3@FNFBlqiC-WdZQ[G0ce9"h1Z
%Hk_clJR`#(cA[pN0r`:]-J0Uu)hJO;eQVY@jt_U@Ogc9UJt0B4k^$:"dDKi>'L5(Kefe:ol71#2La#Ch\5e$\mB,ocE-)7!.e2,6
%P[Ok7&e+*I7p2-$99b8h,_iS1CP[FH2/8;?b-uII>nbkI'4$At\X?+t\?5.e*9a3I=K`q4$<e8FSYjm>Pb0Ef*sih;a>5Jhd@q;4
%g2T:!pKqC;Z!"k*94O@;iHVA=qZ(LK.mm$aF<N68RisZ4(.R[=Y,d>PA#uq1EpD;"O3+iUcl+$E%!_FI^\5#rYD);.)#P?@i$D@S
%iV:ZHEI_=%(N5d`XI:MU\%si!N:W?lKP282*NqGclRn2hUcoL`]c78T.=h2fgDt'p"S^@`m%ZP#Y&TSClrr,Z;GQ0C#Sm5":"_"i
%89PU?S:N*6djMo;IcL;2N.8e9<p"<2.q$IuE#O>4;A9dLpMa&Q-S:$JekY%V2;9!sXS^A@bTUe<eM2fc!Ji?_@E".X*?qC@!jG[$
%7:^`tBdOZD<\\dh^2U(Sno8M>_!T[Z"-KSa1&nfgb\dldp^p)/>g,EcG/FL>nHJ/>PU;<e:o&#LZnS4mEG4+-/_rd$Z_l5s$/cZ:
%FriROUA\f;05fWj7I_H'*&,G2c("GpU,?9rN:"0aWr]VnF:rOV/hKO_-o=YHP!3]>Wo->bNMsJTFc@pU4B]`@oR1$X9%?LC2er6\
%c<FX[[JjJ3boc&$*8rgm36*%&.Rj%kg0';j?&kbpkQ!HWdb)C[=PFD::-9;TE+8(V<hjW3r+^gFX(YI3C-Q)L;CU2F9!LbGDs\9;
%R\oh!'25rl73+p&8m/&0>*qLDU?C.B-@FFHs#'t^F7G`RDa?b!b=cD%I9Y,Wk"V*_Tb*`W/P',4DY#_D$(FR5a2?pINj>$?-,_-c
%YFXn<#0-7M?fS$PVoHE_"?RCp$"B,-!9W)@lXJWpAYL,d*M=a-@@ai8Ue)>W\3uZA51mLYAWd^_4Q"6QLWl#&%4PuLmC."]Ocd@b
%*CP-6`3>2jhp+fQ9_)n)6NB`;6k**Pg5pKe-pcE?F%sNH.^Ce@PF@d+'f+4d/2jr3<cJc`=^14[B>N#_kI814"LEJ_QK,ia,DT@m
%QmP)Y7R3WX0dL]_$"6FPj\,o"8pLb<DKEI%"`MNTYp%a^FQS0SPYO![1hC4M2;7:9K%$V'$.6ejB`3;0Y6e7RKYPB^Kt@PI7e!?b
%=pV.-P.n'a@i=(1ni19?mXoXL:XGL([4H8:Y5'5jAeD6aZN,i"S':rMJi*9N:gHT>Fdn?5V)@0E7A0?LfS-"JGl4<L>]ZY!I9c?L
%kYA/YcsbA)4)LA%f2sGn/<73&r/2d78lD%S?%+1*EnhdqV3S+cLeC5(Z0R_A7NG(g*(%-37Z_r"'.V+B^U@HX7`h+>XR[@(DC!>N
%K'6*:.>b#p^Lt9*m?io0LBaGV^i1Eq65Dg_Uf1@XdYCBU`!-ShfIQt,8CL#[Z>Q3k=hRLWP/llL@h!])<(KH/Bh3lW:o#dnls_,F
%9TTm61_j;tX,Ap]BU`9A33X^4`[,];YZt[*OE)NZ[qn[n;Fe?]HG^mQ]l.uEg?H/g(;YoeWe_CH1aT_b(lIct)*2<F#iBXYnn4Ze
%f`q_2Y<bB.NJQbgq6m7]^a?aTXfII%SSEUL8:<_Td]hj!doM/Tjgj`_?(Pr9@)^:K-"Zd/9E/Ub^:otN2a0pYr&uUP-SX4W_,?4h
%W.mj?TJc9sUipQhO\s_bPD\*E8I1QB7OtY,iia"c_%g,)0lAu@CaCWiUTZ.k[[If<e@2mJ;`7)l@@/goWn;$/P"OCX`L:rOJjmb/
%BJ@,(GrOF5+iG3G>nIa!9p:8Dgs]K`E@N,)[#HL_%9K>f,d5RlbR!6hnLP8]'U7j>g8*:5[A[Z?$,W+(@E[,&r9iYLf$2fF_+dHD
%of&rNAp[kIYEuqhT?:O%5F17E*Po3lSJpKZeK&(L&4j;WMD-&k1=Fgoq9":DCQnAj&8[IF.J\T^acB$q%2W_bLYB%&7?uU/Ha`'b
%YAld"$P^B$Ub_4XGFHPaC(&E+X;h1,l,K2%4<K]c-Y\LlkC,pm;Cg`+lEaS27K6h`o3RZk6\2nYVn-#Ig@m1%k+os?T(D78QppRL
%'@pa>d1(0Thc[TsUH\u=[e[rHf42/Ckme<U_rk(naWa`W>OV-DWQqO4*NFI=ehkP+8X,l;AOc!(pA5;/][#1pNp$$PS5&3RQV5@M
%2KTlu#HPf(VF$.I/N1e21ugfhY(uVG>BL-Za$=.^M,`faRV*GA6s``-&REmfl1Q'V,HIs?$]lKsm_j8"NgQ@_(FKi589JHZE9DlW
%@.pi-W(BSIT)FNe"C4]W(E]]j3Zf<H@Q6n3*Eu&jqZdI.8*lZ<cRiB#)V\ouZ/eMM"e<Cn3>?bR<%,#$Xd7/&14&Pm=L2R#7WjEj
%HbS???Ioih+*i3O<Ko(M+cm#0g=g\CaLEb?ZsC+[)[fKes23^Yn;t@Eig]=a_\]L4p5]3GINE!#9@gN3LhJYaU'g/aU-bm9S.h!a
%PH+NlOM^Y%Nj]%:XR*9j(hGTtM7DuCP19H(AU'7&B+E`+=5^k?3I"]aCHf/g+>ZDA*TWj`U!#Kr7d[MAR]n?3gDFJ#'Y1EJ5=K1u
%N<L0SJ$9M91G<QdA#BDb/s=t=E`'k?2"nB&P6"]E?_"T&h/]n,:d0^f5hM\[\FebgKdm5)=*_:#Fap_`YB/?OA]DJ8LQTRK7D@,[
%j19;s1:;`]Js$:*U1g@d.a%0J/\?')f2gEc;n<7OU.B;(>U8/ZP+?qT%V*+=mPGYg/3/lO*W9E\UVUSP1gjnu$]bXHTPk8lk33rB
%FW\5Y4QXS9KSEtTS.o'r\<",m-aaFnCSj(KQgGfugM<:on0%Dl3\io:[_$U_]SRUshCSrhMlkhUaVQsa*#52.L*-OIXZOQSkB#T(
%G3<H!Wde*.L(pJg'df2b\@]/UF:b-Vf@/@5R#R3e[PYVN]hh(:"$&l31VX[6=qtHfH#m3aVddnf4.!BK-^rI5B3H6lpQVIA4h3Y_
%<DjjgMth!XDDRJTCJISa`6gZI9P0C/]+7WLboIVnGAs0tWLJf&RZhJ4hk%*iOG;829ik$=dQ.)iWT4$tHj(TR,c`Be)>ak+f!p/"
%?*,lNS.rm=E2@.?-1m&>=Rc'P+_dKOCq@,Xh96f\=L(iT_SAm=J@7fsO)&Mo'F?Y)I-n'':lD0_g$Ue8n[d*FW*&tAj_O\p6j^)?
%ga=T!YJqo1N,_Z;%;"G?OXM:seo#UsF0,rhBf5&Z@I36jV<l_Z/W#t)9LE5"8c%6aCRI7^]+CHRNN(=]Qh'8(6X4cWQOL`64,Xd.
%-\ImCpm6dq+=TP!c&Yc3kL4gd17;pEj)`.U191\R(=]O)75^G'+SDYHc)ouCY%eX!APkiEF1Rbd29(E;'`C>*$@oLdR;E8p5-JO5
%oK:Yjg`O2iEnOg$8/DjkIquj5Y"gt4Ir%l(RBcg1j.TpS!=)+Af5%FHoS+`"B'ShT])I\V](hSk0AuQeVeU$]7*RN0-WFa/l&I^1
%YA'IZ7jq+A[9F\E:M."4F3shE.,dt!65c-**MuggC'1l^%Td_@U8D=d-nuNfWqM@KVa[8IGC<p"VJ1)AAe/BOB0io5[`,AF29W]A
%k)_1WNmdU(o2-s*GPg_>e6G>pas%_AI&bpTS?bSVR,YE#5&A2?Nn3Sr:K3n+Dd1qUlK;]\gc2_M3I>qSgp%WnASb5VJEnQ9]I\%F
%>DPk8g$c.6M8;+p:gtXrYN="u5Ou_Xr;:b]$C$M>D7Y4j]^/]E-Dc#p<,+phC$qjoLZh9e.8C6,K#lqkd5bBF!i-a/T8"J+.qCH(
%cl6"fk[R8VgLR9AZkqQdQp#PYijHVsJF)$0<Eb\Fga>kL;dX>Inura98u-Xd.rd(5l2"kV4587sT.]%&@oENB8F;(nX<AK:m#^eP
%CP$,eXm\gXa80n@WEQsb*<K&Ihg>aC[,.7L+#m3S&F42RiZ&.+.c;#L.##B$=ql*7PX.lAV+@HO-&u&l?ta6^(K9gdpI/V:P%q>&
%-*67oRNuEM?bAe9ZhiT,(AEdI@qX5q(X%"=BjH"u4b[,kB*!S65q6:J,<L>bO]qD;2(s*OGaffF)+A:dYj@0L9&diWPIRt;F=X_G
%9lOj5_n3upl4;,;p(4lcM#Y3OBlrhb!l0Guk-+1b2*G>Gjls/<]bg"A.o3)$I?[7`FX2!FBCdfg5hXDg(PAQnE:?;`VJ11C>=ULr
%8AFJd-Vd>+!bB(g9[*VS\Oh3Mg#tC(j'lp4KNR"^p6VXWqu4!@Ug1Bk)0(]s[7^KVDnKUUN)=C$`H](sSulA!PrjBMd]gs<h"k>)
%eP,IJZ0jK0mE3M+juV!1bDV.4(!"4t5OHdt$oU<QD>bn'pQ)JM)^Eg62T/5Z*13O`UIQ^X.1mQ5=LmEi"]FDS)X^/1gCn!mV4elF
%_%Sh803P[(&o^j2gKYP`T(X*SR#_3W7O,n+mOYEIWC\&+Sclt&H.=rQ3_n?WXt%E%<>m0$P5;(\*@jsl;\]nYs*^:+"<G]j@T'":
%l+8E(c^)_]Uq+KC+4i(pH!9L_`0U$F=K@"qSqG5J_L0h>,nMV>s74H=]p't-^(:344qG?=l78ijDn8Q.Q"jI*<-aon/0s>cBgM6%
%XNNXSf9=$+>YJ*&fN4CT8tm$Kaar<j-`D9u*RPOtGd,]`[85]MdNZ*fj/;eeom,WnRo=e8olJF!%'o249KCoPKJfFgf865Dh1DAC
%-eVKH;N70pZKaeG:"E01DB(/8!s)3F!Lt(6m-'sBVJ#P2j,[0GG56tag:kZeQ2&sEe`\&JA]tkdb*k_pB'jW.87l)*%@J#o4IRu[
%d<&$[+0(cp,I-XZ]N];Lo/HrZ_'%^WSWK-%J!C!j9-^5>h(9\6+AO"_9mITt*)Vi@[FHcNqQGnD$,lb7"^G%B75=jM@Qo??":enX
%C\q[!5RdY297M$?A5I855q'g?)(K4l"YcL0!k#OD(-)5_BU@kU9_/r`)U7DOm&1BkFK&N.`Ul+D1uE6<cHT?TI=@;;T$rOBmH/%$
%[^G$Wa3.5;XZ@EN&8^^Y#JU$(O_nI=jm#X/p-3i`%e1#RPtQgG3OVZ,(0%H66E+e"'dmiF9Z^QhU=ucuFMT'cff4hgMqM?lZFCP"
%-%0$UOSJkl<>frMHWrp1?i2maVpC.ZfoS4R.hFmgEbUD;$Q`jOFLWJuCa#\6@@N\)j_[ebPQo=mjSDs2,[!+:RSn+QSK3<N(d2/)
%mL;2F"ZN(gl""i`Q5TbK8A#YVe@H;tfL5eRpsMmEPSVC3Kj!GXXck%MCG1EZO0TGfI=,[C?foPhZ&-bEf=_[8Y-dhC($6gm>/T[k
%)i[uC4m6Pj=cLT,DGLn1`U;[\(t'""<6KKC[l+*m(kjMIjs!W3X/nii<;gneWc'/F3Vjb[Q-nhj3f?AW1gTS"1+#-D"oKNZ]<.0n
%UJ4_:M,Zf%WHimSoD\&Q.%]#=aXSDg/uq5ABbXHJ,jM3's,DA,G.GPRPg.P#j>2m0p8_%Xg-%k0eRh@sS4OstGmR<XW:R9Y:&<\G
%k"$UPWX%NuFQF(.;Rdln1:P$3V)GWh0<0I6W!?dBL3lj9=k<"Q/P@Y[>nnccFT4dqGL!/h"Ncl_g/*BC\D$LUs2_?7(N1BJgV4%f
%K^r7\2Na]1Jk;4\:]6Z5"g$>!GO.!M;tptO\?*b$o8bdaX.R\ffZ7.u<9paV0)rDU1-1O..>=+=8oOnnYi/dU>"R9D_JrQk)*\e!
%acTH;lY\Hs/7tW[W7IQLdKU[rX/eLLFQ^k"S@_cJBV*IA:W[TW6Z!0.lZQQVK@Zsa4_q`./s7$CcKK9@9_,`e5Hm_:?<Tj=Xq%gH
%Ybc#.&t$[?>Cs")gMBMZ`Yba3"S#>;I7%q!?Dt%l:b2Ge7)o+Jmf2p9_WZDh&@8H?M'a\2bu+q>#o6moOXqG<O_g"OaZ@nMb[$5h
%eWc4q"T6BI_6]+1.O+9j`P"eObVj8"^.j)LL(hs#d+Bm.=Ug"K+?K"ooP,-.&U+*;Q_4?]J=WJuhd"D:DdAJ2)Srm[^,jspPhhB_
%Ws$)i03[(7_SIlZ#Pu]cr170KnO2\_*5%s4SL+5!5#Zt]ce8rTP#^!2C0&/K-0@MT5h<I">,\*`km,]S9j^^@R_H'rMc5njRamli
%3XJFsdQ5/"&u3"X3T4Td$m'loe."EN#WmoR)p+o89;V_hlgVG1![gi&hCoY7k.d=sLsC:%g"86+aa+c0]ep2F<pOiZ1lcB!D/',O
%!pho($@)s.mJ;R$j-s!'6P6REN2hIa>m3NV(!@\c>LKODRn=Ou;OG'c3p3Of=u\X=`i;/Zk*9MXFLHe9Nh4kh]oa:F0s<.7B^Q.O
%cG(7)`T5P%*K$$1pFAbAJ3t(*e+"6=\5EJg&W3[o[=]Okl?RG.GgqPO!X;s@^9eW1!G=4_]j68PQd.IU@+o>u/HP`e:+`?OO?hWm
%3rc:??,UiL6IHT6B"PiHTaDDdXV`AA_'=(^$t-qo?*(Yf!mFgNPLCM`V,mm28CI`-l@-'*/B*/mb2-!KKjc&gV#jZSV_%.IV^30f
%*s%@mcNEfed_6cH-)/=35DZC7Mr%tZeG18EA.Ld![d;(G#m8[T#(rZj-5?qsW>MBf[mi3T[VnWhTFG81):1<8,fhhpY#oVEADbe-
%Y+kc-94"^2?O\umD+l;PM#oW$j0F0&e<[;H5-s[X;:nFD:2SV1^^?j:Gc8&VP28!ea^^6S1L?@j6dqgi"okE4[6_muIf(ZDCH;ZM
%[>7ED&R'Vq&Hh!j#`g+noTbg<eNVFsiA<qDXqNS,"9T5$Q7p-=1sr4nW8qt0%;CWAZcPZTdMA&UC9C>f"Yr7p>Gm@>Z0[Cdd(2Ji
%l4U\D;\d>WCLgI:kRKs<-1sBeXg:6tcaOun+?kC;q#(p5:99DgY!UU'2m>^=Gq7U+O&M48E$@7:O?J)YgsG&omcYYMe]n@jF6)/,
%ZgLngRj*A/?*&0N:4%6EJqR)4BFUk<cW==1/(-fF/;ikp4,@ms+:!A.UQUG(W?:B-?EV?8!7ki);8a6a]X%`Js+UbX?HjcsIPW+a
%-g;'c:^Kp`AM)G2cq1sWgR:1hBt\jn][X$ZE`TTM;1W>]hFtHDAgals]FBls_%S\hQ'Ep6:5E,^)[:b[_<F5aGBLhY*Rh*W/gmD9
%m5`s=8QDqlTWTMF>50!63G"?;c;N&d*ceVKG%T=nHL.po5hKS[KY@JcO`XI3T+&VlUNrh?-@f<"Ul6p#,o8irc.rh`Lo7PTk4GrK
%1#+HM5Z@iq.`sERo`M]pBg8\6#BSGl_-&R+P)-`8=BJb=p*k7%id(8n]8^q0C:==+_k-9b8PBlc&Q0=A"apPCS3lP8=sX!X6FD!i
%@"pQaV<HC&[`W6J9R16Qc#6^ESFmKt8a3gl?%F,\&"SQp<DAL;NLOaT"NM2S'W)]V*B=Y8*p,-k:@)GLp0Om9[k**S'DP!t3IA*%
%*B/-sA):.XFPgR`Qj)6G?Ic'5>T-<;d60/B&(u%XVrR50b*Q*,ncL!K#oBYF?1:i]C`E1a$#f(f\=KPf@8nM>2$,h#E#RqDTkuJO
%iH,>8/T$HYl2Dkbc]et)Curj'A3f'BgVR'GQq*QdZU<=q)\34WYn+Gj'PI_G(:kW_nSSORIjEA9*-\@`0HJ27*$lpU3f3LD8Fcat
%%jPDAic%:q=5:c,+@5kXU2ouV\Cfjf2/dkK]"]Q*TAc:=<r?^;o9-nm,I,FYT!>nhl4't-n\Bl>\D6:@2f'E@'3e/Y8b9AK$AOBh
%F*pn0eLBYj,TImMe[_;E%MUDMM&[TLjf993EA<".86sh(Ou4*?6>Q<.E2Zq%,$8@&LXnYJ&dCBMJ;(g_S:!cCqh6n4j,X<ME1.$j
%CfZ#js5K6?@9gfg86+C7>q->,i.Zb.Vmo82&Zqt*cRY_`raIB8ZU>%[<eR@nFZ"j:LAPU6eP'sjm-kS<>,eq%c+^ATdObP^am`ku
%N^l/?h3`u'h_RPHn9ZQ0Jg)()VIl<FCb3;F[I-i1nLFtn@VZXs`b[9ZCo)V;MnY7gS6k'nFH`*t`5cha5Z2:rV"HYo3EtPc/su=j
%LCF7Bi="a;o&-f4m.dUHs2,o@Ij663$#]TUpl;Ym!];2Xn7]We/(jEbgZ_YZ<3@Cd!8CH_.WZ]NF\2:.AXkmipbl:8$u@,5?dLtN
%28Qo'm*DiG(-*n;^?1bXou[s6)%QMr/o+L<XRVsP`FH"]0Uq-QT@CIK;e=-Y!*iN;_elDMR4]@Wm363OMSJ)K/P_FiGS[cA.Qe2s
%KfU^>>3]5P]N@^VG,frEU,GuMDe<8)Ar)4UA[%s/+cDP3oK6tb%D.3L:"['bhq@`S'_1>=D`dIJM\.Db2IBW,DjKb7g7E0b/n8J(
%1>*uI9PR)aagb>KH<UIH]pM+j&5j/rQIT03fgj<F=L))dO_jJZ/XZpVAt8fc!LI?Y5\AcCd2\=<J:jOu_qsqqA0iT6>Ka$mBttAc
%fS+49bcJ#:cK%Jhg)hkY]M7+PDD\4)>b88kcuZ,H7W/]9%-9qU/X"Q8RQt#Qr,kBJj4W5rR#>Z^$ar@@VFl8Mr1UQJ.S%<4;(Wpt
%AUJ`.&"#*V7guuA"eIH@X<R_u<lGKH?s':6Q'\bh5H4!U^a^AA'k[6<,`?.t'B(glMLld29ko,$f6#YdQ2EmDoS]E+is&Z$!WKS4
%aACj/iuj:%Xi2Q1(t!_Y5m<J;bG`kI\#]E!OCNEH7`$]'hbh!W+7l/taDhM<VGrc;Th`NR/5B`=IX;(:oW(moZt"#r)5/$]odO9E
%M^M0\@Jd?BNe,*>p)JHUBA,+m_\&Hnpl98^*>c+WO#\]82nU6*MEMA<.,";%d9S1V^.r2Nm5jWB+@+LZh([p2Nj^k5[)*/NM.62<
%/-`39DRcWeCZ3/]"6)HV"ZbD.%CEXc(/O:*F.4j68]<NZ:mKt5^iu4'MDu;;1YGODZJgN?#>r0uC2clDWaI;%"#:\Q<HJ1sCAo3A
%S@IX6o>BA.GDIQ&9$B3[^(/0-R&@50.JO\Bcs/%sZL/5Q[25;:&D!tA\"NC[3mM'<.2O#mE.K+Olj][V2YD*Y%Q&+rB$qC`6IAZ^
%WWoQ]WYS$X?;'A+OIeHefhAKHegE`['2t*`0^1iQ=ZX6?Ki"LZE!I-b+MkY2E-]Q+m4ETZbsX=mJ\"kEnqLiXqX02"r<@t/:3E6;
%9#NZ\:a+8a*\)iI/]SkJQZX\rNi?@G_Y09KF8H6Y&[3>LLqmmk#eG*q"<2kXbYc/*!k+`Xf+e`UGV@c2VLb+1n(#o9IpcR2(`NO$
%=Fq_9&>s[/^cTp0_:HVDe'Vj;M-2>C5rEbEhFh$1N(:E.G;RMUc$c_2)j7<Mc5PeLW2Yh._/NU6%4tYiA8njnRn!R7[uc9RdABo?
%\19+jljfU1hmucYmn/_?r:28o>*!gOiq@C+X9fhf]hJf_dda(kOdIklX+&l9a\MNuIPVuDC(CA#YF*NI"Z9oGAeg1fXsDh6c<Pq,
%(G!L^VMp'8DfB=H`i%YOFRFG]FFV'iqC&u(_E!:fYqPQbiK#s)qN(Egs7NMS-*PcAFDZ?2'XtYtkIibdcB#"Bh`Hf;hpWT$pBr?u
%W*t6V:K"#Y[jF,8&L6ILB&-AW].'$q"Z:C;cI35p>Dh?<(INMf$op#k<Ce]i#5,p+aC$T/kZO8!N.Is8-F;DPdCKr>:(s:frS%sY
%%M);?NV'(tJ\j#k3]sCmQUHk2res5Y$1NC$'iMh$U/q(+l,"UI]K-%67),WMl%Z9DWG3c*@LSUgKmE=)#4VcQp.)*Bo4UnpcA!t:
%:Mf86rPP,IfH9!O^AGr0QI.q2[B/GMDXK%B3;Z2pICgG29A.K<ciM3__*j=97RSpT_=Jd0/kk$)O_]lJCXG5#D4E@h\)@a&rnDpM
%BBtgS734X6bN.)QCM,V[417$^oWTt6.Znm+;VTR]Z'#OAg1LgjGo=0s8JXm4G5A?iG[dh")"9[prU!q<rYp5B!!cN_[cSFr(n+YJ
%Tdju>m$b^AJk`[HI[sir^F"u3Niu3Q,gOqTaWS^Zb,Nk5qeYnG2I(1LFne.cS.A)B?YkJs:3O1J?+Bs%h<mYX8rF5),?n;iRPq.&
%G1OF@1XFZRs#3n*]c9t,nF?On!P`IR50TVu$n6g66*U*/#]Rm#Z;`+i66d'caZ!2cbQkP:lJK:Y)l]@P[]ZXP9igD%[[1OdJ3UgC
%V=eOETjdlmgUiH33ctD/4%RCW>m@@eO[M@F,sonc`;&HrNGTWZir"h3T37c=+^o?K//,a"3330k-hUfj(Pac8_iR*SCbSN^<Qa-a
%3t^JQfkfL(X^j8N@A4`Riq2e;;TjUjkaUg8g%9Q+lY_^GP'+8FSt$$8Gg5ZK$8_hZC3G!h\m%.^i$]2SmFD(.dXCZ/o:gW0.u,4=
%aX,*"mZBEr6Zd)8Be!oI^'hT'CJcl^6IB*f3+.e0<\eE6]/N\:61%=J&-O.SftAWZYXgj&334DA9h$+,.8Ks)Xf3CUO+gu?g(-WY
%W7:$qYo[,I!l?I1Bk]Z826/"[3*Em^8>MQSWAo2:3+=Y/BO9:YJo^,49iRFP4Rg`=/5p8cW*2fJ(">`G43qtM5:?"&E0*&?Uaqq;
%&B++/pc+'#;o`qXB!S0(]8pBAPAs]3*is6FPA^"Kq5=;4o%ZV$Kf=!paiMGE1pIc(i*P1eQb!Sp\m@EVY-jfQlp9:q/Ai*qDdE^@
%!PnGm+f^N&g)!e/1gV6Sd8s'LJUja(@bIr1ijmN@_J-AX7Er^d'"p[tbj/6A5n^2!aPL=2.jp^%\)!PVMarR"&@a78kt?U`M%'`F
%Cd"mkO!0Pf%]Ztr']e@T2YXVY\F'oaNH*i4#8daa=Kh4^h/pi=`F8'5]\ncRe=;Jt+RQXiZ`Ku'olS$M@h&kagI=)4$2;tASWqn8
%h.2E:1M_7FA=A4re^OD[UQ`.anD-iss(\`:YH?AOp6<3;q+;?XESpJI[*[:N'%1cf(*SHV;G5hk(8G@ee7.gCX;*NSIk;hmqPh;B
%6T12'LSR$>kkD2=$g@e/FG:@BHS+*fr5pjEAre#?J$bQY$m&k"5::QL,p&?\Co^%"(.9!W`SaB.hKr9L`lP<ZbIDbu>E;0pYFY)L
%SfV6rD3kYZ'bq`Ci=.?P(DHFks6AGK(&-b=X)^ruJ'<Cl8Hnp-Ym&,!90TErpdO!3:[f1Z;9RNeSbB2=1lJ>L")i<&FJPkW(4NjK
%`iHQ;+R)KST#D5.1cDAA"+EeH?](YM6Hn]m]A%9!mH(1H]B]K-lN*5!]rs*uJS>f_\#KSHdFi/U;YJDm2>]bG);9k[\=6-1O>Eq,
%ENto:H<@4i[0]o,*@-nt.TQ`FR'iP>p?auP,cPRZ9mQN[Mu7TF_FOIgkq[R/:SIg`Y--/:^9;>A:[BX9ro(Q`n,BTJA]]CKIp_^a
%[?#pbs$g=ik@HmsY[/P\l\4(fM`Q5M:$[-*BF0IL'rMqfEle5j7WMNmbI`]4JmeNdNqXW:5.kZR@DZ+lM@(skbNW/sUFR*_ph>.8
%+;)AtYq+;)(EZ[D&2kicQg68d1a"Gnkem)CJZ@i>8.NTJV`$\Bg#L,g#M&T2Qr:\A#<meqq]tXJ,jI%N6/bo>A:KgqA\)/H=DFcO
%#=%:F4br+PPQ>sa<X1Kb>AB!dQ2$f8m++m39hui@3+"Jh^?!iR6#pL^+04F#T"b#efC2?qcZAW=QgTV)q.rc#a(^d/g]KUKA)5QX
%1M*ab$0YH*,]AZ)6(9&5jM1/S)XanE!l^OOS*`Kqfs)b+Qp%qWidFt$hYbulR]V=*`3VQ973)r=4V"ir;%YS9AQ2Z*o.`1/b_Ap0
%U01OT]k1(2(cW8(BO]a4PZZOelVK]c;mFhN;'I@HFj>5p7b<RCHG?DT=D&sI!&[m$3^D$5U-[1I1H1/q[bTtlOK64oAf(-iSe!*P
%1HdDOVXCY`lQ_\,=WP+9"X!Q1h"*#.G(MpONRh[PaX+E\BUh-],E1n]4etc<-.Jt]M!P>eQI0As!g7QpG+R1k[\m:us/(Z!/AZ5.
%XTeiB6T=*CoBcuCOmhJ13DGN@H[>!N$WB:9.9\s9,X4]?cR+QR>X0\`b3m61]02n1.VVE^SB^TUXG8d&6UG<6,SWumlFh)G9Y2&"
%B:e^H9Yn#5k8:-p&eMXU9I_,Cpc^mIim7^31.XC:aY=%M8Q.<-`J+FI[NU5^Ad5HSk=/7lZB@E@$nNof6lc.FIdrtT%Hc*/hGZQ.
%3ou5:4B`@?OJg>O_'H#Fou`,)Q=!&rSZHCK:g+BV;M4'MH!]HrQtsh0cf;00>jhW<2[#+oL`_!ZH^-o0Q9^mN-'-;[_sajE?MJ.X
%\Pdkqj`I656*_g;lV-;mkQ_i#(JOM#&_rC8]#S^:>/l<@Xm)WJ.Y7]3J+!-G^V";?I^F.c@AZiGSNm%iqibCZT:#U"ro%K*i"a-Z
%c&W[V/1\,1^=%;/#j1;jEqW46l("h;-UNrl=V:s=JZGJrGH*gkTYf16`"dp!NkTA^-pUGIW]Dl2/>l7b=7&X\ZTP-b0T"\4kt<LS
%l6#7QCegPTS893cQkb^W9eL60euJ)gC$KdcC%2(>ZNUY!s%_ln>ES?3<'c.aB1Wq%5_"SO`E#!aOAmp:QOkHt'\/0E;K[ZWMYS.7
%<Zk0]YNH0TjDtr0F+$UqV@Rac?9$=SAsdtT^s<?dL?cjVi<OM3AZ:siYZ=]3E8,P<hG!@YZg`/*FGO"E85pst@bcnI2YMc,X30[a
%)3p?"mQ&iiC]KQ=]q/1olRJIgcTT&;[6=;6O7fF92rRS(%?/JNe!_hQ\B.l=3PO#@Z=C;eX*C)::GHr,7CbMFREbtoiC5sKAgM]a
%am-D8Q[N1+<NiuRnSVKJZRXIG#E2MW<peGQ\?%`H1SHMBE;+SLc5Mt.0Zk^iV6to1_7-8HiuNjE\9C.2760n#I9J'qcUnEg\X:AX
%^DbWGIb9+,ga\tQZgX]=5,AV5;fF&=J9l?GX#G&DjL&UPfA.UVAm/k&'1Zn*_(%5D;tZ:6%O@+1iZEF.j'HckV[kRjl;/4-[0;T,
%$>c_oQ-$@e-iKp2lK+24Lk(Ce:t9ToJ5YZ5Z.B9K$bAWLr\fb6Qb5;;O)1WG,b:KK3ZfZV/sc:/0J,33Q\lPnH6Ym>B%;2E(mjIP
%Sue6edRg39DJitked3I`QUeCG?HIb>o(:ejNr=a$+1hbqlN#qeCsP[#]J;?[&hc'`+n^0#T%1M<fRQMk.MNo+Qg*2i*7l6dB>"uj
%C:I!>`F9nj?mjqZU>^t<V&1M8]O[;&jDL&B,*MfJ1,K0PEeBgEE\c-E^2gC2T09GE3,DSB4nS$KY)im9W7BhiUI!4Ze>jm0$H:%l
%qdsRrm_VJ/fF&MRlQOE_/Fudu\](jU_@Z"jgG,^8FkC]^>_LR%GeAV\<G+#d+H'I4kh68mkN]QcA,YX"nu]D]k7j^C;K0:?$C469
%ibU"p5rBj.GH9XAW1[`/N"2VemB)feKn=/EBj;.S2c$)R:JLL.l]s>h\.Bc?o3P*o_So/PC'O;65R#k*,f?kJ[fS`>8D13M+aK\T
%?HVYL[pT5!;:gjVkqse9/iAD8>jC`%;+''<:7`jQ0eB[CeOT;Uo@CRqUEB:c?K';(BSuQk4;o3/9P[1"X(:n!;nM;B1TtYogm)`&
%^-X!F!hh^c3eLrHa0UKRX\`S&97%;nQrI-)S-H,km+Y=FV*$%=9(0Ud8!aF%Tjc(/8uA\+-5`mi2UuJH=J1s"pH8@.20s4MeO0b1
%_ZLk):ZiNYO90D<(!R1cX/8+5\1t_1ZV3#-bU7/u+,<[A!bV/D(rH35+8tTSKMSm9?o1<A;b(1K71)VMQ.;K0e@&Ig#&BM^aKFQp
%`UFPtNFG*sQtS`cG'e+YnWBV`jIha4MaYbM."h459)E*!4@<-E4=9idp`<f-n.ha0+fH0>+,AYsRn4lo.Ip\GX^<1[g,)eQj2_ss
%KW)!I@ATZSd"FlblC>,5j:mUoUdCdrb#VOBc@Iq(CC]l!$;l0Nj:a7^6$J[=!5C:W1>$QGc.;5[nXDj6B<m5R2I26j]b8->QoTiU
%P4pcp[is`O<4-&@]%<.7$*R(Fr!A=>Of&%G2p'*h[;3RW]S@6uB)=PTnZmlTZn")[&0`-%S]OgJ\nGha`p?$uPe.9udZC,pm0QP)
%C3>-Y<[Q;;]9+-_'[Va`4e*X,bASGl5QM`/f*lgn<.<l4*t9f-i:+0nMjGBJ]Z,<b/kmdd)?)MBm)-Voo\Q+Y:f5.lHslIMl$+W)
%Od@r&:g]Ul9I!K(&32\3PtgIIW`Rm/_NrQJ>J+`\0%)-'$`a%:g"d-?l*M,UBiAZ?C$DVIO=.Y;QNC]@5d("#"E5`a,g^._ol<a:
%mH`'p7l&0Z0%6TM"-7D$bG)YW$q1+s]/<d[4uSO0,-<t=Y;.]+R*(TH/nlW4gW#BbgH9\$m2kOSRJb<JS3_Wu8>VfJ9!(GX[LtQe
%cV6AYO@##2K3,-[hD!J5%T3<XneX)8P`KKb'@LiZ0Da"+EX>1?dgiAGZ,QRMg+Ukb66:a+jsG6"aC=C\m'(S8(.M<GH>c%\A,5+I
%%;O9Y')8Fs/c55Ke(&(dW8<2,e.5=/Mo9stX^8W25;BgY'_EL!kC,Jb6-cmK(IppFEk)V](3^c(Y)sMQqjGXWJ4$>bldIF3hZ;9V
%D\mG\A!K/IM*6-LOirR)m8U44=q<q>@CX-U0`L1L'+BsD"PX&W["L*3DIkp+P)Kguie'HSWj>%Yg"\jaOqPm-['Um_'X.jN/39PP
%\/SdaZF'8cSV;BHA`AJ>;d[=Kb9*.b5GQWNh]-S5f7Og1>52W)#*R\2J@@k^l`ZVHSTI;-eA#1qG`[TjW0@VnAcC.H=&!iKOsII`
%RU<ucB:o4^7AXf(X+PUu<u]:_<(DUud+"(oPE\?S/VEqJ&@=_B>KhF"BdiVH%S`^'aC%k_<gkiS,r4JJ1&m(_E8]eK#e/TPO=_BE
%Z*<oVJ:ZX/AXW4k8I3^ODDS/R19Tj:1p`a`b]R=,YbqI2ig5VCWj1/4Hq3&;2j;66Pe6fYC8cOQFStu,')IJ'1^B;SKLos/&1\6E
%-'nHLkH;S;*e3K<rK0:#CO,JdaJ+6]&d-.R;;!Z\>0^HGRJ@@+dc;S)pK5.a3!\B_FI6GN?2SHMO[;g4l6QkLD%,i!fhieUABs$,
%.sYE"(Y+h^Fg`)&bckt`jFT"(Pej77bp]>)]Kl`]S2r,s-X$F/FbL9p6qQ_)mY^);)rbIVHVb\b]t[M&]B^`s>pZ]q<:-if`!7$`
%A8eZdKO-h&(nB@HUp&D7Y6X`iSc5_[b=*0><?9p_42O\sa\Vq<46KAGe"8;S/>LYN*Sg92>eUo5Fa-%JHbl?nZKT2Y`B);G"0"sF
%O[=/Q:u-Q$FZ1SlcUnA:m(&M)?qAp;eV@2/HjfM"7dF33Nla-=Di](kRjq3dRPYF_[]!4;pgC3m8.a/;`p>Lk*WVq@5oGR@:pWbC
%[\:;BhM#iZ/HC_X!.<WQVt#0NhDlWamrG-2Cl^MU_kf<R,g,%kjE+9U^1RV9=mX#<&TG:\8^A(^_6B(F[;"GKA,omIPbOj?J`R`%
%"t8hZDr^o.i`A4`FTu32QA"m4XI$?rIT$iZ#oU<7I2qh7d*,[0f_m./5U"iur=!%=-!G&&KK%@q:Vf7nrY`EK!q*..7ZHs`C@fuR
%%$Ct``,NRM$R@*"kKF9$W0]F8dTd1`U#RXhh:RHO\fddg>j\=om"gq\:T@=kOu:sfljbG>S$Yu?=3h10WZSll%n)M^_7CFZ@T,'`
%)Q0qqa([KLf*AFnB\uKQ20Jn<=q1VsdQkVcNK^_\OX/FFh/_i9"4[DFq\Ob$\PT3:]GF1l2;3W;%ncali([YF$l@C/a7a=Hd0p"n
%hi$7rW+NhURPf-@4TBdg^A\D(gkS)!pWS@>4C/R'Mq&C1.GTY8.Wo(VZ=4Qd9hs?AFSMT_9j(%0=0l3GSh('r<7CD'7DUEmG`V]o
%VPXSi#aKgR6;AiP:Mq,IA`=FL-0]K%(1TB8S)i"uN!HB4XdFKP`(fenlHT2lhGaL2nT[X"#VGtA`m]<B1'I1B>ph9U3PtYO2s8VN
%&R%K&ntbgVHCSLG>!AbH3qP*7Q;4*1m[<q3c66q4Z?t0%.!<CE;^9.R'rf-#/G1akfTY>YS'!Ca`M%D)C\T=/g/fr$m.2RFeoXXO
%iN\%sQU)k^kFT=B\_":Sq^2:QCf@#eC=r*0IYt[7R`ohLRH&pP\pIWGYcM5L'cj0)AFQg'[,T:#m8i2Pm(-]0`ILo0G2O3aDUn]W
%F0!CF%f'OX;(?@l\*><1>P7KQD,m8iN]MJmTD(I[([Do%F0C$r,'%*k]55d;b0<ODO*TpE,XN,@VUn+SUJhrD7?ng(Yt5/%=",0a
%T$S?K\:+rmR[`>:*Y4G/;g`Ds.J-//jgnY;:2P6?m("7:jY;[kl+XTQq7H0r*ta<%:UX/a9UuL1-mdu'LZGG#,>\0&+)1I>Fc"TL
%iTi[D?38^>J]bNr\Q4,<BPP"6*u=_pHLArSRe*0QoP;Ie2&qkB[MPHdFq`/Rp@+Fi[&'M!]CUU4SgX9l<diS$q=cj^\t)K5LJS+7
%a&NX#cb?@+7]P0dU;Eqh`BaQU]t;.2;fV_44qI"=FZIGl.,Ru8g.XLt>CB$Q<7u'+LDDR"%LVU?C>L2+W*22#(gP1mk3t4\fCl@p
%2cBNkY'2E;/^=4'D7!?*bP.mFh@\kK^Si=_3VZe@F6pR`kBi^K]d&`$?dI[u(c9>mTV1G;,g,e^61s8j%5V/08=8fB^utO,\5V9b
%mJfq]7o28F_er?%g"Y9;!X9n'*Oci[X(C5"2<WV%[uU2&]1!E;:osD1b/*dcZ-Bj/a'P<tfiHMR-CZcr^[?Af05f<Q.eB:*GmG1_
%^Y,Xr-?h[%M5h,P_u`N8e<<9>E4:T5.LBVY>ZTG#]d&q?!;>,V6g6+u`2_i`H+\N@VKDKn1q+?O:`E!88IsrEkJJjBVYf@qp6g6e
%cYFT/5^t:!JNp42bqVk%g\#kF"f0]j(Af/!Cs)^>j,g6a7XR1jOdP`f3+W?Z3+`[3g,Y)P#NkWQTBGq-7X[5Rp%QiqJC`0FPIsKt
%rNGX8L_!Ia+s&Tb*!7>S",W2fX`nS29`q0T(gr@V$@/8Gan*l>s1^Dr3u%EfR8ck0YjZ`e:;Ld1Y#[BK8k&W]U"ND(HNm8EI8N7Y
%VT/CP=pOFpl[7JE5cKM7H!]"8RLc3+l,fDEOst*lV9cF@QCRD`WbWUZXE4spjD<!]:1)u-ar=4[:\>MCHW):\L:ecG?(ojT50r]:
%SbbO+d,.4VTF7<<JELfmTGl;6h#`:%=X<`N5SBg8^"gZ\A%.Km*4nWA"a/;,LXVm_3\IjF&#=!M*iQMOKu8E.bWF:#EO3C:RHs=;
%G9d?O*d.o>14aK&o?M)"mK]ejdb^(Kp\6_ITGJ5T<Thg(E.g!6^\6Mo:FU5-%ssc0EMK,H&rNqX:^Ef^fA9Jso;Uq>5t@QRGae&Y
%]D(.JhS5!*d<M=tffZk2N<e`UbmuRmM6X`2O9@^fYP'^EfTtP\a&.b0#k`.7,AF#up$JOJ5e<!0"4`DMlA3DtXq,oOhi#,>RJs0]
%;*Mc2;TNX<B'9@u^_@<Ze<.+J@rmCpL6S_t;a..e=TE2pL9Q7<D!!'&a2Q9)*Mff*bZ5f,9JE-#%7$1BP'Yt:phhS.UX@(>f/BdG
%]UeJKDZ%i1*.M#hM!A,kDB(]j@@poV^R?fdfS/J+C_\\f6D$X6*B@Ke<2grR)9X_KL/YuMVn[o)E=X>!7'cdLq&Cg";H*.jX)rjK
%oB]f=VpEj+IpW$1EiSr[??Pq"b]!34gt@hQ\JW"_+TGR2A*gI'a*Wik.YtV4Yh+T9>kohObrSDiAj&7hRtX$=9HVsFpH6.@,\$^r
%k4PC!n:;TcqZo"_53ACb(.I-i_0(]h6D+'1[bnr9_YH%g`]DodVh^p8Z?IAeR8jK[+!+ArY`B5r0qOTic/ha\ZjhX%nq.X$T';/7
%ftT1q8#'^FHF%Oh/J`f.]&F<+kiZD?b47)iMg^OIG3*tpEQTK!rUOnuBs?>6,iVP/ce/&X*AREXeohD8GNSVY:Am9GGYkU^4JOMe
%LFafF@COCV8eGd/HGdFE&?=RRm^@(DTs:"K2V#XI!K,XuQ]eB82eD:`=c1>o(b)r3#F7?l",X<1#O+FNp!:KS<gP.s#M8-'c1@cK
%lfh>XR6RNcAFM#-j,PR`\CZAsg-uG@UdBqQQLABK#%!d=^;>]S1oPrka0q[,XP7Rf_NP"FP1F&V/T"5BI]u]t,ip8rEdla6`*V5n
%c]!L)L8M4lgA,?MHEm91mSi#V2=JKaJ3qi4?L21_]hugCmYr^DlgCs]"\[TnI;dV$3]?9^6/*ek5o(mjf=*n=m7!<01EBAcTOk'n
%W4^e4U([9dJ4^VWmAE?[Nt7IiFmV8kgSk?q5YJ9$lABRu#n`240>4hnrGBmJjP-\L^S'YbE6_#nA&%Z5@X$;?JHi]&[YH:o:%cJr
%qb6J.c`7qZWCpqd2\&)-TdW#C1"&:a0)'-9+K8!+>4#h`]d_!+mP>Ubj+h]RBXVg;ip2ODUuRCs4D8@9SEQA:anO*9?JMO+]<>OS
%B:(l_DZ>9^nXa'g>I*\V9-pNk]bG.s`6I$+kmPLL,H7h](H[/1OUK-rOB.V:Err:Pg'(TNq+]+EaG7D/<'_Ea8<gb%="J9)=.cds
%[--,2j)nnC5llQq=<+6KMOP@$^7V2!RVIU+cr:7BRkh3%Wf>fPd4C2=VdRT/`tY-.qDX=Trl"3EIpT/+EIb-_^/A[MDQUf(d\HWX
%!.6`k6-Ws6kQVan"D%RL_)+j371*"Fqo3/b84"tFC4)tC:pU_;-PQ_F8^4]ia)5Y"DV65Qjo@"O6mYC?S!edO'eb:I]&(&F`t[Qh
%@7\@fnDpTP`4!.hp>E-NSP:25]Q#jlA>&Zp0nregcq[V^atLcND5;G@7r>TIQ/^)>I05kWr\9_a\M2)>/=mg6C<cr<@jKKViOG1W
%g41tss3ff0#&hDL0c_C%:`Znn:c<W_L0;V^G#RX0`I^G)QOH,LPQ.(*TnIZT/E'7G/cj,g1pFhbZ5tFPr/G;9-]d3,_5YbhF81Kt
%Bc5Ch)jF`3XG8YBlt8H,c6i@01$WQc%oQWFLNZgmfin+gakI-b#W,cT#@l6u6Mkn@DS)>6q%T>63mgq;gOj6Sr4GgjBfD<DN?4UN
%7^n@YP?SV=IKp?c#LTN7@N=p#e_NKb!R?>]Rbl=/[]I<6D-tUd$>D)f0V`CqQTKF#m*Wtpjm,;Dj,de!KFu%/_[)677FG]>ZPDKT
%6W;B/Cf'Ot-p;ecjsj5QONo)!;sF<[lk!2fa\icZ)r%-/&I<m<AD<EPTh,Sc>+@ViJ`WSB0@QVqB<.BRTaBFBe=q%[G0,i=<&jUp
%W/]ea)G1k0@tUM\%?B7;(9.!Zj-1D=[mPuk33Ih$VR+Y:BN=BL.8mNjb?uph4,I:caZF7flK9R<CS;5m7<tOG#Pt*nf\;-aY;mMU
%gIW=cn56saPj=T84.Lj*^7gcpX3\G(qMG#tU]P2.@R&\6=WU1SR-_R,qXq"b-MK>YcoM.9^Da@=%iJ5cber+UU;'$p9'$W+MPUNe
%e\9Om$Mn[1NN-MggEO5=5E_bnq]=Gl]^V,s#0c:ZjAjT"'9CK^-oa$C3(A?Sh'nWO+3_"gB#Ji/U(R!YH@(g$.$dGH&"Pe[8XUI:
%m(3uL4Y5"@8q)1#mWdDr5E=4^_)Bd+KVl!bgFQI\R#a6M5,WsVmYTd>F03HqHe4]LODJJM#"IotIk].(XDcC&g$WY5<0k"jH^j?3
%/LQ>/qmSTMJR[th%!B;^C2/P\Nb7FTWa:@>o2c13LIHMobL\]LjiY/9If.*D!C-,7j#=GfqU[[Q]g&W@#69QrfkJ68:u7W:<$CR4
%e-%+kWPbNVQ3RbVQ\O#+Rn.HdHIb=f]:$\peR31,>PIV6\X4o<P2-YCZNP!Ci:YUj5jETsN*@qR?(jkEor"'QNX<?Se)/Ieq?caM
%?q3%XkMh#cXB5k]DpbNj(^[f0L[]Sp<dK@2Tc#J"]'LFL7gKBB&;<`Vb-"J@5k'==D<$#F;\]aECCDYPl@NF6JW5Y,lk1,8(FQ_,
%V"BYk$AN=6q3r^no%s!&8:=<]d7)`a^Vai_aX1Yg8A!ME/e[Cbj'9Kk59<KT<;)rB->Z5jgHQL/@;!H.Th>]E.WZ3[VP(n\"1pZ]
%1nCnkJhhcF<pl/6mnd5PgBY)26bNXn=;p0nJpZ>94/aRu1#%?3JPZoNc$mqi*d"4?4ZB'pk\B]gTea9a;JdSlVI6=!'LQJS5g6A.
%B5cB>_:[#trn1Pec;Qe&I;GG7qX@1J+oO_"0D1qf;-jh,[.LV7[g?'[bOCj_U?d?lcY\_s^RrigBa2sO[sQjul-6uS)lB!p`2PN(
%'m!3$`ZUNPG[f,dRI'Fd([TW/S!rPCC7HQ5YfjAC:6sW[Yq+p@+WXNQadUlS@,UpD66>"4[`rfsH;raig8tGLDeHp."T:>>,?\N;
%mKp$[2Hq\<:*TY?7ET63F'_3t8Il('VC$[*HHtIb!$J-fYg/p\l9VF<EIGDMDp_`R=j7_DF1DAmTlrV'hq-)]O)9Cbm]i]m"6(Pl
%af1!f7SJa$X;ZeGG<[KhK]90@r2cRq>bWk<P.aC"#tIjaFSW?9&DTRX2VIHbgugk-@s^ZFrJ9lV):Qp[3k;le'EHo9krdNUPqSNu
%hB7Ih8:Z5=0ag*'Mp?I2pO#oac=r]q/<q[IqS:s+O22@[6fV`cg(u:`:7sIGV6uqH8O4=JCaslq=@eFCFb_nYNe*RQfu3/0<q]+m
%c@\q`*6*H&>h9MP*6:@7mX^hK0m.^n<4@UtB&l4(M]Xi_q5"'Zokgq9WB'-rD;'WuSVP=g;6sakYGjC3iu-<_erm*^"OoK-5?Q:F
%,Qb=B?S^+s8BjhTl3h(9AEB!RY3n,N.Br-E1MSF\fha]>D<2c3FQmt72J.&m%YT=X4,UV_f3=4OaVtr;*Bl)*8^JgAVd#K2-M+mo
%Z/%Bf?\M>:<X3a6!=[qY3Q,>]8hTOAaHq8s=2-b<jD+H59uWO_8o7%DA?"2?aQ*/kP<T@@BW9+G+$3V,b0+4Rps[r-bEM2rn"ZR'
%:@%hcU7-mX:`ILQ@H/i<KCV;8oII<?G>i5,3Cjg;A9lqHN2E?tJ5Fq[f-W5\J.X&gqs-O?d$fNG=4;Rm'(,]M$i-[j22aNf?rXi%
%4cSY#r_4^=LX=.,.GiH;jXhETFPY0L28oU&2\AZ<eKG_RQIe1if#Q-.@-_QM':<]b.,opa+/M"*@uO(0p(cit8ZPKg]%.rElt?qL
%+r)4@86N.ulClKBHtQorT(eG98[Y*di+;,p?SdG$PR'13/3L(@9mq>'oh(<FUa\]&TU;&;4%RX/jVmGa:]j5>KBknd@dfWJau9Ra
%[gAS=RG#W.;jWOY[aTTT>4l:IM25M4`6u8b<ln23F`t9CUS`/MEM.pJ^/IUZF.[u/O>KuZf5s2YeNh.Eq+7E7;N%0<[LW=$GMQ5>
%+:@Y.6#+sr#K3K;SJ8ZE`_[S>O0-<'o+GUSG.;<$=u@pO+GEV>j*BP3_1`]u@#fhD?Q3=n6/[t(E5pPlnP",Uc$^aKO\#f5T^KhV
%Dbn3CkJP_@&,2of+>Eh1@RU0hDlWRkL#$ZtlpC5\ccup#(M?be`>=#CE&]!iTJ&K$1`JPK-c9f$3"o\/O^dmQe*HN#+gFd>0`(-Y
%O3Mr/qP>42*_\Bcau0TNR7>EO)gPbI51CRS>mQEhW]f!<nI?%M.Au@FhBWoJZMBOdOV:(VKeg%@5YkIr%t`D]XIlD@a2P+-A(f8.
%=JXY+`BH_ZZhVim:DAI(in,iF_i3T:P,l&VmUa*!,b5?f;`W+Ya*M[`9)-6CG&)P39HWi12-\gKCVjV;WE5E!$%7t4mWLA=4b)iC
%<qAON@7]-oaV+Z1@b$6$D3SDo2@Y6O\K@m/LI)[ne4>hB\9XB`//jtZH+$T?)FFjGQBSkO:Vi+Uq;l`8k,WJ4G]4\`C7?1K2#h=?
%2Te<"Y7eV?B%+Y8mUH-ZYmII"d\3O=S41"Ks.fqWnT!cUK7^jJ>B]iI0'RMBI5C/U(?d(,!?819>s^Zg+dHHZi+'0!K5MDV(#nij
%Dc0$05E>-$['+W_f:A%bl$[VEV@(4rFYK0$_eQkfeQ71Zj[0RM%gPCfD_TuCF3b5;QgMnd7T%%A3S/&)Y!r/$HZ%S`/`=+%'CM-7
%+PD3+N4h+Z#->A+43THa&!D:gpD.%E^Y8<r4"oamG-]!0Kb#H6lGLu,V3)qP(@PQ7U7]'BUG(3IWkQ41^E_J)qX!,2a'VCEqp]ir
%/6PSd"_n&)"ZP$?[2`.3*+j<oOKY]KOqJ(2VK#kj%_?J>Jk+F:q*4)8NK4+U9\&]>'PE\A%fP]RmZG%97Y:0t:!/!-R"frbd7b<5
%RjHI`S*$<]o5oI@Hg)oZfUCVV`*1c+I77@7lsMlQBVoRWVif,D75t#/"2na<qmN-^$8!_]CFjYth)D_)cL0;e)o]4Z1.F8GX+\.`
%45uW+Uf:(/U0;-/(d]D&D;TZfNX037#eW86UKG[m<<',.8#Ed*&[a\4ag,CV18c2b,f'b(SfLcK_.@tqqFR[(@?3S;MaN`pPl?O`
%?7K=i`>Nf$.5'cRk/h#RJ"grA:0G^Dcd/J2lgP,oGmK#e:6_KXo&fdnO>IS9S&W?u#Z0^\P%fnHPE]B94_o?S'b6P-E?u%R@V8CN
%&aNET/`EmE1C92sqg5:fZh,g.O/u8+Bi<c*n-[Gq*_>H3^T$OTaC_9T9.@U.P9_qmQDW#f.uG-11UTD)hdoiLAI5\-0_Ws%36e6k
%bej!H)W7LY#4?Mr3`2t_UHb&Y+C^e>D#g]DB%[sfP%`=2EE;*1234ueTk"4pUm'VP.XX8C-*H;]jt4Ep7o$I.F7$96PH.5H)D?8o
%XF3XT.GCLC&_us!Uq"[-;/>Y'(Vk'G<2Va8$9.C#37(E@.GI@l%hE.!a;km5HV/<hoKCc`!FY.=&#cq$QmV^0<#SVKEop*IG`h2o
%g=JYJ[uLKq2t9CUbulBT[s4&WYEVb80;FRC(Q!LN3$7gg\m;pc`Os5,WLW>$6m<"!13Aio/[4'sPFI8JOUu*=Q];QA&rB[4g4Rdn
%"5t]/Oj6>],[[NRb^XUqR*Erd*'0rgP%+,b]J(/`qUj\gC,Mc(DYYU0IQ@KoA0LoCOV#d3->2c[MdKr#!NPQcB\fIp&d4(qiJ!Rd
%MV35<dKf&@dCLul!H^:/3pLf[VF?ofT]T7@FgK])A[>ei9)J!rlB)$+gqOO/]rDNpCG*QrZSMXM^?W^T+6#*i$_eT_"og)k85[K!
%OEtgA]eOD_RcI&rfR4-ioe3pP66+:ElgDLb?R$$3Egj*EDLni--/il8c2Bo'S(?=Gd*m/7=''c=h*.X;pED:qg8)1-p$N"$nfQ;F
%$fTIu[P8%QaJ0=4APL+dV9ggm>,to'\J/f6r_@af+SFReO<0F/CihOe*8tLb,H/ka\bitKqqghl9<jS$<IQkB;F"%"-%14jUjPB.
%o6r)uC\U]-C<"4fTRLpTrbA^e@6:osAEJmrY?tMc#O(1q.9l690:#2s<:5m2/ZX*OhJ1Q5[O?lFdZa5?2Mn\L&B?u\#7$X<c.afQ
%<5"KKop[RICo90R7RXsUpRbpiCDtOj[I$0.llU,9!YeqKTW)niB&-Uj[3%6K_Gr"u&MR0^<]8ju,%3p)\^rU)@iH-454$*r`<*/D
%LG4jZ;H)'f@)pQ,J=_a&"c<[R#mH;LdT54dc5h#l3^PD&J#aR*RC)<h$2Vbaf<\XcofY.#,7)UDi@C%l#K;i[AEkuLfJG,%DRld]
%<7>GR/SOSTPD!8TqaOI4K;uZN-<9@kn]4GH*"5m;fB,fOf#5rB@>P22,ad7L-+[p=KMJ"Z_uQgG)sUOqHYgJV!I%\-LTW\&ig%/)
%IbC]c&3Zh(Ki,eE[.'/.ja8<Pqq0V]rM^2BL@/B]%0ql!;h%1"PTF(>785W3+tnOD$!MkL$j^&_jnI[Eo>GWD8M\ja6*mK#H=t*)
%)0sC&Rl,X"%+C1TW(SZ4dklYD]Cf30FE@Pld71bEThnt1YAXS?a-:&Z)Bl8(&G*L%Z?>Kq'm)C0\ot"r>GPOBMM=+b0k5)8Mg@h-
%Fn2+7ka<(f+B-eO:P=;uNP?AhHFFWeMD:k\B!Y;;loV=,2(9hQ%jERFAm6!%jVM8c9,hT;@4D#<PG3,_YJZGr`RKI&KYZMC.0HJG
%qfJ#CNpfOk,ScfaW@f?/)pq5c$]SJqZ$Unb/n#j"(>P'2Qj4OsF93U[s'A=2FNP2&_T%IL@!,(Tg%Wb"*4s3I@b]i#%lT"g`W`q,
%+P$B4[Z08tP`(AXLt4TmC25/7E?&NL^_(YA&)&lpH?Tk&ZWpR&$VIC3r-d4';lqc5joMG7,)(=`U074mcToug,F;"?HWh+(aYlrC
%_q@2P(&UlQeL_oT_$h'p!COtq\5='7iZ+8^&$=A.d'C1[94E&+S>BR8#!GElbpgN#f)3N:#WIs/I@lASaaTDKc%kF*<4R+mDiRDI
%&!sqm>Z_dYV,0lg7j2m.LMU^I[ed&rgq>_@5@UG<n)HRFe3N/o1WNEtB2GX"X^H:eI>S.2?@Pi@8l\0sl-;LAlMgY'=jY<^$UaH=
%Bki"=Scj8Me4C'C[(au6h[cl\2j#1Zq:c#5Gj@XASU&lH2r(rj$I<dA8^G]\_`dl"TEBKtce@8m8.N7-qke\QHkoQ60h25?jX@_V
%nJHVSp@03%nr#(s;0"i.WL?,\pY_\aHZ2eq[S7A+]$-'],1lQP:[c7cprKtCojSVKahn0<b#)c!Z[ggmV4Q"je;\CL'tD:*$[B>I
%=?tDN8d&G;8as'%BJ8:03>V+WmKMtBKUU3TH_0)P$i!Tls!J);q\rJ?S<[G'Q=a'V.4=?d&!TBq=aRJ3lW>P"Xk0R4(mf+uU@[P`
%SV4'losR"G7QmO]ho*c39)&MQId9_I8)eAKF[Oq?GadoUg[X_>hU6r)k'44RkXt!!hc(Vf5u73<.ZuiPhQ)'`Fj_q(mr@W"c!9OS
%U>3X&a`Z<QZQ;ZhAfXjD4f72o>F*k5IF$AhEOS+B^$)tccD@CF9lFrN3o`=0nR3d836lTEm\.Zf+)a.TqS(jjdFZ?cXn,,pQMDlq
%<DEQ(mstq>VtT+*s1<$^ER+i>5sdes.ak3NCQh&#kU1p]c>PP8[9md:#7Utr?QnhY/*Nd!%I&?2dX9F;P8(0hFM.=?&r''j.ag2.
%kIJ=6F6ii*2cZ!c%Ct#Z9mp!'mQ"T'd^=u,fQ4UlpMB,iMKB<B<M+%?%aqTg%hB0#Ltt,?omtH\HZ9]_b3Cs(X`FYa4m-(d>=Z7g
%nCE`i-+Lsd.sTj0`sNlF^`Ir3nCJ!gUgjQM*jcZpQ)*^JTBGt.$@])@J"i**^d_"9Q)%,;VbBD:N,M70=<?HnD1<TuJ97-D6j@cR
%O)*dO;bO\D]9FBmWbQk,OriJ+5=jI,4k6?T%Sr::EC2o'Zi)]1UiZ!B<G,5PeYHt<DDgZ^mX+:I4fV)CqPY`H_f+r*g9$idmagp$
%ZFNagl2&-Wl+M=kIi^rHE?h#IIH`fU9&FC34d/N5\sDV"H7ni0mi;dah!oa`FaIK]HscHb1>e/[<PI"Zlf4S7p=_:2Iof?BO4gHM
%ZbKA$2YC/kA[7g/<k5tB1s(,Ch<qBlOng7mnF97$4fV*JK9u:!,^>RKL31-&TMBT\;bO]6n3#7QUfm]+FX3OTEGIV)qPY^rF1elU
%CCuW4a(c^bEU'<bF:H!MT5+rY8Cnn&e6sun6VG!Sn9KI9DScdQUiQ^+VDH_Mr;IBSUI-5s%$m&Ob/;/8.WI0p$IQ*Q\5&A?FY<:U
%0ul&ubV/&_<puhBb!CH(ht'6B>cN9PT+S&Ee4;a&6^rC83Maq+k3a?l&dI6n6T("Zp7Mmq&/QBFP>+*gU&2)fbGiG'V-BLdqlMfb
%$ShKSL[I/b:%lO8q+MLacW#\F]t7:59mourY1:&4Tkh3"YtgJQ65ac'WJ<Z)d@:7:hP=Xg%Osba!pZ-3F+)1%6seZ8cZ<>2Qd!"=
%QhGI&l)ja91V"3lCT6`qa-%K^EU'=YF,dp%j,<q5b-fGPENer8pfnp84LGulq=F7%(M^_>8%ss)^s-0%rce.bmt7^VrR#Q`j!+C3
%s%E<Gs7FY;kI5s=msk/"5Q,:.rp[]$j$3M(J,bjbr4i:.Q[egls5BULb<Q!X^O5jtJ,X'rn1XgfqU:d\qNntpQiHeEs3"c`r0RHL
%5Q<Yj%(ZZ@i=GtQJ,Q#>j+$k(!"t/2T)~>
%AI9_PrivateDataEnd
